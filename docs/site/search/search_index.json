{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NioChat - Sistema de Atendimento WhatsApp - :material-robot:{ .lg .middle } **IA Inteligente** --- Sistema de IA avan\u00e7ado com ChatGPT integrado, transcri\u00e7\u00e3o autom\u00e1tica de \u00e1udio e consulta autom\u00e1tica ao SGP [:octicons-arrow-right-24: Configurar IA](ai/configuration.md) - :material-whatsapp:{ .lg .middle } **WhatsApp** --- Integra\u00e7\u00e3o completa com Uazapi/Evolution API para envio e recebimento de mensagens [:octicons-arrow-right-24: Configurar WhatsApp](configuration/integrations.md) - :material-database:{ .lg .middle } **Supabase** --- Dashboard em tempo real, auditoria avan\u00e7ada e sistema CSAT com Supabase [:octicons-arrow-right-24: Configurar Supabase](supabase/integration.md) - :material-chart-line:{ .lg .middle } **Dashboard** --- M\u00e9tricas em tempo real, gr\u00e1ficos interativos e relat\u00f3rios detalhados [:octicons-arrow-right-24: Ver Dashboard](usage/dashboard.md) \ud83d\ude80 Funcionalidades Principais \ud83e\udd16 Intelig\u00eancia Artificial Avan\u00e7ada IA ChatGPT Integrada : Atendimento automatizado inteligente Transcri\u00e7\u00e3o de \u00c1udio : Convers\u00e3o autom\u00e1tica de mensagens de voz para texto Consulta SGP Autom\u00e1tica : IA consulta dados reais do cliente automaticamente Function Calls : IA executa fun\u00e7\u00f5es do SGP em tempo real An\u00e1lise de Sentimento : IA analisa feedback textual e converte em avalia\u00e7\u00f5es CSAT \ud83d\udcf1 Integra\u00e7\u00e3o WhatsApp Completa Uazapi/Evolution API : Integra\u00e7\u00e3o nativa com WhatsApp Business Webhooks em Tempo Real : Recebimento instant\u00e2neo de mensagens M\u00eddia Completa : Suporte a imagens, v\u00eddeos, \u00e1udios e documentos Rea\u00e7\u00f5es e Exclus\u00e3o : Sistema completo de intera\u00e7\u00f5es Status de Entrega : Confirma\u00e7\u00e3o de recebimento das mensagens \ud83d\udcca Dashboard e M\u00e9tricas Tempo Real : Atualiza\u00e7\u00f5es instant\u00e2neas via WebSocket M\u00e9tricas Avan\u00e7adas : Taxa de resolu\u00e7\u00e3o, satisfa\u00e7\u00e3o m\u00e9dia, tempo de resposta Gr\u00e1ficos Interativos : Visualiza\u00e7\u00f5es din\u00e2micas com Recharts Filtros Avan\u00e7ados : Por data, usu\u00e1rio, equipe e provedor Exporta\u00e7\u00e3o : Relat\u00f3rios em PDF e Excel \ud83d\udd10 Sistema Multi-Tenant Isolamento Total : Cada provedor tem seus dados separados Permiss\u00f5es Granulares : Controle fino de acesso por usu\u00e1rio Equipes : Organiza\u00e7\u00e3o por equipes com visibilidade controlada Transfer\u00eancia Inteligente : Entre agentes e equipes \ud83d\udcc8 Sistema CSAT Coleta Autom\u00e1tica : Feedback enviado automaticamente ap\u00f3s fechamento An\u00e1lise IA : Interpreta\u00e7\u00e3o autom\u00e1tica de feedback textual Dashboard Completo : M\u00e9tricas e evolu\u00e7\u00e3o temporal Hist\u00f3rico Detalhado : \u00daltimos feedbacks com fotos de perfil \ud83c\udfd7\ufe0f Arquitetura graph TB subgraph \"Frontend\" A[React App] B[Dashboard] C[Chat Interface] D[Admin Panel] end subgraph \"Backend\" E[Django API] F[WebSocket] G[Celery Tasks] H[Redis Cache] end subgraph \"Integra\u00e7\u00f5es\" I[WhatsApp Uazapi] J[OpenAI ChatGPT] K[SGP System] L[Supabase] end subgraph \"Banco de Dados\" M[PostgreSQL] N[Redis] O[Supabase] end A --> E B --> E C --> F D --> E E --> G E --> H F --> H E --> I E --> J E --> K E --> L E --> M G --> N L --> O \ud83d\ude80 In\u00edcio R\u00e1pido 1. Clone o Reposit\u00f3rio git clone https://github.com/juniorssilvaa/niochat.git cd niochat 2. Configure o Ambiente # Backend cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt python manage.py migrate python manage.py createsuperuser # Frontend cd frontend/frontend npm install 3. Inicie os Servi\u00e7os # Terminal 1 - Backend cd backend python manage.py runserver 0.0.0.0:8010 # Terminal 2 - Frontend cd frontend/frontend npm run dev 4. Acesse o Sistema Frontend : http://localhost:5173 Backend : http://localhost:8010 Admin : http://localhost:8010/admin \ud83d\udcda Documenta\u00e7\u00e3o Completa Explore nossa documenta\u00e7\u00e3o completa para aprender sobre: :octicons-book-24: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o :octicons-code-24: API e Endpoints :octicons-cpu-24: IA e SGP :octicons-database-24: Supabase :octicons-gear-24: Desenvolvimento \ud83c\udd98 Suporte GitHub Issues : Reportar problemas Documenta\u00e7\u00e3o : Navegue pelas se\u00e7\u00f5es acima Email : Entre em contato para suporte t\u00e9cnico \ud83d\udcc4 Licen\u00e7a Este projeto est\u00e1 sob a licen\u00e7a MIT. Veja o arquivo LICENSE para mais detalhes.","title":"NioChat - Sistema de Atendimento WhatsApp"},{"location":"#niochat-sistema-de-atendimento-whatsapp","text":"- :material-robot:{ .lg .middle } **IA Inteligente** --- Sistema de IA avan\u00e7ado com ChatGPT integrado, transcri\u00e7\u00e3o autom\u00e1tica de \u00e1udio e consulta autom\u00e1tica ao SGP [:octicons-arrow-right-24: Configurar IA](ai/configuration.md) - :material-whatsapp:{ .lg .middle } **WhatsApp** --- Integra\u00e7\u00e3o completa com Uazapi/Evolution API para envio e recebimento de mensagens [:octicons-arrow-right-24: Configurar WhatsApp](configuration/integrations.md) - :material-database:{ .lg .middle } **Supabase** --- Dashboard em tempo real, auditoria avan\u00e7ada e sistema CSAT com Supabase [:octicons-arrow-right-24: Configurar Supabase](supabase/integration.md) - :material-chart-line:{ .lg .middle } **Dashboard** --- M\u00e9tricas em tempo real, gr\u00e1ficos interativos e relat\u00f3rios detalhados [:octicons-arrow-right-24: Ver Dashboard](usage/dashboard.md)","title":"NioChat - Sistema de Atendimento WhatsApp"},{"location":"#funcionalidades-principais","text":"","title":"\ud83d\ude80 Funcionalidades Principais"},{"location":"#inteligencia-artificial-avancada","text":"IA ChatGPT Integrada : Atendimento automatizado inteligente Transcri\u00e7\u00e3o de \u00c1udio : Convers\u00e3o autom\u00e1tica de mensagens de voz para texto Consulta SGP Autom\u00e1tica : IA consulta dados reais do cliente automaticamente Function Calls : IA executa fun\u00e7\u00f5es do SGP em tempo real An\u00e1lise de Sentimento : IA analisa feedback textual e converte em avalia\u00e7\u00f5es CSAT","title":"\ud83e\udd16 Intelig\u00eancia Artificial Avan\u00e7ada"},{"location":"#integracao-whatsapp-completa","text":"Uazapi/Evolution API : Integra\u00e7\u00e3o nativa com WhatsApp Business Webhooks em Tempo Real : Recebimento instant\u00e2neo de mensagens M\u00eddia Completa : Suporte a imagens, v\u00eddeos, \u00e1udios e documentos Rea\u00e7\u00f5es e Exclus\u00e3o : Sistema completo de intera\u00e7\u00f5es Status de Entrega : Confirma\u00e7\u00e3o de recebimento das mensagens","title":"\ud83d\udcf1 Integra\u00e7\u00e3o WhatsApp Completa"},{"location":"#dashboard-e-metricas","text":"Tempo Real : Atualiza\u00e7\u00f5es instant\u00e2neas via WebSocket M\u00e9tricas Avan\u00e7adas : Taxa de resolu\u00e7\u00e3o, satisfa\u00e7\u00e3o m\u00e9dia, tempo de resposta Gr\u00e1ficos Interativos : Visualiza\u00e7\u00f5es din\u00e2micas com Recharts Filtros Avan\u00e7ados : Por data, usu\u00e1rio, equipe e provedor Exporta\u00e7\u00e3o : Relat\u00f3rios em PDF e Excel","title":"\ud83d\udcca Dashboard e M\u00e9tricas"},{"location":"#sistema-multi-tenant","text":"Isolamento Total : Cada provedor tem seus dados separados Permiss\u00f5es Granulares : Controle fino de acesso por usu\u00e1rio Equipes : Organiza\u00e7\u00e3o por equipes com visibilidade controlada Transfer\u00eancia Inteligente : Entre agentes e equipes","title":"\ud83d\udd10 Sistema Multi-Tenant"},{"location":"#sistema-csat","text":"Coleta Autom\u00e1tica : Feedback enviado automaticamente ap\u00f3s fechamento An\u00e1lise IA : Interpreta\u00e7\u00e3o autom\u00e1tica de feedback textual Dashboard Completo : M\u00e9tricas e evolu\u00e7\u00e3o temporal Hist\u00f3rico Detalhado : \u00daltimos feedbacks com fotos de perfil","title":"\ud83d\udcc8 Sistema CSAT"},{"location":"#arquitetura","text":"graph TB subgraph \"Frontend\" A[React App] B[Dashboard] C[Chat Interface] D[Admin Panel] end subgraph \"Backend\" E[Django API] F[WebSocket] G[Celery Tasks] H[Redis Cache] end subgraph \"Integra\u00e7\u00f5es\" I[WhatsApp Uazapi] J[OpenAI ChatGPT] K[SGP System] L[Supabase] end subgraph \"Banco de Dados\" M[PostgreSQL] N[Redis] O[Supabase] end A --> E B --> E C --> F D --> E E --> G E --> H F --> H E --> I E --> J E --> K E --> L E --> M G --> N L --> O","title":"\ud83c\udfd7\ufe0f Arquitetura"},{"location":"#inicio-rapido","text":"","title":"\ud83d\ude80 In\u00edcio R\u00e1pido"},{"location":"#1-clone-o-repositorio","text":"git clone https://github.com/juniorssilvaa/niochat.git cd niochat","title":"1. Clone o Reposit\u00f3rio"},{"location":"#2-configure-o-ambiente","text":"# Backend cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt python manage.py migrate python manage.py createsuperuser # Frontend cd frontend/frontend npm install","title":"2. Configure o Ambiente"},{"location":"#3-inicie-os-servicos","text":"# Terminal 1 - Backend cd backend python manage.py runserver 0.0.0.0:8010 # Terminal 2 - Frontend cd frontend/frontend npm run dev","title":"3. Inicie os Servi\u00e7os"},{"location":"#4-acesse-o-sistema","text":"Frontend : http://localhost:5173 Backend : http://localhost:8010 Admin : http://localhost:8010/admin","title":"4. Acesse o Sistema"},{"location":"#documentacao-completa","text":"Explore nossa documenta\u00e7\u00e3o completa para aprender sobre: :octicons-book-24: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o :octicons-code-24: API e Endpoints :octicons-cpu-24: IA e SGP :octicons-database-24: Supabase :octicons-gear-24: Desenvolvimento","title":"\ud83d\udcda Documenta\u00e7\u00e3o Completa"},{"location":"#suporte","text":"GitHub Issues : Reportar problemas Documenta\u00e7\u00e3o : Navegue pelas se\u00e7\u00f5es acima Email : Entre em contato para suporte t\u00e9cnico","title":"\ud83c\udd98 Suporte"},{"location":"#licenca","text":"Este projeto est\u00e1 sob a licen\u00e7a MIT. Veja o arquivo LICENSE para mais detalhes.","title":"\ud83d\udcc4 Licen\u00e7a"},{"location":"changelog/","text":"Changelog Todas as mudan\u00e7as not\u00e1veis do projeto NioChat ser\u00e3o documentadas neste arquivo. [2.1.5] - 2025-01-XX \ud83c\udf89 Adicionado Sistema CSAT Completo : Coleta autom\u00e1tica de feedback com dashboard An\u00e1lise de Sentimento IA : Interpreta\u00e7\u00e3o autom\u00e1tica de feedback textual Auditoria Avan\u00e7ada : Hist\u00f3rico completo de conversas e avalia\u00e7\u00f5es Dashboard Melhorado : M\u00e9tricas em tempo real e gr\u00e1ficos interativos Isolamento de Dados : Seguran\u00e7a total entre provedores Automa\u00e7\u00e3o Celery : Tarefas programadas para CSAT Interface Otimizada : Componentes sem emojis e mais profissional Transfer\u00eancia para Equipes : Novo endpoint /transfer_to_team/ para transfer\u00eancia correta Classifica\u00e7\u00e3o de Conversas : L\u00f3gica aprimorada para abas (Com IA, Em Espera, Em Atendimento) Sistema de Equipes : Conversas transferidas ficam vis\u00edveis para toda a equipe \ud83d\udd27 Melhorado Performance : Otimiza\u00e7\u00f5es no dashboard e carregamento de dados UX : Interface mais limpa e profissional Seguran\u00e7a : Isolamento total de dados entre provedores Relat\u00f3rios : Gr\u00e1ficos mais informativos e interativos \ud83d\udc1b Corrigido CSAT : Corre\u00e7\u00e3o no envio autom\u00e1tico de pesquisas Transfer\u00eancia : Corre\u00e7\u00e3o na l\u00f3gica de transfer\u00eancia para equipes Dashboard : Corre\u00e7\u00e3o na atualiza\u00e7\u00e3o de m\u00e9tricas em tempo real Auditoria : Corre\u00e7\u00e3o na exibi\u00e7\u00e3o de logs de auditoria [2.0.0] - 2024-12-XX \ud83c\udf89 Adicionado Integra\u00e7\u00e3o ChatGPT : IA conversacional avan\u00e7ada SGP Autom\u00e1tico : Consulta dados reais do cliente Function Calls : IA executa fun\u00e7\u00f5es SGP em tempo real Fluxo Inteligente : Detec\u00e7\u00e3o autom\u00e1tica de demandas Personalidade Avan\u00e7ada : Customiza\u00e7\u00e3o completa da IA Gera\u00e7\u00e3o Autom\u00e1tica : Faturas com PIX e QR Code Atendimento 3x mais r\u00e1pido : Sem perguntas desnecess\u00e1rias \ud83d\udd27 Melhorado Performance : Atendimento automatizado 24/7 Precis\u00e3o : Dados reais do SGP, nunca inventados Velocidade : Respostas instant\u00e2neas com dados completos Personaliza\u00e7\u00e3o : IA \u00fanica para cada provedor [1.0.0] - 2024-XX-XX \ud83c\udf89 Adicionado Sistema Base : Estrutura completa do NioChat Integra\u00e7\u00e3o WhatsApp : Uazapi/Evolution API integrado Interface React : Interface moderna e responsiva WebSocket : Comunica\u00e7\u00e3o em tempo real Sistema de Rea\u00e7\u00f5es : Emojis e exclus\u00e3o de mensagens Gest\u00e3o de Equipes : Organiza\u00e7\u00e3o por equipes Upload de M\u00eddia : Suporte completo a m\u00eddia Painel Admin : Interface Django customizada Sistema Multi-tenant : Suporte a m\u00faltiplos provedores Logs de Auditoria : Sistema completo de auditoria Integra\u00e7\u00f5es M\u00faltiplas : WhatsApp, Telegram, Email, Webchat Permiss\u00f5es Granulares : Controle fino de acesso Configura\u00e7\u00f5es Avan\u00e7adas : Provedores personaliz\u00e1veis Webhooks Configur\u00e1veis : Integra\u00e7\u00e3o flex\u00edvel \ud83d\udd27 Melhorado Arquitetura : Sistema escal\u00e1vel e robusto Seguran\u00e7a : Isolamento total entre provedores Performance : Otimiza\u00e7\u00f5es em todas as camadas UX : Interface intuitiva e moderna \ud83d\ude80 Roadmap Pr\u00f3ximas Vers\u00f5es v2.2.0 : Integra\u00e7\u00e3o com mais sistemas de gest\u00e3o v2.3.0 : IA multil\u00edngue v2.4.0 : Dashboard avan\u00e7ado com mais m\u00e9tricas v3.0.0 : Arquitetura microservi\u00e7os Funcionalidades Planejadas Integra\u00e7\u00e3o CRM : Conectores para CRMs populares IA Multil\u00edngue : Suporte a m\u00faltiplos idiomas Dashboard Avan\u00e7ado : Mais m\u00e9tricas e relat\u00f3rios Arquitetura Microservi\u00e7os : Escalabilidade m\u00e1xima Mobile App : Aplicativo nativo para mobile API GraphQL : API mais flex\u00edvel Integra\u00e7\u00e3o Slack : Notifica\u00e7\u00f5es no Slack Integra\u00e7\u00e3o Teams : Notifica\u00e7\u00f5es no Microsoft Teams \ud83d\udcca Estat\u00edsticas Desenvolvimento Commits : 500+ Issues : 50+ resolvidas Pull Requests : 100+ aprovados Contribuidores : 5+ Funcionalidades Endpoints API : 50+ Componentes React : 100+ Integra\u00e7\u00f5es : 10+ Testes : 200+ Performance Tempo de Resposta : < 200ms Uptime : 99.9% Escalabilidade : 1000+ usu\u00e1rios simult\u00e2neos Disponibilidade : 24/7 \ud83c\udfc6 Reconhecimentos Tecnologias Utilizadas Django 5.2 : Framework web robusto React 18 : Interface moderna PostgreSQL : Banco de dados confi\u00e1vel Redis : Cache e sess\u00f5es Celery : Processamento ass\u00edncrono WebSocket : Tempo real OpenAI : IA avan\u00e7ada Supabase : Dashboard e auditoria Integra\u00e7\u00f5es Uazapi/Evolution : WhatsApp Business OpenAI ChatGPT : IA conversacional SGP : Sistema de gest\u00e3o Supabase : Dashboard e dados Telegram : Notifica\u00e7\u00f5es Email : Comunica\u00e7\u00e3o \ud83d\udcdd Notas de Vers\u00e3o v2.1.5 Esta vers\u00e3o representa um marco importante no desenvolvimento do NioChat, com a introdu\u00e7\u00e3o do sistema CSAT completo e auditoria avan\u00e7ada. O sistema agora oferece: Coleta autom\u00e1tica de feedback com an\u00e1lise de sentimento Dashboard em tempo real com m\u00e9tricas precisas Auditoria completa de todas as a\u00e7\u00f5es do sistema Isolamento total de dados entre provedores Interface otimizada para melhor experi\u00eancia do usu\u00e1rio v2.0.0 Esta vers\u00e3o revolucionou o atendimento automatizado com a introdu\u00e7\u00e3o da IA inteligente e integra\u00e7\u00e3o SGP. O sistema agora oferece: Atendimento 24/7 com IA avan\u00e7ada Dados reais do SGP, nunca inventados Function Calls para a\u00e7\u00f5es autom\u00e1ticas Personaliza\u00e7\u00e3o completa da IA por provedor Fluxo inteligente sem perguntas desnecess\u00e1rias v1.0.0 Esta vers\u00e3o estabeleceu a base s\u00f3lida do NioChat com: Arquitetura robusta e escal\u00e1vel Integra\u00e7\u00e3o completa com WhatsApp Interface moderna e responsiva Sistema multi-tenant com isolamento total Permiss\u00f5es granulares para controle fino \ud83d\udd17 Links \u00dateis GitHub : github.com/juniorssilvaa/niochat Documenta\u00e7\u00e3o : docs.niochat.com.br Demo : demo.niochat.com.br Suporte : suporte@niochat.com.br \ud83d\udcc4 Licen\u00e7a Este projeto est\u00e1 sob a licen\u00e7a MIT. Veja o arquivo LICENSE para mais detalhes.","title":"Changelog"},{"location":"changelog/#changelog","text":"Todas as mudan\u00e7as not\u00e1veis do projeto NioChat ser\u00e3o documentadas neste arquivo.","title":"Changelog"},{"location":"changelog/#215-2025-01-xx","text":"","title":"[2.1.5] - 2025-01-XX"},{"location":"changelog/#adicionado","text":"Sistema CSAT Completo : Coleta autom\u00e1tica de feedback com dashboard An\u00e1lise de Sentimento IA : Interpreta\u00e7\u00e3o autom\u00e1tica de feedback textual Auditoria Avan\u00e7ada : Hist\u00f3rico completo de conversas e avalia\u00e7\u00f5es Dashboard Melhorado : M\u00e9tricas em tempo real e gr\u00e1ficos interativos Isolamento de Dados : Seguran\u00e7a total entre provedores Automa\u00e7\u00e3o Celery : Tarefas programadas para CSAT Interface Otimizada : Componentes sem emojis e mais profissional Transfer\u00eancia para Equipes : Novo endpoint /transfer_to_team/ para transfer\u00eancia correta Classifica\u00e7\u00e3o de Conversas : L\u00f3gica aprimorada para abas (Com IA, Em Espera, Em Atendimento) Sistema de Equipes : Conversas transferidas ficam vis\u00edveis para toda a equipe","title":"\ud83c\udf89 Adicionado"},{"location":"changelog/#melhorado","text":"Performance : Otimiza\u00e7\u00f5es no dashboard e carregamento de dados UX : Interface mais limpa e profissional Seguran\u00e7a : Isolamento total de dados entre provedores Relat\u00f3rios : Gr\u00e1ficos mais informativos e interativos","title":"\ud83d\udd27 Melhorado"},{"location":"changelog/#corrigido","text":"CSAT : Corre\u00e7\u00e3o no envio autom\u00e1tico de pesquisas Transfer\u00eancia : Corre\u00e7\u00e3o na l\u00f3gica de transfer\u00eancia para equipes Dashboard : Corre\u00e7\u00e3o na atualiza\u00e7\u00e3o de m\u00e9tricas em tempo real Auditoria : Corre\u00e7\u00e3o na exibi\u00e7\u00e3o de logs de auditoria","title":"\ud83d\udc1b Corrigido"},{"location":"changelog/#200-2024-12-xx","text":"","title":"[2.0.0] - 2024-12-XX"},{"location":"changelog/#adicionado_1","text":"Integra\u00e7\u00e3o ChatGPT : IA conversacional avan\u00e7ada SGP Autom\u00e1tico : Consulta dados reais do cliente Function Calls : IA executa fun\u00e7\u00f5es SGP em tempo real Fluxo Inteligente : Detec\u00e7\u00e3o autom\u00e1tica de demandas Personalidade Avan\u00e7ada : Customiza\u00e7\u00e3o completa da IA Gera\u00e7\u00e3o Autom\u00e1tica : Faturas com PIX e QR Code Atendimento 3x mais r\u00e1pido : Sem perguntas desnecess\u00e1rias","title":"\ud83c\udf89 Adicionado"},{"location":"changelog/#melhorado_1","text":"Performance : Atendimento automatizado 24/7 Precis\u00e3o : Dados reais do SGP, nunca inventados Velocidade : Respostas instant\u00e2neas com dados completos Personaliza\u00e7\u00e3o : IA \u00fanica para cada provedor","title":"\ud83d\udd27 Melhorado"},{"location":"changelog/#100-2024-xx-xx","text":"","title":"[1.0.0] - 2024-XX-XX"},{"location":"changelog/#adicionado_2","text":"Sistema Base : Estrutura completa do NioChat Integra\u00e7\u00e3o WhatsApp : Uazapi/Evolution API integrado Interface React : Interface moderna e responsiva WebSocket : Comunica\u00e7\u00e3o em tempo real Sistema de Rea\u00e7\u00f5es : Emojis e exclus\u00e3o de mensagens Gest\u00e3o de Equipes : Organiza\u00e7\u00e3o por equipes Upload de M\u00eddia : Suporte completo a m\u00eddia Painel Admin : Interface Django customizada Sistema Multi-tenant : Suporte a m\u00faltiplos provedores Logs de Auditoria : Sistema completo de auditoria Integra\u00e7\u00f5es M\u00faltiplas : WhatsApp, Telegram, Email, Webchat Permiss\u00f5es Granulares : Controle fino de acesso Configura\u00e7\u00f5es Avan\u00e7adas : Provedores personaliz\u00e1veis Webhooks Configur\u00e1veis : Integra\u00e7\u00e3o flex\u00edvel","title":"\ud83c\udf89 Adicionado"},{"location":"changelog/#melhorado_2","text":"Arquitetura : Sistema escal\u00e1vel e robusto Seguran\u00e7a : Isolamento total entre provedores Performance : Otimiza\u00e7\u00f5es em todas as camadas UX : Interface intuitiva e moderna","title":"\ud83d\udd27 Melhorado"},{"location":"changelog/#roadmap","text":"","title":"\ud83d\ude80 Roadmap"},{"location":"changelog/#proximas-versoes","text":"v2.2.0 : Integra\u00e7\u00e3o com mais sistemas de gest\u00e3o v2.3.0 : IA multil\u00edngue v2.4.0 : Dashboard avan\u00e7ado com mais m\u00e9tricas v3.0.0 : Arquitetura microservi\u00e7os","title":"Pr\u00f3ximas Vers\u00f5es"},{"location":"changelog/#funcionalidades-planejadas","text":"Integra\u00e7\u00e3o CRM : Conectores para CRMs populares IA Multil\u00edngue : Suporte a m\u00faltiplos idiomas Dashboard Avan\u00e7ado : Mais m\u00e9tricas e relat\u00f3rios Arquitetura Microservi\u00e7os : Escalabilidade m\u00e1xima Mobile App : Aplicativo nativo para mobile API GraphQL : API mais flex\u00edvel Integra\u00e7\u00e3o Slack : Notifica\u00e7\u00f5es no Slack Integra\u00e7\u00e3o Teams : Notifica\u00e7\u00f5es no Microsoft Teams","title":"Funcionalidades Planejadas"},{"location":"changelog/#estatisticas","text":"","title":"\ud83d\udcca Estat\u00edsticas"},{"location":"changelog/#desenvolvimento","text":"Commits : 500+ Issues : 50+ resolvidas Pull Requests : 100+ aprovados Contribuidores : 5+","title":"Desenvolvimento"},{"location":"changelog/#funcionalidades","text":"Endpoints API : 50+ Componentes React : 100+ Integra\u00e7\u00f5es : 10+ Testes : 200+","title":"Funcionalidades"},{"location":"changelog/#performance","text":"Tempo de Resposta : < 200ms Uptime : 99.9% Escalabilidade : 1000+ usu\u00e1rios simult\u00e2neos Disponibilidade : 24/7","title":"Performance"},{"location":"changelog/#reconhecimentos","text":"","title":"\ud83c\udfc6 Reconhecimentos"},{"location":"changelog/#tecnologias-utilizadas","text":"Django 5.2 : Framework web robusto React 18 : Interface moderna PostgreSQL : Banco de dados confi\u00e1vel Redis : Cache e sess\u00f5es Celery : Processamento ass\u00edncrono WebSocket : Tempo real OpenAI : IA avan\u00e7ada Supabase : Dashboard e auditoria","title":"Tecnologias Utilizadas"},{"location":"changelog/#integracoes","text":"Uazapi/Evolution : WhatsApp Business OpenAI ChatGPT : IA conversacional SGP : Sistema de gest\u00e3o Supabase : Dashboard e dados Telegram : Notifica\u00e7\u00f5es Email : Comunica\u00e7\u00e3o","title":"Integra\u00e7\u00f5es"},{"location":"changelog/#notas-de-versao","text":"","title":"\ud83d\udcdd Notas de Vers\u00e3o"},{"location":"changelog/#v215","text":"Esta vers\u00e3o representa um marco importante no desenvolvimento do NioChat, com a introdu\u00e7\u00e3o do sistema CSAT completo e auditoria avan\u00e7ada. O sistema agora oferece: Coleta autom\u00e1tica de feedback com an\u00e1lise de sentimento Dashboard em tempo real com m\u00e9tricas precisas Auditoria completa de todas as a\u00e7\u00f5es do sistema Isolamento total de dados entre provedores Interface otimizada para melhor experi\u00eancia do usu\u00e1rio","title":"v2.1.5"},{"location":"changelog/#v200","text":"Esta vers\u00e3o revolucionou o atendimento automatizado com a introdu\u00e7\u00e3o da IA inteligente e integra\u00e7\u00e3o SGP. O sistema agora oferece: Atendimento 24/7 com IA avan\u00e7ada Dados reais do SGP, nunca inventados Function Calls para a\u00e7\u00f5es autom\u00e1ticas Personaliza\u00e7\u00e3o completa da IA por provedor Fluxo inteligente sem perguntas desnecess\u00e1rias","title":"v2.0.0"},{"location":"changelog/#v100","text":"Esta vers\u00e3o estabeleceu a base s\u00f3lida do NioChat com: Arquitetura robusta e escal\u00e1vel Integra\u00e7\u00e3o completa com WhatsApp Interface moderna e responsiva Sistema multi-tenant com isolamento total Permiss\u00f5es granulares para controle fino","title":"v1.0.0"},{"location":"changelog/#links-uteis","text":"GitHub : github.com/juniorssilvaa/niochat Documenta\u00e7\u00e3o : docs.niochat.com.br Demo : demo.niochat.com.br Suporte : suporte@niochat.com.br","title":"\ud83d\udd17 Links \u00dateis"},{"location":"changelog/#licenca","text":"Este projeto est\u00e1 sob a licen\u00e7a MIT. Veja o arquivo LICENSE para mais detalhes.","title":"\ud83d\udcc4 Licen\u00e7a"},{"location":"ai/configuration/","text":"Configura\u00e7\u00e3o da IA O NioChat utiliza OpenAI GPT para atendimento inteligente, transcri\u00e7\u00e3o de \u00e1udio e an\u00e1lise de sentimento. Este guia explica como configurar e usar a IA. Vis\u00e3o Geral Funcionalidades da IA Atendimento Automatizado : Respostas inteligentes para clientes Transcri\u00e7\u00e3o de \u00c1udio : Convers\u00e3o de mensagens de voz para texto Consulta SGP : Integra\u00e7\u00e3o autom\u00e1tica com sistema de gest\u00e3o An\u00e1lise de Sentimento : Interpreta\u00e7\u00e3o de feedback CSAT Function Calls : Execu\u00e7\u00e3o autom\u00e1tica de fun\u00e7\u00f5es Arquitetura Cliente \u2192 WhatsApp \u2192 NioChat \u2192 OpenAI \u2192 SGP \u2192 Resposta \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 Mensagem \u2192 Webhook \u2192 IA \u2192 Function \u2192 Dados \u2192 Cliente Configura\u00e7\u00e3o Inicial 1. Obter Chave OpenAI # Acessar OpenAI https://platform.openai.com # Criar API Key - Acesse API Keys - Clique em \"Create new secret key\" - Copie a chave gerada 2. Configurar Vari\u00e1veis # Adicionar ao .env OPENAI_API_KEY=sk-sua_chave_openai_aqui OPENAI_MODEL=gpt-4 OPENAI_MAX_TOKENS=2000 OPENAI_TEMPERATURE=0.7 3. Configurar Django # settings.py OPENAI_API_KEY = os.getenv('OPENAI_API_KEY') OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4') OPENAI_MAX_TOKENS = int(os.getenv('OPENAI_MAX_TOKENS', '2000')) OPENAI_TEMPERATURE = float(os.getenv('OPENAI_TEMPERATURE', '0.7')) Servi\u00e7o OpenAI 1. Classe Principal # core/openai_service.py import openai from django.conf import settings from typing import Dict, Any, Optional, List class OpenAIService: def __init__(self): openai.api_key = settings.OPENAI_API_KEY self.model = settings.OPENAI_MODEL self.max_tokens = settings.OPENAI_MAX_TOKENS self.temperature = settings.OPENAI_TEMPERATURE def generate_response(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta da IA\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], max_tokens=self.max_tokens, temperature=self.temperature ) return response.choices[0].message.content except Exception as e: print(f\"Erro ao gerar resposta: {e}\") return \"Desculpe, ocorreu um erro. Tente novamente.\" def transcribe_audio(self, audio_file_path: str) -> str: \"\"\"Transcrever \u00e1udio para texto\"\"\" try: with open(audio_file_path, \"rb\") as audio_file: transcript = openai.Audio.transcribe( model=\"whisper-1\", file=audio_file ) return transcript.text except Exception as e: print(f\"Erro na transcri\u00e7\u00e3o: {e}\") return \"\" def analyze_sentiment(self, text: str) -> Dict[str, Any]: \"\"\"Analisar sentimento do texto\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_sentiment_prompt()}, {\"role\": \"user\", \"content\": text} ], max_tokens=100, temperature=0.1 ) return self._parse_sentiment_response(response.choices[0].message.content) except Exception as e: print(f\"Erro na an\u00e1lise de sentimento: {e}\") return {\"emoji\": \"\ud83d\ude10\", \"rating\": 3} def _get_system_prompt(self, context: Dict[str, Any]) -> str: \"\"\"Obter prompt do sistema\"\"\" return f\"\"\" Voc\u00ea \u00e9 um assistente virtual especializado em atendimento ao cliente. Contexto: - Provedor: {context.get('provedor_name', 'NioChat')} - Cliente: {context.get('contact_name', 'Cliente')} - Conversa: {context.get('conversation_id', 'Nova')} Instru\u00e7\u00f5es: 1. Seja sempre cordial e prestativo 2. Use informa\u00e7\u00f5es do SGP quando dispon\u00edvel 3. Se n\u00e3o souber algo, pe\u00e7a mais informa\u00e7\u00f5es 4. Mantenha o tom profissional mas amig\u00e1vel 5. Use emojis moderadamente \"\"\" def _get_sentiment_prompt(self) -> str: \"\"\"Obter prompt para an\u00e1lise de sentimento\"\"\" return \"\"\" Analise o sentimento do texto e retorne: - emoji: \ud83d\ude21 (1), \ud83d\ude15 (2), \ud83d\ude10 (3), \ud83d\ude42 (4), \ud83e\udd29 (5) - rating: n\u00famero de 1 a 5 Escala: 1 = Muito insatisfeito (\ud83d\ude21) 2 = Insatisfeito (\ud83d\ude15) 3 = Neutro (\ud83d\ude10) 4 = Satisfeito (\ud83d\ude42) 5 = Muito satisfeito (\ud83e\udd29) Responda apenas: {\"emoji\": \"\ud83d\ude10\", \"rating\": 3} \"\"\" def _parse_sentiment_response(self, response: str) -> Dict[str, Any]: \"\"\"Parsear resposta de sentimento\"\"\" try: import json return json.loads(response) except: return {\"emoji\": \"\ud83d\ude10\", \"rating\": 3} 2. Uso no Django # Em views.py from core.openai_service import OpenAIService def process_message(request): message = request.POST.get('message') conversation = Conversation.objects.get(id=request.POST.get('conversation_id')) # Gerar resposta da IA openai_service = OpenAIService() context = { 'provedor_name': conversation.provedor.name, 'contact_name': conversation.contact.name, 'conversation_id': conversation.id } response = openai_service.generate_response(message, context) return JsonResponse({'response': response}) Function Calls 1. Configurar Fun\u00e7\u00f5es # core/openai_service.py def generate_response_with_functions(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Gerar resposta com function calls\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], functions=self._get_functions(), function_call=\"auto\", max_tokens=self.max_tokens, temperature=self.temperature ) return { 'response': response.choices[0].message.content, 'function_calls': response.choices[0].message.get('function_calls', []) } except Exception as e: print(f\"Erro ao gerar resposta: {e}\") return {'response': 'Desculpe, ocorreu um erro.', 'function_calls': []} def _get_functions(self) -> List[Dict[str, Any]]: \"\"\"Obter fun\u00e7\u00f5es dispon\u00edveis\"\"\" return [ { \"name\": \"consultar_cliente_sgp\", \"description\": \"Consultar dados do cliente no SGP\", \"parameters\": { \"type\": \"object\", \"properties\": { \"cpf_cnpj\": { \"type\": \"string\", \"description\": \"CPF ou CNPJ do cliente\" } }, \"required\": [\"cpf_cnpj\"] } }, { \"name\": \"verificar_acesso_sgp\", \"description\": \"Verificar status de acesso do cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"contrato\": { \"type\": \"string\", \"description\": \"N\u00famero do contrato\" } }, \"required\": [\"contrato\"] } }, { \"name\": \"gerar_fatura_completa\", \"description\": \"Gerar fatura completa do cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"contrato\": { \"type\": \"string\", \"description\": \"N\u00famero do contrato\" } }, \"required\": [\"contrato\"] } }, { \"name\": \"criar_chamado_tecnico\", \"description\": \"Criar chamado t\u00e9cnico para o cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"cpf_cnpj\": { \"type\": \"string\", \"description\": \"CPF ou CNPJ do cliente\" }, \"motivo\": { \"type\": \"string\", \"description\": \"Motivo do chamado\" }, \"sintomas\": { \"type\": \"string\", \"description\": \"Sintomas relatados\" } }, \"required\": [\"cpf_cnpj\", \"motivo\", \"sintomas\"] } } ] 2. Executar Function Calls # core/openai_service.py def execute_function_call(self, function_name: str, parameters: Dict[str, Any]) -> str: \"\"\"Executar function call\"\"\" try: if function_name == \"consultar_cliente_sgp\": return self._consultar_cliente_sgp(parameters) elif function_name == \"verificar_acesso_sgp\": return self._verificar_acesso_sgp(parameters) elif function_name == \"gerar_fatura_completa\": return self._gerar_fatura_completa(parameters) elif function_name == \"criar_chamado_tecnico\": return self._criar_chamado_tecnico(parameters) else: return \"Fun\u00e7\u00e3o n\u00e3o encontrada\" except Exception as e: print(f\"Erro ao executar fun\u00e7\u00e3o {function_name}: {e}\") return \"Erro ao executar fun\u00e7\u00e3o\" def _consultar_cliente_sgp(self, parameters: Dict[str, Any]) -> str: \"\"\"Consultar cliente no SGP\"\"\" cpf_cnpj = parameters.get('cpf_cnpj') # Integra\u00e7\u00e3o com SGP from core.sgp_client import SGPClient sgp_client = SGPClient() cliente = sgp_client.consultar_cliente(cpf_cnpj) if cliente: return f\"Cliente encontrado: {cliente['nome']} - Contrato: {cliente['contrato']}\" else: return \"Cliente n\u00e3o encontrado no SGP\" def _verificar_acesso_sgp(self, parameters: Dict[str, Any]) -> str: \"\"\"Verificar acesso no SGP\"\"\" contrato = parameters.get('contrato') from core.sgp_client import SGPClient sgp_client = SGPClient() status = sgp_client.verificar_acesso(contrato) return f\"Status do acesso: {status}\" def _gerar_fatura_completa(self, parameters: Dict[str, Any]) -> str: \"\"\"Gerar fatura completa\"\"\" contrato = parameters.get('contrato') from core.sgp_client import SGPClient sgp_client = SGPClient() fatura = sgp_client.gerar_fatura(contrato) if fatura: return f\"Fatura gerada: {fatura['valor']} - Vencimento: {fatura['vencimento']}\" else: return \"Erro ao gerar fatura\" def _criar_chamado_tecnico(self, parameters: Dict[str, Any]) -> str: \"\"\"Criar chamado t\u00e9cnico\"\"\" cpf_cnpj = parameters.get('cpf_cnpj') motivo = parameters.get('motivo') sintomas = parameters.get('sintomas') from core.sgp_client import SGPClient sgp_client = SGPClient() chamado = sgp_client.criar_chamado(cpf_cnpj, motivo, sintomas) if chamado: return f\"Chamado criado: {chamado['numero']} - Status: {chamado['status']}\" else: return \"Erro ao criar chamado\" Transcri\u00e7\u00e3o de \u00c1udio 1. Processar \u00c1udio # conversations/views.py def process_audio_message(request): audio_file = request.FILES.get('audio') conversation_id = request.POST.get('conversation_id') # Salvar arquivo tempor\u00e1rio temp_path = f\"/tmp/audio_{conversation_id}.ogg\" with open(temp_path, 'wb') as f: for chunk in audio_file.chunks(): f.write(chunk) # Transcrever com OpenAI openai_service = OpenAIService() transcript = openai_service.transcribe_audio(temp_path) # Limpar arquivo tempor\u00e1rio os.remove(temp_path) # Processar transcri\u00e7\u00e3o if transcript: # Salvar mensagem transcrita message = Message.objects.create( conversation_id=conversation_id, content=transcript, message_type='text' ) # Processar com IA response = openai_service.generate_response(transcript, context) return JsonResponse({ 'transcript': transcript, 'response': response }) return JsonResponse({'error': 'Erro na transcri\u00e7\u00e3o'}) 2. Configurar Whisper # core/openai_service.py def transcribe_audio_advanced(self, audio_file_path: str, language: str = 'pt') -> str: \"\"\"Transcrever \u00e1udio com configura\u00e7\u00f5es avan\u00e7adas\"\"\" try: with open(audio_file_path, \"rb\") as audio_file: transcript = openai.Audio.transcribe( model=\"whisper-1\", file=audio_file, language=language, response_format=\"text\", temperature=0.0 ) return transcript except Exception as e: print(f\"Erro na transcri\u00e7\u00e3o: {e}\") return \"\" An\u00e1lise de Sentimento 1. Sistema CSAT # conversations/csat_automation.py from core.openai_service import OpenAIService class CSATAutomationService: @classmethod def process_csat_response(cls, message_text: str, conversation, contact): \"\"\"Processar resposta CSAT\"\"\" openai_service = OpenAIService() # Analisar sentimento sentiment = openai_service.analyze_sentiment(message_text) # Corrigir rating se necess\u00e1rio if any(word in message_text.lower() for word in ['p\u00e9ssimo', 'horr\u00edvel', 'terr\u00edvel']): if sentiment['rating'] != 1: sentiment = {'emoji': '\ud83d\ude21', 'rating': 1} # Salvar feedback feedback = CSATFeedback.objects.create( conversation=conversation, contact=contact, emoji_rating=sentiment['emoji'], rating_value=sentiment['rating'], original_message=message_text ) # Gerar resposta personalizada response = openai_service.generate_csat_response( sentiment['rating'], contact.name ) return feedback, response 2. Resposta Personalizada # core/openai_service.py def generate_csat_response(self, rating: int, contact_name: str) -> str: \"\"\"Gerar resposta personalizada para CSAT\"\"\" responses = { 1: f\"\ud83d\ude14 Sinto muito que seu atendimento n\u00e3o foi bom, {contact_name}! Estamos sempre melhorando e esperamos te atender melhor na pr\u00f3xima vez.\", 2: f\"\ud83d\ude15 Poxa, {contact_name}, sentimos que n\u00e3o tenha gostado. Sua opini\u00e3o \u00e9 importante para melhorarmos!\", 3: f\"\ud83d\ude42 Obrigado pelo seu feedback, {contact_name}! Vamos trabalhar para te surpreender da pr\u00f3xima vez.\", 4: f\"\ud83d\ude04 Que bom saber disso, {contact_name}! Ficamos felizes que seu atendimento foi bom!\", 5: f\"\ud83e\udd29 Maravilha, {contact_name}! Agradecemos por sua avalia\u00e7\u00e3o e ficamos felizes com sua satisfa\u00e7\u00e3o!\" } return responses.get(rating, responses[3]) Configura\u00e7\u00f5es Avan\u00e7adas 1. Prompts Personalizados # core/openai_service.py def _get_custom_prompt(self, provedor_id: int) -> str: \"\"\"Obter prompt personalizado por provedor\"\"\" try: provedor = Provedor.objects.get(id=provedor_id) return f\"\"\" Voc\u00ea \u00e9 um assistente virtual da {provedor.name}. Especializa\u00e7\u00e3o: {provedor.description} Tom: {provedor.tone or 'profissional e amig\u00e1vel'} Linguagem: {provedor.language or 'portugu\u00eas brasileiro'} Instru\u00e7\u00f5es espec\u00edficas: {provedor.ai_instructions or 'Seja sempre prestativo e resolva os problemas do cliente.'} \"\"\" except: return self._get_system_prompt({}) 2. Rate Limiting # core/openai_service.py from django.core.cache import cache def generate_response_with_rate_limit(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta com rate limiting\"\"\" user_id = context.get('user_id') cache_key = f\"openai_rate_limit_{user_id}\" # Verificar rate limit if cache.get(cache_key): return \"Muitas requisi\u00e7\u00f5es. Aguarde um momento.\" # Definir rate limit (1 requisi\u00e7\u00e3o por segundo) cache.set(cache_key, True, 1) return self.generate_response(message, context) 3. Logging e Monitoramento # core/openai_service.py import logging logger = logging.getLogger(__name__) def generate_response(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta com logging\"\"\" start_time = time.time() try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], max_tokens=self.max_tokens, temperature=self.temperature ) # Log de sucesso logger.info(f\"Resposta gerada em {time.time() - start_time:.2f}s\") return response.choices[0].message.content except Exception as e: # Log de erro logger.error(f\"Erro ao gerar resposta: {e}\") return \"Desculpe, ocorreu um erro. Tente novamente.\" Troubleshooting 1. Problemas Comuns # Verificar chave OpenAI curl -H \"Authorization: Bearer sk-sua_chave\" https://api.openai.com/v1/models # Verificar cr\u00e9ditos curl -H \"Authorization: Bearer sk-sua_chave\" https://api.openai.com/v1/usage 2. Logs de Debug # Testar conex\u00e3o from core.openai_service import OpenAIService openai_service = OpenAIService() print(openai_service.test_connection()) 3. Monitoramento # Verificar uso da API def check_openai_usage(): try: usage = openai.Usage.retrieve() print(f\"Tokens usados: {usage.total_tokens}\") print(f\"Custo: ${usage.total_cost}\") except Exception as e: print(f\"Erro ao verificar uso: {e}\") Pr\u00f3ximos Passos Function Calls - Configure function calls SGP Integration - Configure integra\u00e7\u00e3o SGP Transcri\u00e7\u00e3o - Configure transcri\u00e7\u00e3o","title":"Configura\u00e7\u00e3o da IA"},{"location":"ai/configuration/#configuracao-da-ia","text":"O NioChat utiliza OpenAI GPT para atendimento inteligente, transcri\u00e7\u00e3o de \u00e1udio e an\u00e1lise de sentimento. Este guia explica como configurar e usar a IA.","title":"Configura\u00e7\u00e3o da IA"},{"location":"ai/configuration/#visao-geral","text":"","title":"Vis\u00e3o Geral"},{"location":"ai/configuration/#funcionalidades-da-ia","text":"Atendimento Automatizado : Respostas inteligentes para clientes Transcri\u00e7\u00e3o de \u00c1udio : Convers\u00e3o de mensagens de voz para texto Consulta SGP : Integra\u00e7\u00e3o autom\u00e1tica com sistema de gest\u00e3o An\u00e1lise de Sentimento : Interpreta\u00e7\u00e3o de feedback CSAT Function Calls : Execu\u00e7\u00e3o autom\u00e1tica de fun\u00e7\u00f5es","title":"Funcionalidades da IA"},{"location":"ai/configuration/#arquitetura","text":"Cliente \u2192 WhatsApp \u2192 NioChat \u2192 OpenAI \u2192 SGP \u2192 Resposta \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 Mensagem \u2192 Webhook \u2192 IA \u2192 Function \u2192 Dados \u2192 Cliente","title":"Arquitetura"},{"location":"ai/configuration/#configuracao-inicial","text":"","title":"Configura\u00e7\u00e3o Inicial"},{"location":"ai/configuration/#1-obter-chave-openai","text":"# Acessar OpenAI https://platform.openai.com # Criar API Key - Acesse API Keys - Clique em \"Create new secret key\" - Copie a chave gerada","title":"1. Obter Chave OpenAI"},{"location":"ai/configuration/#2-configurar-variaveis","text":"# Adicionar ao .env OPENAI_API_KEY=sk-sua_chave_openai_aqui OPENAI_MODEL=gpt-4 OPENAI_MAX_TOKENS=2000 OPENAI_TEMPERATURE=0.7","title":"2. Configurar Vari\u00e1veis"},{"location":"ai/configuration/#3-configurar-django","text":"# settings.py OPENAI_API_KEY = os.getenv('OPENAI_API_KEY') OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4') OPENAI_MAX_TOKENS = int(os.getenv('OPENAI_MAX_TOKENS', '2000')) OPENAI_TEMPERATURE = float(os.getenv('OPENAI_TEMPERATURE', '0.7'))","title":"3. Configurar Django"},{"location":"ai/configuration/#servico-openai","text":"","title":"Servi\u00e7o OpenAI"},{"location":"ai/configuration/#1-classe-principal","text":"# core/openai_service.py import openai from django.conf import settings from typing import Dict, Any, Optional, List class OpenAIService: def __init__(self): openai.api_key = settings.OPENAI_API_KEY self.model = settings.OPENAI_MODEL self.max_tokens = settings.OPENAI_MAX_TOKENS self.temperature = settings.OPENAI_TEMPERATURE def generate_response(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta da IA\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], max_tokens=self.max_tokens, temperature=self.temperature ) return response.choices[0].message.content except Exception as e: print(f\"Erro ao gerar resposta: {e}\") return \"Desculpe, ocorreu um erro. Tente novamente.\" def transcribe_audio(self, audio_file_path: str) -> str: \"\"\"Transcrever \u00e1udio para texto\"\"\" try: with open(audio_file_path, \"rb\") as audio_file: transcript = openai.Audio.transcribe( model=\"whisper-1\", file=audio_file ) return transcript.text except Exception as e: print(f\"Erro na transcri\u00e7\u00e3o: {e}\") return \"\" def analyze_sentiment(self, text: str) -> Dict[str, Any]: \"\"\"Analisar sentimento do texto\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_sentiment_prompt()}, {\"role\": \"user\", \"content\": text} ], max_tokens=100, temperature=0.1 ) return self._parse_sentiment_response(response.choices[0].message.content) except Exception as e: print(f\"Erro na an\u00e1lise de sentimento: {e}\") return {\"emoji\": \"\ud83d\ude10\", \"rating\": 3} def _get_system_prompt(self, context: Dict[str, Any]) -> str: \"\"\"Obter prompt do sistema\"\"\" return f\"\"\" Voc\u00ea \u00e9 um assistente virtual especializado em atendimento ao cliente. Contexto: - Provedor: {context.get('provedor_name', 'NioChat')} - Cliente: {context.get('contact_name', 'Cliente')} - Conversa: {context.get('conversation_id', 'Nova')} Instru\u00e7\u00f5es: 1. Seja sempre cordial e prestativo 2. Use informa\u00e7\u00f5es do SGP quando dispon\u00edvel 3. Se n\u00e3o souber algo, pe\u00e7a mais informa\u00e7\u00f5es 4. Mantenha o tom profissional mas amig\u00e1vel 5. Use emojis moderadamente \"\"\" def _get_sentiment_prompt(self) -> str: \"\"\"Obter prompt para an\u00e1lise de sentimento\"\"\" return \"\"\" Analise o sentimento do texto e retorne: - emoji: \ud83d\ude21 (1), \ud83d\ude15 (2), \ud83d\ude10 (3), \ud83d\ude42 (4), \ud83e\udd29 (5) - rating: n\u00famero de 1 a 5 Escala: 1 = Muito insatisfeito (\ud83d\ude21) 2 = Insatisfeito (\ud83d\ude15) 3 = Neutro (\ud83d\ude10) 4 = Satisfeito (\ud83d\ude42) 5 = Muito satisfeito (\ud83e\udd29) Responda apenas: {\"emoji\": \"\ud83d\ude10\", \"rating\": 3} \"\"\" def _parse_sentiment_response(self, response: str) -> Dict[str, Any]: \"\"\"Parsear resposta de sentimento\"\"\" try: import json return json.loads(response) except: return {\"emoji\": \"\ud83d\ude10\", \"rating\": 3}","title":"1. Classe Principal"},{"location":"ai/configuration/#2-uso-no-django","text":"# Em views.py from core.openai_service import OpenAIService def process_message(request): message = request.POST.get('message') conversation = Conversation.objects.get(id=request.POST.get('conversation_id')) # Gerar resposta da IA openai_service = OpenAIService() context = { 'provedor_name': conversation.provedor.name, 'contact_name': conversation.contact.name, 'conversation_id': conversation.id } response = openai_service.generate_response(message, context) return JsonResponse({'response': response})","title":"2. Uso no Django"},{"location":"ai/configuration/#function-calls","text":"","title":"Function Calls"},{"location":"ai/configuration/#1-configurar-funcoes","text":"# core/openai_service.py def generate_response_with_functions(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Gerar resposta com function calls\"\"\" try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], functions=self._get_functions(), function_call=\"auto\", max_tokens=self.max_tokens, temperature=self.temperature ) return { 'response': response.choices[0].message.content, 'function_calls': response.choices[0].message.get('function_calls', []) } except Exception as e: print(f\"Erro ao gerar resposta: {e}\") return {'response': 'Desculpe, ocorreu um erro.', 'function_calls': []} def _get_functions(self) -> List[Dict[str, Any]]: \"\"\"Obter fun\u00e7\u00f5es dispon\u00edveis\"\"\" return [ { \"name\": \"consultar_cliente_sgp\", \"description\": \"Consultar dados do cliente no SGP\", \"parameters\": { \"type\": \"object\", \"properties\": { \"cpf_cnpj\": { \"type\": \"string\", \"description\": \"CPF ou CNPJ do cliente\" } }, \"required\": [\"cpf_cnpj\"] } }, { \"name\": \"verificar_acesso_sgp\", \"description\": \"Verificar status de acesso do cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"contrato\": { \"type\": \"string\", \"description\": \"N\u00famero do contrato\" } }, \"required\": [\"contrato\"] } }, { \"name\": \"gerar_fatura_completa\", \"description\": \"Gerar fatura completa do cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"contrato\": { \"type\": \"string\", \"description\": \"N\u00famero do contrato\" } }, \"required\": [\"contrato\"] } }, { \"name\": \"criar_chamado_tecnico\", \"description\": \"Criar chamado t\u00e9cnico para o cliente\", \"parameters\": { \"type\": \"object\", \"properties\": { \"cpf_cnpj\": { \"type\": \"string\", \"description\": \"CPF ou CNPJ do cliente\" }, \"motivo\": { \"type\": \"string\", \"description\": \"Motivo do chamado\" }, \"sintomas\": { \"type\": \"string\", \"description\": \"Sintomas relatados\" } }, \"required\": [\"cpf_cnpj\", \"motivo\", \"sintomas\"] } } ]","title":"1. Configurar Fun\u00e7\u00f5es"},{"location":"ai/configuration/#2-executar-function-calls","text":"# core/openai_service.py def execute_function_call(self, function_name: str, parameters: Dict[str, Any]) -> str: \"\"\"Executar function call\"\"\" try: if function_name == \"consultar_cliente_sgp\": return self._consultar_cliente_sgp(parameters) elif function_name == \"verificar_acesso_sgp\": return self._verificar_acesso_sgp(parameters) elif function_name == \"gerar_fatura_completa\": return self._gerar_fatura_completa(parameters) elif function_name == \"criar_chamado_tecnico\": return self._criar_chamado_tecnico(parameters) else: return \"Fun\u00e7\u00e3o n\u00e3o encontrada\" except Exception as e: print(f\"Erro ao executar fun\u00e7\u00e3o {function_name}: {e}\") return \"Erro ao executar fun\u00e7\u00e3o\" def _consultar_cliente_sgp(self, parameters: Dict[str, Any]) -> str: \"\"\"Consultar cliente no SGP\"\"\" cpf_cnpj = parameters.get('cpf_cnpj') # Integra\u00e7\u00e3o com SGP from core.sgp_client import SGPClient sgp_client = SGPClient() cliente = sgp_client.consultar_cliente(cpf_cnpj) if cliente: return f\"Cliente encontrado: {cliente['nome']} - Contrato: {cliente['contrato']}\" else: return \"Cliente n\u00e3o encontrado no SGP\" def _verificar_acesso_sgp(self, parameters: Dict[str, Any]) -> str: \"\"\"Verificar acesso no SGP\"\"\" contrato = parameters.get('contrato') from core.sgp_client import SGPClient sgp_client = SGPClient() status = sgp_client.verificar_acesso(contrato) return f\"Status do acesso: {status}\" def _gerar_fatura_completa(self, parameters: Dict[str, Any]) -> str: \"\"\"Gerar fatura completa\"\"\" contrato = parameters.get('contrato') from core.sgp_client import SGPClient sgp_client = SGPClient() fatura = sgp_client.gerar_fatura(contrato) if fatura: return f\"Fatura gerada: {fatura['valor']} - Vencimento: {fatura['vencimento']}\" else: return \"Erro ao gerar fatura\" def _criar_chamado_tecnico(self, parameters: Dict[str, Any]) -> str: \"\"\"Criar chamado t\u00e9cnico\"\"\" cpf_cnpj = parameters.get('cpf_cnpj') motivo = parameters.get('motivo') sintomas = parameters.get('sintomas') from core.sgp_client import SGPClient sgp_client = SGPClient() chamado = sgp_client.criar_chamado(cpf_cnpj, motivo, sintomas) if chamado: return f\"Chamado criado: {chamado['numero']} - Status: {chamado['status']}\" else: return \"Erro ao criar chamado\"","title":"2. Executar Function Calls"},{"location":"ai/configuration/#transcricao-de-audio","text":"","title":"Transcri\u00e7\u00e3o de \u00c1udio"},{"location":"ai/configuration/#1-processar-audio","text":"# conversations/views.py def process_audio_message(request): audio_file = request.FILES.get('audio') conversation_id = request.POST.get('conversation_id') # Salvar arquivo tempor\u00e1rio temp_path = f\"/tmp/audio_{conversation_id}.ogg\" with open(temp_path, 'wb') as f: for chunk in audio_file.chunks(): f.write(chunk) # Transcrever com OpenAI openai_service = OpenAIService() transcript = openai_service.transcribe_audio(temp_path) # Limpar arquivo tempor\u00e1rio os.remove(temp_path) # Processar transcri\u00e7\u00e3o if transcript: # Salvar mensagem transcrita message = Message.objects.create( conversation_id=conversation_id, content=transcript, message_type='text' ) # Processar com IA response = openai_service.generate_response(transcript, context) return JsonResponse({ 'transcript': transcript, 'response': response }) return JsonResponse({'error': 'Erro na transcri\u00e7\u00e3o'})","title":"1. Processar \u00c1udio"},{"location":"ai/configuration/#2-configurar-whisper","text":"# core/openai_service.py def transcribe_audio_advanced(self, audio_file_path: str, language: str = 'pt') -> str: \"\"\"Transcrever \u00e1udio com configura\u00e7\u00f5es avan\u00e7adas\"\"\" try: with open(audio_file_path, \"rb\") as audio_file: transcript = openai.Audio.transcribe( model=\"whisper-1\", file=audio_file, language=language, response_format=\"text\", temperature=0.0 ) return transcript except Exception as e: print(f\"Erro na transcri\u00e7\u00e3o: {e}\") return \"\"","title":"2. Configurar Whisper"},{"location":"ai/configuration/#analise-de-sentimento","text":"","title":"An\u00e1lise de Sentimento"},{"location":"ai/configuration/#1-sistema-csat","text":"# conversations/csat_automation.py from core.openai_service import OpenAIService class CSATAutomationService: @classmethod def process_csat_response(cls, message_text: str, conversation, contact): \"\"\"Processar resposta CSAT\"\"\" openai_service = OpenAIService() # Analisar sentimento sentiment = openai_service.analyze_sentiment(message_text) # Corrigir rating se necess\u00e1rio if any(word in message_text.lower() for word in ['p\u00e9ssimo', 'horr\u00edvel', 'terr\u00edvel']): if sentiment['rating'] != 1: sentiment = {'emoji': '\ud83d\ude21', 'rating': 1} # Salvar feedback feedback = CSATFeedback.objects.create( conversation=conversation, contact=contact, emoji_rating=sentiment['emoji'], rating_value=sentiment['rating'], original_message=message_text ) # Gerar resposta personalizada response = openai_service.generate_csat_response( sentiment['rating'], contact.name ) return feedback, response","title":"1. Sistema CSAT"},{"location":"ai/configuration/#2-resposta-personalizada","text":"# core/openai_service.py def generate_csat_response(self, rating: int, contact_name: str) -> str: \"\"\"Gerar resposta personalizada para CSAT\"\"\" responses = { 1: f\"\ud83d\ude14 Sinto muito que seu atendimento n\u00e3o foi bom, {contact_name}! Estamos sempre melhorando e esperamos te atender melhor na pr\u00f3xima vez.\", 2: f\"\ud83d\ude15 Poxa, {contact_name}, sentimos que n\u00e3o tenha gostado. Sua opini\u00e3o \u00e9 importante para melhorarmos!\", 3: f\"\ud83d\ude42 Obrigado pelo seu feedback, {contact_name}! Vamos trabalhar para te surpreender da pr\u00f3xima vez.\", 4: f\"\ud83d\ude04 Que bom saber disso, {contact_name}! Ficamos felizes que seu atendimento foi bom!\", 5: f\"\ud83e\udd29 Maravilha, {contact_name}! Agradecemos por sua avalia\u00e7\u00e3o e ficamos felizes com sua satisfa\u00e7\u00e3o!\" } return responses.get(rating, responses[3])","title":"2. Resposta Personalizada"},{"location":"ai/configuration/#configuracoes-avancadas","text":"","title":"Configura\u00e7\u00f5es Avan\u00e7adas"},{"location":"ai/configuration/#1-prompts-personalizados","text":"# core/openai_service.py def _get_custom_prompt(self, provedor_id: int) -> str: \"\"\"Obter prompt personalizado por provedor\"\"\" try: provedor = Provedor.objects.get(id=provedor_id) return f\"\"\" Voc\u00ea \u00e9 um assistente virtual da {provedor.name}. Especializa\u00e7\u00e3o: {provedor.description} Tom: {provedor.tone or 'profissional e amig\u00e1vel'} Linguagem: {provedor.language or 'portugu\u00eas brasileiro'} Instru\u00e7\u00f5es espec\u00edficas: {provedor.ai_instructions or 'Seja sempre prestativo e resolva os problemas do cliente.'} \"\"\" except: return self._get_system_prompt({})","title":"1. Prompts Personalizados"},{"location":"ai/configuration/#2-rate-limiting","text":"# core/openai_service.py from django.core.cache import cache def generate_response_with_rate_limit(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta com rate limiting\"\"\" user_id = context.get('user_id') cache_key = f\"openai_rate_limit_{user_id}\" # Verificar rate limit if cache.get(cache_key): return \"Muitas requisi\u00e7\u00f5es. Aguarde um momento.\" # Definir rate limit (1 requisi\u00e7\u00e3o por segundo) cache.set(cache_key, True, 1) return self.generate_response(message, context)","title":"2. Rate Limiting"},{"location":"ai/configuration/#3-logging-e-monitoramento","text":"# core/openai_service.py import logging logger = logging.getLogger(__name__) def generate_response(self, message: str, context: Dict[str, Any]) -> str: \"\"\"Gerar resposta com logging\"\"\" start_time = time.time() try: response = openai.ChatCompletion.create( model=self.model, messages=[ {\"role\": \"system\", \"content\": self._get_system_prompt(context)}, {\"role\": \"user\", \"content\": message} ], max_tokens=self.max_tokens, temperature=self.temperature ) # Log de sucesso logger.info(f\"Resposta gerada em {time.time() - start_time:.2f}s\") return response.choices[0].message.content except Exception as e: # Log de erro logger.error(f\"Erro ao gerar resposta: {e}\") return \"Desculpe, ocorreu um erro. Tente novamente.\"","title":"3. Logging e Monitoramento"},{"location":"ai/configuration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"ai/configuration/#1-problemas-comuns","text":"# Verificar chave OpenAI curl -H \"Authorization: Bearer sk-sua_chave\" https://api.openai.com/v1/models # Verificar cr\u00e9ditos curl -H \"Authorization: Bearer sk-sua_chave\" https://api.openai.com/v1/usage","title":"1. Problemas Comuns"},{"location":"ai/configuration/#2-logs-de-debug","text":"# Testar conex\u00e3o from core.openai_service import OpenAIService openai_service = OpenAIService() print(openai_service.test_connection())","title":"2. Logs de Debug"},{"location":"ai/configuration/#3-monitoramento","text":"# Verificar uso da API def check_openai_usage(): try: usage = openai.Usage.retrieve() print(f\"Tokens usados: {usage.total_tokens}\") print(f\"Custo: ${usage.total_cost}\") except Exception as e: print(f\"Erro ao verificar uso: {e}\")","title":"3. Monitoramento"},{"location":"ai/configuration/#proximos-passos","text":"Function Calls - Configure function calls SGP Integration - Configure integra\u00e7\u00e3o SGP Transcri\u00e7\u00e3o - Configure transcri\u00e7\u00e3o","title":"Pr\u00f3ximos Passos"},{"location":"api/authentication/","text":"Autentica\u00e7\u00e3o O NioChat utiliza autentica\u00e7\u00e3o baseada em tokens para proteger a API. Este documento explica como implementar a autentica\u00e7\u00e3o em suas integra\u00e7\u00f5es. M\u00e9todos de Autentica\u00e7\u00e3o Token Authentication O sistema utiliza Django REST Framework Token Authentication como m\u00e9todo principal. Headers de Autentica\u00e7\u00e3o Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Login Endpoint de Login POST /api/auth/login/ Content-Type: application/json { \"username\": \"seu_usuario\", \"password\": \"sua_senha\" } Resposta de Sucesso { \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" } Nota: A API retorna apenas o token de autentica\u00e7\u00e3o. Para obter informa\u00e7\u00f5es do usu\u00e1rio, use o endpoint /api/auth/me/ ap\u00f3s o login. Resposta de Erro { \"error\": \"InvalidCredentials\", \"message\": \"Credenciais inv\u00e1lidas\" } Informa\u00e7\u00f5es do Usu\u00e1rio Obter Dados do Usu\u00e1rio GET /api/auth/me/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Resposta { \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 } Campos da Resposta Campo Tipo Descri\u00e7\u00e3o id integer ID \u00fanico do usu\u00e1rio username string Nome de usu\u00e1rio email string Email do usu\u00e1rio first_name string Primeiro nome last_name string Sobrenome provedor_id integer ID do provedor user_type string Tipo do usu\u00e1rio (admin, agent, viewer) permissions array Lista de permiss\u00f5es do usu\u00e1rio sound_notifications_enabled boolean Notifica\u00e7\u00f5es sonoras habilitadas new_message_sound string Som para nova mensagem new_conversation_sound string Som para nova conversa session_timeout integer Timeout da sess\u00e3o em minutos Logout Endpoint de Logout POST /api/auth/logout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Resposta { \"message\": \"Logout realizado com sucesso\" } Timeout de Sess\u00e3o Verificar Timeout POST /api/auth/session-timeout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"timeout\": 60 } Resposta de Sucesso { \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 } Resposta de Erro { \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" } Implementa\u00e7\u00e3o em JavaScript Exemplo com Fetch class NioChatAPI { constructor(baseURL, token = null) { this.baseURL = baseURL; this.token = token; } async login(username, password) { const response = await fetch(`${this.baseURL}/api/auth/login/`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }) }); if (response.ok) { const data = await response.json(); this.token = data.token; console.log('Token recebido:', data.token); return data; } else { throw new Error('Falha na autentica\u00e7\u00e3o'); } } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const headers = { 'Content-Type': 'application/json', ...options.headers }; if (this.token) { headers['Authorization'] = `Token ${this.token}`; } const response = await fetch(url, { ...options, headers }); if (response.status === 401) { // Token expirado ou inv\u00e1lido this.token = null; throw new Error('Sess\u00e3o expirada'); } return response; } async get(endpoint) { const response = await this.request(endpoint, { method: 'GET' }); return response.json(); } async post(endpoint, data) { const response = await this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); return response.json(); } async put(endpoint, data) { const response = await this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); return response.json(); } async delete(endpoint) { const response = await this.request(endpoint, { method: 'DELETE' }); return response.json(); } } // Uso const api = new NioChatAPI('http://localhost:8010'); // Login try { const auth = await api.login('usuario', 'senha'); console.log('Token:', auth.token); // Obter dados do usu\u00e1rio ap\u00f3s login const userInfo = await api.get('/api/auth/me/'); console.log('Dados do usu\u00e1rio:', userInfo); } catch (error) { console.error('Erro no login:', error); } // Fazer requisi\u00e7\u00f5es autenticadas try { const conversations = await api.get('/api/conversations/'); console.log('Conversas:', conversations); } catch (error) { console.error('Erro na requisi\u00e7\u00e3o:', error); } Exemplo com Axios import axios from 'axios'; class NioChatAPI { constructor(baseURL) { this.api = axios.create({ baseURL: baseURL, headers: { 'Content-Type': 'application/json' } }); // Interceptor para adicionar token this.api.interceptors.request.use((config) => { const token = localStorage.getItem('niochat_token'); if (token) { config.headers.Authorization = `Token ${token}`; } return config; }); // Interceptor para tratar erros de autentica\u00e7\u00e3o this.api.interceptors.response.use( (response) => response, (error) => { if (error.response?.status === 401) { localStorage.removeItem('niochat_token'); window.location.href = '/login'; } return Promise.reject(error); } ); } async login(username, password) { try { const response = await this.api.post('/api/auth/login/', { username, password }); const { token } = response.data; localStorage.setItem('niochat_token', token); return response.data; } catch (error) { throw new Error('Falha na autentica\u00e7\u00e3o'); } } async logout() { try { await this.api.post('/api/auth/logout/'); localStorage.removeItem('niochat_token'); } catch (error) { console.error('Erro no logout:', error); } } async getMe() { const response = await this.api.get('/api/auth/me/'); return response.data; } } // Uso const api = new NioChatAPI('http://localhost:8010'); // Login api.login('usuario', 'senha') .then(auth => console.log('Autenticado:', auth)) .catch(error => console.error('Erro:', error)); // Obter dados do usu\u00e1rio api.getMe() .then(user => console.log('Usu\u00e1rio:', user)) .catch(error => console.error('Erro:', error)); Implementa\u00e7\u00e3o em Python Exemplo com Requests import requests from typing import Optional, Dict, Any class NioChatAPI: def __init__(self, base_url: str, token: Optional[str] = None): self.base_url = base_url self.token = token self.session = requests.Session() if token: self.session.headers.update({ 'Authorization': f'Token {token}' }) def login(self, username: str, password: str) -> Dict[str, Any]: \"\"\"Realiza login e obt\u00e9m token\"\"\" response = self.session.post( f'{self.base_url}/api/auth/login/', json={'username': username, 'password': password} ) if response.status_code == 200: data = response.json() self.token = data['token'] self.session.headers.update({ 'Authorization': f'Token {self.token}' }) return data else: raise Exception('Falha na autentica\u00e7\u00e3o') def get(self, endpoint: str) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o GET\"\"\" response = self.session.get(f'{self.base_url}{endpoint}') response.raise_for_status() return response.json() def post(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o POST\"\"\" response = self.session.post( f'{self.base_url}{endpoint}', json=data ) response.raise_for_status() return response.json() def put(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o PUT\"\"\" response = self.session.put( f'{self.base_url}{endpoint}', json=data ) response.raise_for_status() return response.json() def delete(self, endpoint: str) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o DELETE\"\"\" response = self.session.delete(f'{self.base_url}{endpoint}') response.raise_for_status() return response.json() def get_me(self) -> Dict[str, Any]: \"\"\"Obt\u00e9m dados do usu\u00e1rio atual\"\"\" return self.get('/api/auth/me/') def logout(self) -> None: \"\"\"Realiza logout\"\"\" self.session.post(f'{self.base_url}/api/auth/logout/') self.token = None self.session.headers.pop('Authorization', None) # Uso api = NioChatAPI('http://localhost:8010') # Login try: auth = api.login('usuario', 'senha') print(f'Token: {auth[\"token\"]}') except Exception as e: print(f'Erro no login: {e}') # Fazer requisi\u00e7\u00f5es try: conversations = api.get('/api/conversations/') print(f'Conversas: {conversations}') except Exception as e: print(f'Erro na requisi\u00e7\u00e3o: {e}') Implementa\u00e7\u00e3o em PHP Exemplo com cURL <?php class NioChatAPI { private $baseUrl; private $token; public function __construct($baseUrl) { $this->baseUrl = $baseUrl; } public function login($username, $password) { $data = json_encode([ 'username' => $username, 'password' => $password ]); $response = $this->makeRequest('/api/auth/login/', 'POST', $data); if (isset($response['token'])) { $this->token = $response['token']; return $response; } else { throw new Exception('Falha na autentica\u00e7\u00e3o'); } } public function get($endpoint) { return $this->makeRequest($endpoint, 'GET'); } public function post($endpoint, $data) { return $this->makeRequest($endpoint, 'POST', json_encode($data)); } public function put($endpoint, $data) { return $this->makeRequest($endpoint, 'PUT', json_encode($data)); } public function delete($endpoint) { return $this->makeRequest($endpoint, 'DELETE'); } private function makeRequest($endpoint, $method, $data = null) { $url = $this->baseUrl . $endpoint; $headers = [ 'Content-Type: application/json' ]; if ($this->token) { $headers[] = 'Authorization: Token ' . $this->token; } $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method); if ($data) { curl_setopt($ch, CURLOPT_POSTFIELDS, $data); } $response = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if ($httpCode >= 400) { throw new Exception('Erro HTTP: ' . $httpCode); } return json_decode($response, true); } } // Uso $api = new NioChatAPI('http://localhost:8010'); try { $auth = $api->login('usuario', 'senha'); echo \"Token: \" . $auth['token'] . \"\\n\"; $conversations = $api->get('/api/conversations/'); echo \"Conversas: \" . json_encode($conversations) . \"\\n\"; } catch (Exception $e) { echo \"Erro: \" . $e->getMessage() . \"\\n\"; } ?> Tratamento de Erros C\u00f3digos de Status HTTP 401 - N\u00e3o Autorizado { \"error\": \"AuthenticationError\", \"message\": \"Token inv\u00e1lido ou expirado\" } 403 - Proibido { \"error\": \"PermissionError\", \"message\": \"Voc\u00ea n\u00e3o tem permiss\u00e3o para esta a\u00e7\u00e3o\" } 400 - Requisi\u00e7\u00e3o Inv\u00e1lida { \"error\": \"ValidationError\", \"message\": \"Dados inv\u00e1lidos\", \"details\": { \"username\": [\"Este campo \u00e9 obrigat\u00f3rio\"], \"password\": [\"Este campo \u00e9 obrigat\u00f3rio\"] } } Implementa\u00e7\u00e3o de Retry class NioChatAPI { async requestWithRetry(endpoint, options = {}, maxRetries = 3) { for (let i = 0; i < maxRetries; i++) { try { const response = await this.request(endpoint, options); return response; } catch (error) { if (error.message === 'Sess\u00e3o expirada' && i < maxRetries - 1) { // Tentar fazer login novamente await this.refreshToken(); continue; } throw error; } } } async refreshToken() { // Implementar l\u00f3gica de refresh do token // ou redirecionar para login this.token = null; window.location.href = '/login'; } } Seguran\u00e7a Boas Pr\u00e1ticas Nunca armazene tokens em localStorage em produ\u00e7\u00e3o Use HTTPS em produ\u00e7\u00e3o Implemente timeout de sess\u00e3o Valide tokens no servidor Use tokens com expira\u00e7\u00e3o Exemplo de Armazenamento Seguro class SecureTokenStorage { static setToken(token) { // Em produ\u00e7\u00e3o, use httpOnly cookies if (process.env.NODE_ENV === 'production') { // Implementar com cookies httpOnly document.cookie = `niochat_token=${token}; path=/; secure; httpOnly`; } else { // Em desenvolvimento, use sessionStorage sessionStorage.setItem('niochat_token', token); } } static getToken() { if (process.env.NODE_ENV === 'production') { // Ler de cookies const cookies = document.cookie.split(';'); const tokenCookie = cookies.find(cookie => cookie.trim().startsWith('niochat_token=') ); return tokenCookie ? tokenCookie.split('=')[1] : null; } else { return sessionStorage.getItem('niochat_token'); } } static removeToken() { if (process.env.NODE_ENV === 'production') { document.cookie = 'niochat_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'; } else { sessionStorage.removeItem('niochat_token'); } } } Pr\u00f3ximos Passos Endpoints - Explore todos os endpoints da API WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks","title":"Autentica\u00e7\u00e3o"},{"location":"api/authentication/#autenticacao","text":"O NioChat utiliza autentica\u00e7\u00e3o baseada em tokens para proteger a API. Este documento explica como implementar a autentica\u00e7\u00e3o em suas integra\u00e7\u00f5es.","title":"Autentica\u00e7\u00e3o"},{"location":"api/authentication/#metodos-de-autenticacao","text":"","title":"M\u00e9todos de Autentica\u00e7\u00e3o"},{"location":"api/authentication/#token-authentication","text":"O sistema utiliza Django REST Framework Token Authentication como m\u00e9todo principal.","title":"Token Authentication"},{"location":"api/authentication/#headers-de-autenticacao","text":"Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Headers de Autentica\u00e7\u00e3o"},{"location":"api/authentication/#login","text":"","title":"Login"},{"location":"api/authentication/#endpoint-de-login","text":"POST /api/auth/login/ Content-Type: application/json { \"username\": \"seu_usuario\", \"password\": \"sua_senha\" }","title":"Endpoint de Login"},{"location":"api/authentication/#resposta-de-sucesso","text":"{ \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" } Nota: A API retorna apenas o token de autentica\u00e7\u00e3o. Para obter informa\u00e7\u00f5es do usu\u00e1rio, use o endpoint /api/auth/me/ ap\u00f3s o login.","title":"Resposta de Sucesso"},{"location":"api/authentication/#resposta-de-erro","text":"{ \"error\": \"InvalidCredentials\", \"message\": \"Credenciais inv\u00e1lidas\" }","title":"Resposta de Erro"},{"location":"api/authentication/#informacoes-do-usuario","text":"","title":"Informa\u00e7\u00f5es do Usu\u00e1rio"},{"location":"api/authentication/#obter-dados-do-usuario","text":"GET /api/auth/me/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Obter Dados do Usu\u00e1rio"},{"location":"api/authentication/#resposta","text":"{ \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 }","title":"Resposta"},{"location":"api/authentication/#campos-da-resposta","text":"Campo Tipo Descri\u00e7\u00e3o id integer ID \u00fanico do usu\u00e1rio username string Nome de usu\u00e1rio email string Email do usu\u00e1rio first_name string Primeiro nome last_name string Sobrenome provedor_id integer ID do provedor user_type string Tipo do usu\u00e1rio (admin, agent, viewer) permissions array Lista de permiss\u00f5es do usu\u00e1rio sound_notifications_enabled boolean Notifica\u00e7\u00f5es sonoras habilitadas new_message_sound string Som para nova mensagem new_conversation_sound string Som para nova conversa session_timeout integer Timeout da sess\u00e3o em minutos","title":"Campos da Resposta"},{"location":"api/authentication/#logout","text":"","title":"Logout"},{"location":"api/authentication/#endpoint-de-logout","text":"POST /api/auth/logout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Endpoint de Logout"},{"location":"api/authentication/#resposta_1","text":"{ \"message\": \"Logout realizado com sucesso\" }","title":"Resposta"},{"location":"api/authentication/#timeout-de-sessao","text":"","title":"Timeout de Sess\u00e3o"},{"location":"api/authentication/#verificar-timeout","text":"POST /api/auth/session-timeout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"timeout\": 60 }","title":"Verificar Timeout"},{"location":"api/authentication/#resposta-de-sucesso_1","text":"{ \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 }","title":"Resposta de Sucesso"},{"location":"api/authentication/#resposta-de-erro_1","text":"{ \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" }","title":"Resposta de Erro"},{"location":"api/authentication/#implementacao-em-javascript","text":"","title":"Implementa\u00e7\u00e3o em JavaScript"},{"location":"api/authentication/#exemplo-com-fetch","text":"class NioChatAPI { constructor(baseURL, token = null) { this.baseURL = baseURL; this.token = token; } async login(username, password) { const response = await fetch(`${this.baseURL}/api/auth/login/`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }) }); if (response.ok) { const data = await response.json(); this.token = data.token; console.log('Token recebido:', data.token); return data; } else { throw new Error('Falha na autentica\u00e7\u00e3o'); } } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const headers = { 'Content-Type': 'application/json', ...options.headers }; if (this.token) { headers['Authorization'] = `Token ${this.token}`; } const response = await fetch(url, { ...options, headers }); if (response.status === 401) { // Token expirado ou inv\u00e1lido this.token = null; throw new Error('Sess\u00e3o expirada'); } return response; } async get(endpoint) { const response = await this.request(endpoint, { method: 'GET' }); return response.json(); } async post(endpoint, data) { const response = await this.request(endpoint, { method: 'POST', body: JSON.stringify(data) }); return response.json(); } async put(endpoint, data) { const response = await this.request(endpoint, { method: 'PUT', body: JSON.stringify(data) }); return response.json(); } async delete(endpoint) { const response = await this.request(endpoint, { method: 'DELETE' }); return response.json(); } } // Uso const api = new NioChatAPI('http://localhost:8010'); // Login try { const auth = await api.login('usuario', 'senha'); console.log('Token:', auth.token); // Obter dados do usu\u00e1rio ap\u00f3s login const userInfo = await api.get('/api/auth/me/'); console.log('Dados do usu\u00e1rio:', userInfo); } catch (error) { console.error('Erro no login:', error); } // Fazer requisi\u00e7\u00f5es autenticadas try { const conversations = await api.get('/api/conversations/'); console.log('Conversas:', conversations); } catch (error) { console.error('Erro na requisi\u00e7\u00e3o:', error); }","title":"Exemplo com Fetch"},{"location":"api/authentication/#exemplo-com-axios","text":"import axios from 'axios'; class NioChatAPI { constructor(baseURL) { this.api = axios.create({ baseURL: baseURL, headers: { 'Content-Type': 'application/json' } }); // Interceptor para adicionar token this.api.interceptors.request.use((config) => { const token = localStorage.getItem('niochat_token'); if (token) { config.headers.Authorization = `Token ${token}`; } return config; }); // Interceptor para tratar erros de autentica\u00e7\u00e3o this.api.interceptors.response.use( (response) => response, (error) => { if (error.response?.status === 401) { localStorage.removeItem('niochat_token'); window.location.href = '/login'; } return Promise.reject(error); } ); } async login(username, password) { try { const response = await this.api.post('/api/auth/login/', { username, password }); const { token } = response.data; localStorage.setItem('niochat_token', token); return response.data; } catch (error) { throw new Error('Falha na autentica\u00e7\u00e3o'); } } async logout() { try { await this.api.post('/api/auth/logout/'); localStorage.removeItem('niochat_token'); } catch (error) { console.error('Erro no logout:', error); } } async getMe() { const response = await this.api.get('/api/auth/me/'); return response.data; } } // Uso const api = new NioChatAPI('http://localhost:8010'); // Login api.login('usuario', 'senha') .then(auth => console.log('Autenticado:', auth)) .catch(error => console.error('Erro:', error)); // Obter dados do usu\u00e1rio api.getMe() .then(user => console.log('Usu\u00e1rio:', user)) .catch(error => console.error('Erro:', error));","title":"Exemplo com Axios"},{"location":"api/authentication/#implementacao-em-python","text":"","title":"Implementa\u00e7\u00e3o em Python"},{"location":"api/authentication/#exemplo-com-requests","text":"import requests from typing import Optional, Dict, Any class NioChatAPI: def __init__(self, base_url: str, token: Optional[str] = None): self.base_url = base_url self.token = token self.session = requests.Session() if token: self.session.headers.update({ 'Authorization': f'Token {token}' }) def login(self, username: str, password: str) -> Dict[str, Any]: \"\"\"Realiza login e obt\u00e9m token\"\"\" response = self.session.post( f'{self.base_url}/api/auth/login/', json={'username': username, 'password': password} ) if response.status_code == 200: data = response.json() self.token = data['token'] self.session.headers.update({ 'Authorization': f'Token {self.token}' }) return data else: raise Exception('Falha na autentica\u00e7\u00e3o') def get(self, endpoint: str) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o GET\"\"\" response = self.session.get(f'{self.base_url}{endpoint}') response.raise_for_status() return response.json() def post(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o POST\"\"\" response = self.session.post( f'{self.base_url}{endpoint}', json=data ) response.raise_for_status() return response.json() def put(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o PUT\"\"\" response = self.session.put( f'{self.base_url}{endpoint}', json=data ) response.raise_for_status() return response.json() def delete(self, endpoint: str) -> Dict[str, Any]: \"\"\"Faz requisi\u00e7\u00e3o DELETE\"\"\" response = self.session.delete(f'{self.base_url}{endpoint}') response.raise_for_status() return response.json() def get_me(self) -> Dict[str, Any]: \"\"\"Obt\u00e9m dados do usu\u00e1rio atual\"\"\" return self.get('/api/auth/me/') def logout(self) -> None: \"\"\"Realiza logout\"\"\" self.session.post(f'{self.base_url}/api/auth/logout/') self.token = None self.session.headers.pop('Authorization', None) # Uso api = NioChatAPI('http://localhost:8010') # Login try: auth = api.login('usuario', 'senha') print(f'Token: {auth[\"token\"]}') except Exception as e: print(f'Erro no login: {e}') # Fazer requisi\u00e7\u00f5es try: conversations = api.get('/api/conversations/') print(f'Conversas: {conversations}') except Exception as e: print(f'Erro na requisi\u00e7\u00e3o: {e}')","title":"Exemplo com Requests"},{"location":"api/authentication/#implementacao-em-php","text":"","title":"Implementa\u00e7\u00e3o em PHP"},{"location":"api/authentication/#exemplo-com-curl","text":"<?php class NioChatAPI { private $baseUrl; private $token; public function __construct($baseUrl) { $this->baseUrl = $baseUrl; } public function login($username, $password) { $data = json_encode([ 'username' => $username, 'password' => $password ]); $response = $this->makeRequest('/api/auth/login/', 'POST', $data); if (isset($response['token'])) { $this->token = $response['token']; return $response; } else { throw new Exception('Falha na autentica\u00e7\u00e3o'); } } public function get($endpoint) { return $this->makeRequest($endpoint, 'GET'); } public function post($endpoint, $data) { return $this->makeRequest($endpoint, 'POST', json_encode($data)); } public function put($endpoint, $data) { return $this->makeRequest($endpoint, 'PUT', json_encode($data)); } public function delete($endpoint) { return $this->makeRequest($endpoint, 'DELETE'); } private function makeRequest($endpoint, $method, $data = null) { $url = $this->baseUrl . $endpoint; $headers = [ 'Content-Type: application/json' ]; if ($this->token) { $headers[] = 'Authorization: Token ' . $this->token; } $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method); if ($data) { curl_setopt($ch, CURLOPT_POSTFIELDS, $data); } $response = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if ($httpCode >= 400) { throw new Exception('Erro HTTP: ' . $httpCode); } return json_decode($response, true); } } // Uso $api = new NioChatAPI('http://localhost:8010'); try { $auth = $api->login('usuario', 'senha'); echo \"Token: \" . $auth['token'] . \"\\n\"; $conversations = $api->get('/api/conversations/'); echo \"Conversas: \" . json_encode($conversations) . \"\\n\"; } catch (Exception $e) { echo \"Erro: \" . $e->getMessage() . \"\\n\"; } ?>","title":"Exemplo com cURL"},{"location":"api/authentication/#tratamento-de-erros","text":"","title":"Tratamento de Erros"},{"location":"api/authentication/#codigos-de-status-http","text":"","title":"C\u00f3digos de Status HTTP"},{"location":"api/authentication/#401-nao-autorizado","text":"{ \"error\": \"AuthenticationError\", \"message\": \"Token inv\u00e1lido ou expirado\" }","title":"401 - N\u00e3o Autorizado"},{"location":"api/authentication/#403-proibido","text":"{ \"error\": \"PermissionError\", \"message\": \"Voc\u00ea n\u00e3o tem permiss\u00e3o para esta a\u00e7\u00e3o\" }","title":"403 - Proibido"},{"location":"api/authentication/#400-requisicao-invalida","text":"{ \"error\": \"ValidationError\", \"message\": \"Dados inv\u00e1lidos\", \"details\": { \"username\": [\"Este campo \u00e9 obrigat\u00f3rio\"], \"password\": [\"Este campo \u00e9 obrigat\u00f3rio\"] } }","title":"400 - Requisi\u00e7\u00e3o Inv\u00e1lida"},{"location":"api/authentication/#implementacao-de-retry","text":"class NioChatAPI { async requestWithRetry(endpoint, options = {}, maxRetries = 3) { for (let i = 0; i < maxRetries; i++) { try { const response = await this.request(endpoint, options); return response; } catch (error) { if (error.message === 'Sess\u00e3o expirada' && i < maxRetries - 1) { // Tentar fazer login novamente await this.refreshToken(); continue; } throw error; } } } async refreshToken() { // Implementar l\u00f3gica de refresh do token // ou redirecionar para login this.token = null; window.location.href = '/login'; } }","title":"Implementa\u00e7\u00e3o de Retry"},{"location":"api/authentication/#seguranca","text":"","title":"Seguran\u00e7a"},{"location":"api/authentication/#boas-praticas","text":"Nunca armazene tokens em localStorage em produ\u00e7\u00e3o Use HTTPS em produ\u00e7\u00e3o Implemente timeout de sess\u00e3o Valide tokens no servidor Use tokens com expira\u00e7\u00e3o","title":"Boas Pr\u00e1ticas"},{"location":"api/authentication/#exemplo-de-armazenamento-seguro","text":"class SecureTokenStorage { static setToken(token) { // Em produ\u00e7\u00e3o, use httpOnly cookies if (process.env.NODE_ENV === 'production') { // Implementar com cookies httpOnly document.cookie = `niochat_token=${token}; path=/; secure; httpOnly`; } else { // Em desenvolvimento, use sessionStorage sessionStorage.setItem('niochat_token', token); } } static getToken() { if (process.env.NODE_ENV === 'production') { // Ler de cookies const cookies = document.cookie.split(';'); const tokenCookie = cookies.find(cookie => cookie.trim().startsWith('niochat_token=') ); return tokenCookie ? tokenCookie.split('=')[1] : null; } else { return sessionStorage.getItem('niochat_token'); } } static removeToken() { if (process.env.NODE_ENV === 'production') { document.cookie = 'niochat_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'; } else { sessionStorage.removeItem('niochat_token'); } } }","title":"Exemplo de Armazenamento Seguro"},{"location":"api/authentication/#proximos-passos","text":"Endpoints - Explore todos os endpoints da API WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks","title":"Pr\u00f3ximos Passos"},{"location":"api/endpoints/","text":"Endpoints da API O NioChat oferece uma API REST completa para integra\u00e7\u00e3o e automa\u00e7\u00e3o. Esta se\u00e7\u00e3o documenta todos os endpoints dispon\u00edveis. Autentica\u00e7\u00e3o Login POST /api/auth/login/ Content-Type: application/json { \"username\": \"usuario\", \"password\": \"senha\" } Resposta: { \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" } Nota: A API retorna apenas o token. Para obter dados do usu\u00e1rio, use /api/auth/me/ ap\u00f3s o login. Logout POST /api/auth/logout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Informa\u00e7\u00f5es do Usu\u00e1rio GET /api/auth/me/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Resposta: { \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 } Timeout de Sess\u00e3o POST /api/auth/session-timeout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"timeout\": 60 } Resposta de Sucesso: { \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 } Resposta de Erro: { \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" } Contatos Listar Contatos GET /api/contacts/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"avatar\": \"https://example.com/avatar1.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 }, { \"id\": 2, \"name\": \"Maria Santos\", \"phone\": \"11988888888\", \"avatar\": \"https://example.com/avatar2.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T20:04:40.459828-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": true, \"last_seen\": \"2025-10-11T20:30:00.000000-03:00\", \"conversation_count\": 2, \"unread_messages\": 1 } ] } Detalhes do Contato GET /api/contacts/{id}/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Criar Contato POST /api/contacts/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Content-Type: application/json { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"email\": \"joao@exemplo.com\", \"provedor\": 1 } Resposta: { \"id\": 14, \"name\": \"Jo\u00e3o Silva\", \"email\": \"joao@exemplo.com\", \"phone\": \"11999999999\", \"avatar\": null, \"additional_attributes\": {}, \"provedor\": 1, \"created_at\": \"2025-10-12T00:26:47.361663-03:00\", \"updated_at\": \"2025-10-12T00:26:47.361663-03:00\" } Campos Obrigat\u00f3rios: - name : Nome do contato - phone : Telefone do contato - provedor : ID do provedor (ex: 1) Campos Opcionais: - email : Email do contato Resposta de Sucesso: { \"id\": 3, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\", \"email\": \"joao@exemplo.com\", \"avatar\": null, \"inbox\": 1, \"created_at\": \"2025-10-12T00:21:00.000000-03:00\", \"updated_at\": \"2025-10-12T00:21:00.000000-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 0, \"unread_messages\": 0 } Conversas Listar Conversas GET /api/conversations/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Par\u00e2metros de Query: - search : Busca por nome ou telefone - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina Resposta: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 12, \"name\": \"Minha Vida \ud83d\ude0d\", \"email\": null, \"phone\": \"556392484773\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/559942536_2260568477780892_429171894518858519_n.jpg?ccb=11-4&oh=01_Q5Aa2wGmst6l_wRLC1bGQRObsbi7pf4k7e6Svu24z3ZtDcGe7Q&oe=68F2ACE8&_nc_sid=5e03e0&_nc_cat=103\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"556392484773@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"249666566365270@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T19:55:34.010282-03:00\", \"updated_at\": \"2025-10-11T19:57:59.568844-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } }, { \"id\": 13, \"name\": \"Minha Vida \u2764\ufe0f\ud83d\ude0d\", \"email\": null, \"phone\": \"559491561248\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/564320629_4141239932761672_4017937049576898413_n.jpg?ccb=11-4&oh=01_Q5Aa2wG7KvYDF5uxK2lrwVrQsCcnNxuVJ8w5W_8Ty4F0LxcZRw&oe=68F7DAB1&_nc_sid=5e03e0&_nc_cat=109\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"559491561248@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"141880620785739@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T20:04:39.896621-03:00\", \"updated_at\": \"2025-10-11T20:06:31.952866-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } } ] } Detalhes do Contato GET /api/contacts/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Atualizar Contato PUT /api/contacts/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Jo\u00e3o Silva Atualizado\", \"phone\": \"+5511999999999\" } Inboxes Listar Inboxes GET /api/inboxes/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Detalhes da Inbox GET /api/inboxes/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Criar Inbox POST /api/inboxes/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"WhatsApp Business\", \"channel\": 1, \"provedor\": 1 } Conversas Listar Conversas GET /api/conversations/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 13, \"contact\": { \"id\": 13, \"name\": \"Minha Vida \u2764\ufe0f\ud83d\ude0d\", \"email\": null, \"phone\": \"559491561248\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/564320629_4141239932761672_4017937049576898413_n.jpg?ccb=11-4&oh=01_Q5Aa2wG7KvYDF5uxK2lrwVrQsCcnNxuVJ8w5W_8Ty4F0LxcZRw&oe=68F7DAB1&_nc_sid=5e03e0&_nc_cat=109\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"559491561248@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"141880620785739@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T20:04:39.896621-03:00\", \"updated_at\": \"2025-10-11T20:06:31.952866-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } }, \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" }, \"assignee\": null, \"status\": \"snoozed\", \"additional_attributes\": { \"event\": \"messages\", \"instance\": \"559484024089\" }, \"last_message_at\": null, \"created_at\": \"2025-10-11T20:04:40.407433-03:00\", \"last_message\": { \"id\": 240, \"conversation\": 13, \"message_type\": \"outgoing\", \"media_type\": \"outgoing\", \"file_url\": null, \"content\": \"Atendimento encerrado. Agradecemos o seu contato, senhor Rog\u00e9rio. \\n\\nTenha uma excelente noite! \ud83d\ude0a\", \"is_from_customer\": false, \"created_at\": \"2025-10-11T20:06:34.300428-03:00\", \"external_id\": \"559484024089:3EB01FEB66F1A4B05DB145\", \"additional_attributes\": { \"event\": \"messages\", \"instance\": \"559484024089\" } } } ] } Par\u00e2metros de Query: - status : open, closed, pending - assignee : ID do agente - team : ID da equipe - search : Busca por texto - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina Resposta: { \"count\": 100, \"next\": \"http://localhost:8010/api/conversations/?page=2\", \"previous\": null, \"results\": [ { \"id\": 1, \"contact\": { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\", \"profile_picture\": \"https://example.com/photo.jpg\" }, \"status\": \"open\", \"assignee\": { \"id\": 1, \"username\": \"agente1\", \"first_name\": \"Agente\" }, \"team\": { \"id\": 1, \"name\": \"Suporte\" }, \"last_message\": { \"id\": 1, \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" }, \"created_at\": \"2024-01-01T09:00:00Z\", \"updated_at\": \"2024-01-01T10:00:00Z\" } ] } Detalhes da Conversa GET /api/conversations/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Atribuir Conversa POST /api/conversations/{id}/assign/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"user_id\": 1 } Resposta: { \"success\": true, \"message\": \"Conversa atribu\u00edda para Agente\", \"conversation\": { \"id\": 1, \"assignee\": { \"id\": 1, \"username\": \"agente1\", \"first_name\": \"Agente\" }, \"status\": \"open\" } } Transferir para Agente POST /api/conversations/{id}/transfer/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"user_id\": 2 } Transferir para Equipe POST /api/conversations/{id}/transfer_to_team/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"team_id\": 1, \"team_name\": \"SUPORTE T\u00c9CNICO\" } Resposta: { \"success\": true, \"message\": \"Conversa transferida para equipe SUPORTE T\u00c9CNICO\", \"conversation\": { \"id\": 1, \"status\": \"pending\", \"assignee\": null, \"team\": \"SUPORTE T\u00c9CNICO\" } } Fechar Conversa POST /api/conversations/{id}/close/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Reabrir Conversa POST /api/conversations/{id}/reopen/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Estat\u00edsticas de Recupera\u00e7\u00e3o GET /api/recovery/stats/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Configura\u00e7\u00f5es de Recupera\u00e7\u00e3o POST /api/recovery/settings/{provedor_id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"enabled\": true, \"auto_recovery\": true, \"recovery_interval\": 30 } Mensagens Listar Mensagens GET /api/messages/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 23, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 218, \"conversation\": 12, \"message_type\": \"incoming\", \"media_type\": \"incoming\", \"file_url\": null, \"content\": \"Ola\", \"is_from_customer\": true, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"external_id\": \"11999999999:ABC123DEF456\", \"additional_attributes\": { \"external_id\": \"559484024089:3EB057A8C58547E3401498\" } }, { \"id\": 219, \"conversation\": 12, \"message_type\": \"outgoing\", \"media_type\": \"outgoing\", \"file_url\": null, \"content\": \"Boa noite! Voc\u00ea j\u00e1 \u00e9 cliente da NIO NET ou deseja conhecer nossos planos?\", \"is_from_customer\": false, \"created_at\": \"2025-10-11T19:55:38.094792-03:00\", \"external_id\": \"11999999999:DEF456GHI789\", \"additional_attributes\": {} } ] } Par\u00e2metros de Query: - conversation : ID da conversa - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina Detalhes da Mensagem GET /api/messages/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Enviar Texto POST /api/messages/send_text/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"conversation_id\": 1, \"content\": \"Ol\u00e1, como posso ajudar?\" } Enviar M\u00eddia POST /api/messages/send_media/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: multipart/form-data { \"conversation_id\": 1, \"file\": [arquivo], \"message_type\": \"image\" } Reagir a Mensagem POST /api/messages/react/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\" } Deletar Mensagem POST /api/messages/delete_message/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"message_id\": 1 } Servir Arquivo de M\u00eddia GET /api/media/messages/{conversation_id}/{filename}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Equipes Listar Equipes GET /api/teams/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Detalhes da Equipe GET /api/teams/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Criar Equipe POST /api/teams/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Suporte T\u00e9cnico\", \"description\": \"Equipe de suporte t\u00e9cnico\", \"provedor\": 1 } Membros da Equipe GET /api/team-members/?team={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Adicionar Membro \u00e0 Equipe POST /api/team-members/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"team\": 1, \"user\": 2 } Chat Interno Salas de Chat GET /api/internal-chat/rooms/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Criar Sala de Chat POST /api/internal-chat/rooms/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Sala de Suporte\", \"description\": \"Sala para discuss\u00f5es de suporte\" } Mensagens do Chat Interno GET /api/internal-chat/messages/?room={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Enviar Mensagem no Chat Interno POST /api/internal-chat/messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"room\": 1, \"content\": \"Mensagem interna\" } Participantes da Sala GET /api/internal-chat/participants/?room={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Adicionar Participante POST /api/internal-chat/participants/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"room\": 1, \"user\": 2 } Contagem de Mensagens N\u00e3o Lidas (Chat Interno) GET /api/internal-chat-unread-count/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Mensagens N\u00e3o Lidas por Usu\u00e1rio (Chat Interno) GET /api/internal-chat-unread-by-user/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Chat Privado Mensagens Privadas GET /api/private-messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Enviar Mensagem Privada POST /api/private-messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"recipient\": 2, \"content\": \"Mensagem privada\" } Contagem de Mensagens N\u00e3o Lidas (Chat Privado) GET /api/private-unread-counts/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... CSAT (Customer Satisfaction) Feedbacks CSAT GET /api/csat/feedbacks/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Estat\u00edsticas CSAT GET /api/csat/feedbacks/stats/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"total_feedbacks\": 0, \"average_rating\": 0, \"satisfaction_rate\": 0, \"rating_distribution\": [], \"channel_distribution\": [], \"daily_stats\": [ { \"day\": \"2025-09-12\", \"count\": 0, \"avg_rating\": 0 }, { \"day\": \"2025-09-13\", \"count\": 0, \"avg_rating\": 0 }, { \"day\": \"2025-09-14\", \"count\": 0, \"avg_rating\": 0 } ] } Resposta: { \"total_feedbacks\": 50, \"average_rating\": 4.2, \"rating_distribution\": { \"1\": 2, \"2\": 3, \"3\": 8, \"4\": 15, \"5\": 22 }, \"recent_feedbacks\": [ { \"id\": 1, \"contact_name\": \"Jo\u00e3o Silva\", \"contact_photo\": \"https://example.com/photo.jpg\", \"emoji_rating\": \"\ud83e\udd29\", \"rating_value\": 5, \"original_message\": \"Excelente atendimento!\", \"feedback_sent_at\": \"2024-01-01T10:00:00Z\" } ] } Solicita\u00e7\u00f5es CSAT GET /api/csat/requests/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Webhook CSAT POST /api/csat/webhook/ Content-Type: application/json { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente atendimento!\" } Dashboard Estat\u00edsticas do Dashboard GET /api/dashboard/stats/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"total_conversas\": 2, \"conversas_abertas\": 0, \"conversas_pendentes\": 0, \"conversas_resolvidas\": 1, \"conversas_em_andamento\": 0, \"contatos_unicos\": 2, \"mensagens_30_dias\": 23, \"tempo_medio_resposta\": \"0min\", \"tempo_primeira_resposta\": \"1.2min\", \"taxa_resolucao\": \"50%\", \"satisfacao_media\": \"4.4\", \"canais\": [ { \"inbox__channel_type\": \"whatsapp\", \"total\": 2 } ], \"atendentes\": [ { \"name\": \"amanda\", \"conversations\": 0, \"satisfaction\": 4.5 }, { \"name\": \"Nio chat\", \"conversations\": 0, \"satisfaction\": 4.5 } ], \"atividades\": [ { \"action\": \"conversation_closed_agent\", \"user\": \"niochat\", \"time\": \"11/10/2025 22:58\", \"type\": \"activity\" }, { \"action\": \"conversation_closed_agent\", \"user\": \"niochat\", \"time\": \"11/10/2025 22:50\", \"type\": \"activity\" } ] } Estat\u00edsticas de Conversas GET /api/dashboard-stats/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Tempo de Resposta por Hora GET /api/dashboard/response-time-hourly/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... An\u00e1lise de Conversas GET /api/analysis/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"period\": \"week\", \"date_range\": { \"start\": \"2025-10-05\", \"end\": \"2025-10-12\" }, \"summary\": { \"totalConversations\": 2, \"avgResponseTime\": \"2.1min\", \"activeAgents\": 0, \"satisfactionRate\": \"0.0\" }, \"conversationsByDay\": [ { \"date\": \"06/10\", \"conversations\": 0 }, { \"date\": \"07/10\", \"conversations\": 0 }, { \"date\": \"08/10\", \"conversations\": 0 }, { \"date\": \"09/10\", \"conversations\": 0 }, { \"date\": \"10/10\", \"conversations\": 0 }, { \"date\": \"11/10\", \"conversations\": 0 }, { \"date\": \"12/10\", \"conversations\": 0 } ], \"channels\": [ { \"channel\": \"whatsapp\", \"conversations\": 2 } ] } Teste de An\u00e1lise GET /api/test-analysis/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... IA e SGP Processar com IA POST /api/atendimento/ia/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"conversation_id\": 1, \"message\": \"Quero pagar minha fatura\" } Resposta: { \"response\": \"Para gerar sua fatura, preciso do seu CPF.\", \"function_calls\": [], \"needs_input\": true } Function Calls SGP A IA executa automaticamente as seguintes fun\u00e7\u00f5es: Consultar Cliente { \"name\": \"consultar_cliente_sgp\", \"parameters\": { \"cpf_cnpj\": \"123.456.789-00\" } } Verificar Acesso { \"name\": \"verificar_acesso_sgp\", \"parameters\": { \"contrato\": \"12345\" } } Gerar Fatura { \"name\": \"gerar_fatura_completa\", \"parameters\": { \"contrato\": \"12345\" } } Criar Chamado T\u00e9cnico { \"name\": \"criar_chamado_tecnico\", \"parameters\": { \"cpf_cnpj\": \"123.456.789-00\", \"motivo\": \"Sem internet\", \"sintomas\": \"LED vermelho piscando\" } } Integra\u00e7\u00f5es WhatsApp GET /api/integrations/whatsapp/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Telegram GET /api/integrations/telegram/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Email GET /api/integrations/email/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Webchat GET /api/integrations/webchat/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Auditoria Logs de Auditoria GET /api/audit-logs/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Par\u00e2metros de Query: - action : Tipo de a\u00e7\u00e3o - user_id : ID do usu\u00e1rio - date_from : Data inicial - date_to : Data final - page : N\u00famero da p\u00e1gina Resposta: { \"count\": 1000, \"next\": \"http://localhost:8010/api/audit-logs/?page=2\", \"previous\": null, \"results\": [ { \"id\": 1, \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1, \"contact_name\": \"Jo\u00e3o Silva\" }, \"user\": { \"id\": 1, \"username\": \"agente1\" }, \"timestamp\": \"2024-01-01T10:00:00Z\" } ] } Webhooks Webhook Uazapi/Evolution POST /webhook/evolution-uazapi/ Content-Type: application/json { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } } Webhook Evolution (Legado) POST /webhooks/evolution-uazapi/ Content-Type: application/json { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } } Sistema Health Check GET /api/health/ Changelog GET /api/changelog/ Arquivos Uazapi GET /api/uazapi/file/{file_id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... WebSocket Events Conex\u00e3o const ws = new WebSocket('ws://localhost:8010/ws/dashboard/'); ws.onopen = function(event) { console.log('Conectado ao WebSocket'); }; ws.onmessage = function(event) { const data = JSON.parse(event.data); console.log('Mensagem recebida:', data); }; Eventos Dispon\u00edveis Chat // Nova mensagem { \"type\": \"chat_message\", \"data\": { \"conversation_id\": 1, \"message\": { \"id\": 1, \"content\": \"Nova mensagem\", \"sender\": \"customer\" } } } // Rea\u00e7\u00e3o a mensagem { \"type\": \"message_reaction\", \"data\": { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\" } } // Mensagem deletada { \"type\": \"message_deleted\", \"data\": { \"message_id\": 1 } } Dashboard // M\u00e9tricas atualizadas { \"type\": \"dashboard_metrics\", \"data\": { \"total_conversations\": 100, \"open_conversations\": 25, \"average_satisfaction\": 4.2 } } // CSAT atualizado { \"type\": \"csat_update\", \"data\": { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente!\" } } // Log de auditoria { \"type\": \"audit_log\", \"data\": { \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1 } } } Status do Usu\u00e1rio // Status online/offline { \"type\": \"user_status\", \"data\": { \"user_id\": 1, \"status\": \"online\" } } Autentica\u00e7\u00e3o WebSocket const ws = new WebSocket('ws://localhost:8010/ws/dashboard/?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...'); C\u00f3digos de Status Sucesso 200 : OK 201 : Criado 204 : Sem conte\u00fado Erro do Cliente 400 : Requisi\u00e7\u00e3o inv\u00e1lida 401 : N\u00e3o autorizado 403 : Proibido 404 : N\u00e3o encontrado 422 : Entidade n\u00e3o process\u00e1vel Erro do Servidor 500 : Erro interno do servidor 502 : Bad Gateway 503 : Servi\u00e7o indispon\u00edvel Tratamento de Erros Formato de Erro { \"error\": \"ValidationError\", \"message\": \"Dados inv\u00e1lidos\", \"details\": { \"field\": \"conversation_id\", \"message\": \"Este campo \u00e9 obrigat\u00f3rio\" } } Exemplos de Erro { \"error\": \"AuthenticationError\", \"message\": \"Token inv\u00e1lido ou expirado\" } { \"error\": \"PermissionError\", \"message\": \"Voc\u00ea n\u00e3o tem permiss\u00e3o para esta a\u00e7\u00e3o\" } Guia do Postman Para facilitar o teste da API, criamos um Guia Completo do Postman com: - Configura\u00e7\u00e3o passo a passo - Solu\u00e7\u00e3o de problemas comuns - Scripts \u00fateis - Collection pronta para importar Pr\u00f3ximos Passos Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o Guia do Postman - Configure o Postman WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks Uso - Aprenda a usar a interface","title":"Endpoints da API"},{"location":"api/endpoints/#endpoints-da-api","text":"O NioChat oferece uma API REST completa para integra\u00e7\u00e3o e automa\u00e7\u00e3o. Esta se\u00e7\u00e3o documenta todos os endpoints dispon\u00edveis.","title":"Endpoints da API"},{"location":"api/endpoints/#autenticacao","text":"","title":"Autentica\u00e7\u00e3o"},{"location":"api/endpoints/#login","text":"POST /api/auth/login/ Content-Type: application/json { \"username\": \"usuario\", \"password\": \"senha\" } Resposta: { \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" } Nota: A API retorna apenas o token. Para obter dados do usu\u00e1rio, use /api/auth/me/ ap\u00f3s o login.","title":"Login"},{"location":"api/endpoints/#logout","text":"POST /api/auth/logout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Logout"},{"location":"api/endpoints/#informacoes-do-usuario","text":"GET /api/auth/me/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Resposta: { \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 }","title":"Informa\u00e7\u00f5es do Usu\u00e1rio"},{"location":"api/endpoints/#timeout-de-sessao","text":"POST /api/auth/session-timeout/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"timeout\": 60 } Resposta de Sucesso: { \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 } Resposta de Erro: { \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" }","title":"Timeout de Sess\u00e3o"},{"location":"api/endpoints/#contatos","text":"","title":"Contatos"},{"location":"api/endpoints/#listar-contatos","text":"GET /api/contacts/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"avatar\": \"https://example.com/avatar1.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 }, { \"id\": 2, \"name\": \"Maria Santos\", \"phone\": \"11988888888\", \"avatar\": \"https://example.com/avatar2.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T20:04:40.459828-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": true, \"last_seen\": \"2025-10-11T20:30:00.000000-03:00\", \"conversation_count\": 2, \"unread_messages\": 1 } ] }","title":"Listar Contatos"},{"location":"api/endpoints/#detalhes-do-contato","text":"GET /api/contacts/{id}/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf","title":"Detalhes do Contato"},{"location":"api/endpoints/#criar-contato","text":"POST /api/contacts/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Content-Type: application/json { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"email\": \"joao@exemplo.com\", \"provedor\": 1 } Resposta: { \"id\": 14, \"name\": \"Jo\u00e3o Silva\", \"email\": \"joao@exemplo.com\", \"phone\": \"11999999999\", \"avatar\": null, \"additional_attributes\": {}, \"provedor\": 1, \"created_at\": \"2025-10-12T00:26:47.361663-03:00\", \"updated_at\": \"2025-10-12T00:26:47.361663-03:00\" } Campos Obrigat\u00f3rios: - name : Nome do contato - phone : Telefone do contato - provedor : ID do provedor (ex: 1) Campos Opcionais: - email : Email do contato Resposta de Sucesso: { \"id\": 3, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\", \"email\": \"joao@exemplo.com\", \"avatar\": null, \"inbox\": 1, \"created_at\": \"2025-10-12T00:21:00.000000-03:00\", \"updated_at\": \"2025-10-12T00:21:00.000000-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 0, \"unread_messages\": 0 }","title":"Criar Contato"},{"location":"api/endpoints/#conversas","text":"","title":"Conversas"},{"location":"api/endpoints/#listar-conversas","text":"GET /api/conversations/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Par\u00e2metros de Query: - search : Busca por nome ou telefone - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina Resposta: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 12, \"name\": \"Minha Vida \ud83d\ude0d\", \"email\": null, \"phone\": \"556392484773\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/559942536_2260568477780892_429171894518858519_n.jpg?ccb=11-4&oh=01_Q5Aa2wGmst6l_wRLC1bGQRObsbi7pf4k7e6Svu24z3ZtDcGe7Q&oe=68F2ACE8&_nc_sid=5e03e0&_nc_cat=103\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"556392484773@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"249666566365270@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T19:55:34.010282-03:00\", \"updated_at\": \"2025-10-11T19:57:59.568844-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } }, { \"id\": 13, \"name\": \"Minha Vida \u2764\ufe0f\ud83d\ude0d\", \"email\": null, \"phone\": \"559491561248\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/564320629_4141239932761672_4017937049576898413_n.jpg?ccb=11-4&oh=01_Q5Aa2wG7KvYDF5uxK2lrwVrQsCcnNxuVJ8w5W_8Ty4F0LxcZRw&oe=68F7DAB1&_nc_sid=5e03e0&_nc_cat=109\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"559491561248@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"141880620785739@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T20:04:39.896621-03:00\", \"updated_at\": \"2025-10-11T20:06:31.952866-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } } ] }","title":"Listar Conversas"},{"location":"api/endpoints/#detalhes-do-contato_1","text":"GET /api/contacts/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Detalhes do Contato"},{"location":"api/endpoints/#atualizar-contato","text":"PUT /api/contacts/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Jo\u00e3o Silva Atualizado\", \"phone\": \"+5511999999999\" }","title":"Atualizar Contato"},{"location":"api/endpoints/#inboxes","text":"","title":"Inboxes"},{"location":"api/endpoints/#listar-inboxes","text":"GET /api/inboxes/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Listar Inboxes"},{"location":"api/endpoints/#detalhes-da-inbox","text":"GET /api/inboxes/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Detalhes da Inbox"},{"location":"api/endpoints/#criar-inbox","text":"POST /api/inboxes/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"WhatsApp Business\", \"channel\": 1, \"provedor\": 1 }","title":"Criar Inbox"},{"location":"api/endpoints/#conversas_1","text":"","title":"Conversas"},{"location":"api/endpoints/#listar-conversas_1","text":"GET /api/conversations/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 13, \"contact\": { \"id\": 13, \"name\": \"Minha Vida \u2764\ufe0f\ud83d\ude0d\", \"email\": null, \"phone\": \"559491561248\", \"avatar\": \"https://pps.whatsapp.net/v/t61.24694-24/564320629_4141239932761672_4017937049576898413_n.jpg?ccb=11-4&oh=01_Q5Aa2wG7KvYDF5uxK2lrwVrQsCcnNxuVJ8w5W_8Ty4F0LxcZRw&oe=68F7DAB1&_nc_sid=5e03e0&_nc_cat=109\", \"additional_attributes\": { \"event\": \"messages\", \"chatid\": \"559491561248@s.whatsapp.net\", \"instance\": \"11999999999\", \"sender_lid\": \"141880620785739@lid\" }, \"provedor\": 1, \"created_at\": \"2025-10-11T20:04:39.896621-03:00\", \"updated_at\": \"2025-10-11T20:06:31.952866-03:00\", \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" } }, \"inbox\": { \"id\": 1, \"name\": \"WhatsApp 11999999999\", \"channel_type\": \"whatsapp\", \"provedor\": 1, \"is_active\": true, \"created_at\": \"2025-09-17T23:01:58.067397-03:00\" }, \"assignee\": null, \"status\": \"snoozed\", \"additional_attributes\": { \"event\": \"messages\", \"instance\": \"559484024089\" }, \"last_message_at\": null, \"created_at\": \"2025-10-11T20:04:40.407433-03:00\", \"last_message\": { \"id\": 240, \"conversation\": 13, \"message_type\": \"outgoing\", \"media_type\": \"outgoing\", \"file_url\": null, \"content\": \"Atendimento encerrado. Agradecemos o seu contato, senhor Rog\u00e9rio. \\n\\nTenha uma excelente noite! \ud83d\ude0a\", \"is_from_customer\": false, \"created_at\": \"2025-10-11T20:06:34.300428-03:00\", \"external_id\": \"559484024089:3EB01FEB66F1A4B05DB145\", \"additional_attributes\": { \"event\": \"messages\", \"instance\": \"559484024089\" } } } ] } Par\u00e2metros de Query: - status : open, closed, pending - assignee : ID do agente - team : ID da equipe - search : Busca por texto - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina Resposta: { \"count\": 100, \"next\": \"http://localhost:8010/api/conversations/?page=2\", \"previous\": null, \"results\": [ { \"id\": 1, \"contact\": { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\", \"profile_picture\": \"https://example.com/photo.jpg\" }, \"status\": \"open\", \"assignee\": { \"id\": 1, \"username\": \"agente1\", \"first_name\": \"Agente\" }, \"team\": { \"id\": 1, \"name\": \"Suporte\" }, \"last_message\": { \"id\": 1, \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" }, \"created_at\": \"2024-01-01T09:00:00Z\", \"updated_at\": \"2024-01-01T10:00:00Z\" } ] }","title":"Listar Conversas"},{"location":"api/endpoints/#detalhes-da-conversa","text":"GET /api/conversations/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Detalhes da Conversa"},{"location":"api/endpoints/#atribuir-conversa","text":"POST /api/conversations/{id}/assign/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"user_id\": 1 } Resposta: { \"success\": true, \"message\": \"Conversa atribu\u00edda para Agente\", \"conversation\": { \"id\": 1, \"assignee\": { \"id\": 1, \"username\": \"agente1\", \"first_name\": \"Agente\" }, \"status\": \"open\" } }","title":"Atribuir Conversa"},{"location":"api/endpoints/#transferir-para-agente","text":"POST /api/conversations/{id}/transfer/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"user_id\": 2 }","title":"Transferir para Agente"},{"location":"api/endpoints/#transferir-para-equipe","text":"POST /api/conversations/{id}/transfer_to_team/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"team_id\": 1, \"team_name\": \"SUPORTE T\u00c9CNICO\" } Resposta: { \"success\": true, \"message\": \"Conversa transferida para equipe SUPORTE T\u00c9CNICO\", \"conversation\": { \"id\": 1, \"status\": \"pending\", \"assignee\": null, \"team\": \"SUPORTE T\u00c9CNICO\" } }","title":"Transferir para Equipe"},{"location":"api/endpoints/#fechar-conversa","text":"POST /api/conversations/{id}/close/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Fechar Conversa"},{"location":"api/endpoints/#reabrir-conversa","text":"POST /api/conversations/{id}/reopen/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Reabrir Conversa"},{"location":"api/endpoints/#estatisticas-de-recuperacao","text":"GET /api/recovery/stats/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Estat\u00edsticas de Recupera\u00e7\u00e3o"},{"location":"api/endpoints/#configuracoes-de-recuperacao","text":"POST /api/recovery/settings/{provedor_id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"enabled\": true, \"auto_recovery\": true, \"recovery_interval\": 30 }","title":"Configura\u00e7\u00f5es de Recupera\u00e7\u00e3o"},{"location":"api/endpoints/#mensagens","text":"","title":"Mensagens"},{"location":"api/endpoints/#listar-mensagens","text":"GET /api/messages/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"count\": 23, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 218, \"conversation\": 12, \"message_type\": \"incoming\", \"media_type\": \"incoming\", \"file_url\": null, \"content\": \"Ola\", \"is_from_customer\": true, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"external_id\": \"11999999999:ABC123DEF456\", \"additional_attributes\": { \"external_id\": \"559484024089:3EB057A8C58547E3401498\" } }, { \"id\": 219, \"conversation\": 12, \"message_type\": \"outgoing\", \"media_type\": \"outgoing\", \"file_url\": null, \"content\": \"Boa noite! Voc\u00ea j\u00e1 \u00e9 cliente da NIO NET ou deseja conhecer nossos planos?\", \"is_from_customer\": false, \"created_at\": \"2025-10-11T19:55:38.094792-03:00\", \"external_id\": \"11999999999:DEF456GHI789\", \"additional_attributes\": {} } ] } Par\u00e2metros de Query: - conversation : ID da conversa - page : N\u00famero da p\u00e1gina - page_size : Tamanho da p\u00e1gina","title":"Listar Mensagens"},{"location":"api/endpoints/#detalhes-da-mensagem","text":"GET /api/messages/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Detalhes da Mensagem"},{"location":"api/endpoints/#enviar-texto","text":"POST /api/messages/send_text/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"conversation_id\": 1, \"content\": \"Ol\u00e1, como posso ajudar?\" }","title":"Enviar Texto"},{"location":"api/endpoints/#enviar-midia","text":"POST /api/messages/send_media/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: multipart/form-data { \"conversation_id\": 1, \"file\": [arquivo], \"message_type\": \"image\" }","title":"Enviar M\u00eddia"},{"location":"api/endpoints/#reagir-a-mensagem","text":"POST /api/messages/react/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\" }","title":"Reagir a Mensagem"},{"location":"api/endpoints/#deletar-mensagem","text":"POST /api/messages/delete_message/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"message_id\": 1 }","title":"Deletar Mensagem"},{"location":"api/endpoints/#servir-arquivo-de-midia","text":"GET /api/media/messages/{conversation_id}/{filename}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Servir Arquivo de M\u00eddia"},{"location":"api/endpoints/#equipes","text":"","title":"Equipes"},{"location":"api/endpoints/#listar-equipes","text":"GET /api/teams/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Listar Equipes"},{"location":"api/endpoints/#detalhes-da-equipe","text":"GET /api/teams/{id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Detalhes da Equipe"},{"location":"api/endpoints/#criar-equipe","text":"POST /api/teams/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Suporte T\u00e9cnico\", \"description\": \"Equipe de suporte t\u00e9cnico\", \"provedor\": 1 }","title":"Criar Equipe"},{"location":"api/endpoints/#membros-da-equipe","text":"GET /api/team-members/?team={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Membros da Equipe"},{"location":"api/endpoints/#adicionar-membro-a-equipe","text":"POST /api/team-members/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"team\": 1, \"user\": 2 }","title":"Adicionar Membro \u00e0 Equipe"},{"location":"api/endpoints/#chat-interno","text":"","title":"Chat Interno"},{"location":"api/endpoints/#salas-de-chat","text":"GET /api/internal-chat/rooms/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Salas de Chat"},{"location":"api/endpoints/#criar-sala-de-chat","text":"POST /api/internal-chat/rooms/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"name\": \"Sala de Suporte\", \"description\": \"Sala para discuss\u00f5es de suporte\" }","title":"Criar Sala de Chat"},{"location":"api/endpoints/#mensagens-do-chat-interno","text":"GET /api/internal-chat/messages/?room={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Mensagens do Chat Interno"},{"location":"api/endpoints/#enviar-mensagem-no-chat-interno","text":"POST /api/internal-chat/messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"room\": 1, \"content\": \"Mensagem interna\" }","title":"Enviar Mensagem no Chat Interno"},{"location":"api/endpoints/#participantes-da-sala","text":"GET /api/internal-chat/participants/?room={id} Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Participantes da Sala"},{"location":"api/endpoints/#adicionar-participante","text":"POST /api/internal-chat/participants/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"room\": 1, \"user\": 2 }","title":"Adicionar Participante"},{"location":"api/endpoints/#contagem-de-mensagens-nao-lidas-chat-interno","text":"GET /api/internal-chat-unread-count/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Contagem de Mensagens N\u00e3o Lidas (Chat Interno)"},{"location":"api/endpoints/#mensagens-nao-lidas-por-usuario-chat-interno","text":"GET /api/internal-chat-unread-by-user/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Mensagens N\u00e3o Lidas por Usu\u00e1rio (Chat Interno)"},{"location":"api/endpoints/#chat-privado","text":"","title":"Chat Privado"},{"location":"api/endpoints/#mensagens-privadas","text":"GET /api/private-messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Mensagens Privadas"},{"location":"api/endpoints/#enviar-mensagem-privada","text":"POST /api/private-messages/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"recipient\": 2, \"content\": \"Mensagem privada\" }","title":"Enviar Mensagem Privada"},{"location":"api/endpoints/#contagem-de-mensagens-nao-lidas-chat-privado","text":"GET /api/private-unread-counts/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Contagem de Mensagens N\u00e3o Lidas (Chat Privado)"},{"location":"api/endpoints/#csat-customer-satisfaction","text":"","title":"CSAT (Customer Satisfaction)"},{"location":"api/endpoints/#feedbacks-csat","text":"GET /api/csat/feedbacks/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Feedbacks CSAT"},{"location":"api/endpoints/#estatisticas-csat","text":"GET /api/csat/feedbacks/stats/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"total_feedbacks\": 0, \"average_rating\": 0, \"satisfaction_rate\": 0, \"rating_distribution\": [], \"channel_distribution\": [], \"daily_stats\": [ { \"day\": \"2025-09-12\", \"count\": 0, \"avg_rating\": 0 }, { \"day\": \"2025-09-13\", \"count\": 0, \"avg_rating\": 0 }, { \"day\": \"2025-09-14\", \"count\": 0, \"avg_rating\": 0 } ] } Resposta: { \"total_feedbacks\": 50, \"average_rating\": 4.2, \"rating_distribution\": { \"1\": 2, \"2\": 3, \"3\": 8, \"4\": 15, \"5\": 22 }, \"recent_feedbacks\": [ { \"id\": 1, \"contact_name\": \"Jo\u00e3o Silva\", \"contact_photo\": \"https://example.com/photo.jpg\", \"emoji_rating\": \"\ud83e\udd29\", \"rating_value\": 5, \"original_message\": \"Excelente atendimento!\", \"feedback_sent_at\": \"2024-01-01T10:00:00Z\" } ] }","title":"Estat\u00edsticas CSAT"},{"location":"api/endpoints/#solicitacoes-csat","text":"GET /api/csat/requests/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Solicita\u00e7\u00f5es CSAT"},{"location":"api/endpoints/#webhook-csat","text":"POST /api/csat/webhook/ Content-Type: application/json { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente atendimento!\" }","title":"Webhook CSAT"},{"location":"api/endpoints/#dashboard","text":"","title":"Dashboard"},{"location":"api/endpoints/#estatisticas-do-dashboard","text":"GET /api/dashboard/stats/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"total_conversas\": 2, \"conversas_abertas\": 0, \"conversas_pendentes\": 0, \"conversas_resolvidas\": 1, \"conversas_em_andamento\": 0, \"contatos_unicos\": 2, \"mensagens_30_dias\": 23, \"tempo_medio_resposta\": \"0min\", \"tempo_primeira_resposta\": \"1.2min\", \"taxa_resolucao\": \"50%\", \"satisfacao_media\": \"4.4\", \"canais\": [ { \"inbox__channel_type\": \"whatsapp\", \"total\": 2 } ], \"atendentes\": [ { \"name\": \"amanda\", \"conversations\": 0, \"satisfaction\": 4.5 }, { \"name\": \"Nio chat\", \"conversations\": 0, \"satisfaction\": 4.5 } ], \"atividades\": [ { \"action\": \"conversation_closed_agent\", \"user\": \"niochat\", \"time\": \"11/10/2025 22:58\", \"type\": \"activity\" }, { \"action\": \"conversation_closed_agent\", \"user\": \"niochat\", \"time\": \"11/10/2025 22:50\", \"type\": \"activity\" } ] }","title":"Estat\u00edsticas do Dashboard"},{"location":"api/endpoints/#estatisticas-de-conversas","text":"GET /api/dashboard-stats/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Estat\u00edsticas de Conversas"},{"location":"api/endpoints/#tempo-de-resposta-por-hora","text":"GET /api/dashboard/response-time-hourly/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Tempo de Resposta por Hora"},{"location":"api/endpoints/#analise-de-conversas","text":"GET /api/analysis/ Authorization: Token afe94c2006465105312e24043b859e5c0628aadf Resposta: { \"period\": \"week\", \"date_range\": { \"start\": \"2025-10-05\", \"end\": \"2025-10-12\" }, \"summary\": { \"totalConversations\": 2, \"avgResponseTime\": \"2.1min\", \"activeAgents\": 0, \"satisfactionRate\": \"0.0\" }, \"conversationsByDay\": [ { \"date\": \"06/10\", \"conversations\": 0 }, { \"date\": \"07/10\", \"conversations\": 0 }, { \"date\": \"08/10\", \"conversations\": 0 }, { \"date\": \"09/10\", \"conversations\": 0 }, { \"date\": \"10/10\", \"conversations\": 0 }, { \"date\": \"11/10\", \"conversations\": 0 }, { \"date\": \"12/10\", \"conversations\": 0 } ], \"channels\": [ { \"channel\": \"whatsapp\", \"conversations\": 2 } ] }","title":"An\u00e1lise de Conversas"},{"location":"api/endpoints/#teste-de-analise","text":"GET /api/test-analysis/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Teste de An\u00e1lise"},{"location":"api/endpoints/#ia-e-sgp","text":"","title":"IA e SGP"},{"location":"api/endpoints/#processar-com-ia","text":"POST /api/atendimento/ia/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Content-Type: application/json { \"conversation_id\": 1, \"message\": \"Quero pagar minha fatura\" } Resposta: { \"response\": \"Para gerar sua fatura, preciso do seu CPF.\", \"function_calls\": [], \"needs_input\": true }","title":"Processar com IA"},{"location":"api/endpoints/#function-calls-sgp","text":"A IA executa automaticamente as seguintes fun\u00e7\u00f5es:","title":"Function Calls SGP"},{"location":"api/endpoints/#consultar-cliente","text":"{ \"name\": \"consultar_cliente_sgp\", \"parameters\": { \"cpf_cnpj\": \"123.456.789-00\" } }","title":"Consultar Cliente"},{"location":"api/endpoints/#verificar-acesso","text":"{ \"name\": \"verificar_acesso_sgp\", \"parameters\": { \"contrato\": \"12345\" } }","title":"Verificar Acesso"},{"location":"api/endpoints/#gerar-fatura","text":"{ \"name\": \"gerar_fatura_completa\", \"parameters\": { \"contrato\": \"12345\" } }","title":"Gerar Fatura"},{"location":"api/endpoints/#criar-chamado-tecnico","text":"{ \"name\": \"criar_chamado_tecnico\", \"parameters\": { \"cpf_cnpj\": \"123.456.789-00\", \"motivo\": \"Sem internet\", \"sintomas\": \"LED vermelho piscando\" } }","title":"Criar Chamado T\u00e9cnico"},{"location":"api/endpoints/#integracoes","text":"","title":"Integra\u00e7\u00f5es"},{"location":"api/endpoints/#whatsapp","text":"GET /api/integrations/whatsapp/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"WhatsApp"},{"location":"api/endpoints/#telegram","text":"GET /api/integrations/telegram/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Telegram"},{"location":"api/endpoints/#email","text":"GET /api/integrations/email/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Email"},{"location":"api/endpoints/#webchat","text":"GET /api/integrations/webchat/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Webchat"},{"location":"api/endpoints/#auditoria","text":"","title":"Auditoria"},{"location":"api/endpoints/#logs-de-auditoria","text":"GET /api/audit-logs/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Par\u00e2metros de Query: - action : Tipo de a\u00e7\u00e3o - user_id : ID do usu\u00e1rio - date_from : Data inicial - date_to : Data final - page : N\u00famero da p\u00e1gina Resposta: { \"count\": 1000, \"next\": \"http://localhost:8010/api/audit-logs/?page=2\", \"previous\": null, \"results\": [ { \"id\": 1, \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1, \"contact_name\": \"Jo\u00e3o Silva\" }, \"user\": { \"id\": 1, \"username\": \"agente1\" }, \"timestamp\": \"2024-01-01T10:00:00Z\" } ] }","title":"Logs de Auditoria"},{"location":"api/endpoints/#webhooks","text":"","title":"Webhooks"},{"location":"api/endpoints/#webhook-uazapievolution","text":"POST /webhook/evolution-uazapi/ Content-Type: application/json { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } }","title":"Webhook Uazapi/Evolution"},{"location":"api/endpoints/#webhook-evolution-legado","text":"POST /webhooks/evolution-uazapi/ Content-Type: application/json { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } }","title":"Webhook Evolution (Legado)"},{"location":"api/endpoints/#sistema","text":"","title":"Sistema"},{"location":"api/endpoints/#health-check","text":"GET /api/health/","title":"Health Check"},{"location":"api/endpoints/#changelog","text":"GET /api/changelog/","title":"Changelog"},{"location":"api/endpoints/#arquivos-uazapi","text":"GET /api/uazapi/file/{file_id}/ Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Arquivos Uazapi"},{"location":"api/endpoints/#websocket-events","text":"","title":"WebSocket Events"},{"location":"api/endpoints/#conexao","text":"const ws = new WebSocket('ws://localhost:8010/ws/dashboard/'); ws.onopen = function(event) { console.log('Conectado ao WebSocket'); }; ws.onmessage = function(event) { const data = JSON.parse(event.data); console.log('Mensagem recebida:', data); };","title":"Conex\u00e3o"},{"location":"api/endpoints/#eventos-disponiveis","text":"","title":"Eventos Dispon\u00edveis"},{"location":"api/endpoints/#chat","text":"// Nova mensagem { \"type\": \"chat_message\", \"data\": { \"conversation_id\": 1, \"message\": { \"id\": 1, \"content\": \"Nova mensagem\", \"sender\": \"customer\" } } } // Rea\u00e7\u00e3o a mensagem { \"type\": \"message_reaction\", \"data\": { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\" } } // Mensagem deletada { \"type\": \"message_deleted\", \"data\": { \"message_id\": 1 } }","title":"Chat"},{"location":"api/endpoints/#dashboard_1","text":"// M\u00e9tricas atualizadas { \"type\": \"dashboard_metrics\", \"data\": { \"total_conversations\": 100, \"open_conversations\": 25, \"average_satisfaction\": 4.2 } } // CSAT atualizado { \"type\": \"csat_update\", \"data\": { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente!\" } } // Log de auditoria { \"type\": \"audit_log\", \"data\": { \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1 } } }","title":"Dashboard"},{"location":"api/endpoints/#status-do-usuario","text":"// Status online/offline { \"type\": \"user_status\", \"data\": { \"user_id\": 1, \"status\": \"online\" } }","title":"Status do Usu\u00e1rio"},{"location":"api/endpoints/#autenticacao-websocket","text":"const ws = new WebSocket('ws://localhost:8010/ws/dashboard/?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...');","title":"Autentica\u00e7\u00e3o WebSocket"},{"location":"api/endpoints/#codigos-de-status","text":"","title":"C\u00f3digos de Status"},{"location":"api/endpoints/#sucesso","text":"200 : OK 201 : Criado 204 : Sem conte\u00fado","title":"Sucesso"},{"location":"api/endpoints/#erro-do-cliente","text":"400 : Requisi\u00e7\u00e3o inv\u00e1lida 401 : N\u00e3o autorizado 403 : Proibido 404 : N\u00e3o encontrado 422 : Entidade n\u00e3o process\u00e1vel","title":"Erro do Cliente"},{"location":"api/endpoints/#erro-do-servidor","text":"500 : Erro interno do servidor 502 : Bad Gateway 503 : Servi\u00e7o indispon\u00edvel","title":"Erro do Servidor"},{"location":"api/endpoints/#tratamento-de-erros","text":"","title":"Tratamento de Erros"},{"location":"api/endpoints/#formato-de-erro","text":"{ \"error\": \"ValidationError\", \"message\": \"Dados inv\u00e1lidos\", \"details\": { \"field\": \"conversation_id\", \"message\": \"Este campo \u00e9 obrigat\u00f3rio\" } }","title":"Formato de Erro"},{"location":"api/endpoints/#exemplos-de-erro","text":"{ \"error\": \"AuthenticationError\", \"message\": \"Token inv\u00e1lido ou expirado\" } { \"error\": \"PermissionError\", \"message\": \"Voc\u00ea n\u00e3o tem permiss\u00e3o para esta a\u00e7\u00e3o\" }","title":"Exemplos de Erro"},{"location":"api/endpoints/#guia-do-postman","text":"Para facilitar o teste da API, criamos um Guia Completo do Postman com: - Configura\u00e7\u00e3o passo a passo - Solu\u00e7\u00e3o de problemas comuns - Scripts \u00fateis - Collection pronta para importar","title":"Guia do Postman"},{"location":"api/endpoints/#proximos-passos","text":"Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o Guia do Postman - Configure o Postman WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks Uso - Aprenda a usar a interface","title":"Pr\u00f3ximos Passos"},{"location":"api/postman-guide/","text":"Guia de Uso do Postman com NioChat Este guia explica como configurar e usar o Postman para testar a API do NioChat. Configura\u00e7\u00e3o Inicial 1. Criar Nova Collection Abra o Postman Clique em \"New\" \u2192 \"Collection\" Nome: \"NioChat API\" Descri\u00e7\u00e3o: \"API do NioChat - Sistema de Atendimento WhatsApp\" 2. Configurar Vari\u00e1veis de Ambiente Clique em \"Environments\" \u2192 \"Create Environment\" Nome: \"NioChat Local\" ou \"NioChat Production\" Adicione as seguintes vari\u00e1veis: Variable Initial Value Current Value base_url http://localhost:8010 http://localhost:8010 token (deixar vazio) (ser\u00e1 preenchido ap\u00f3s login) Autentica\u00e7\u00e3o 1. Endpoint de Login M\u00e9todo: POST URL: {{base_url}}/api/auth/login/ Headers: Content-Type: application/json Body (raw JSON): { \"username\": \"seu_usuario\", \"password\": \"sua_senha\" } Script de Teste (Tests tab): if (pm.response.code === 200) { const response = pm.response.json(); pm.environment.set(\"token\", response.token); console.log(\"Token salvo:\", response.token); console.log(\"Resposta completa:\", response); } else { console.log(\"Erro no login:\", pm.response.text()); } Resposta Esperada: { \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" } 2. Configurar Authorization Global V\u00e1 para a aba \"Authorization\" da collection Type: \"Bearer Token\" Token: {{token}} OU configure manualmente em cada request: 1. V\u00e1 para a aba \"Authorization\" do request 2. Type: \"Custom\" 3. Key: Authorization 4. Value: Token {{token}} Endpoints Principais 1. Listar Contatos M\u00e9todo: GET URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Par\u00e2metros de Query (opcionais): - search : Busca por nome ou telefone - page : N\u00famero da p\u00e1gina (padr\u00e3o: 1) - page_size : Tamanho da p\u00e1gina (padr\u00e3o: 20) 2. Informa\u00e7\u00f5es do Usu\u00e1rio M\u00e9todo: GET URL: {{base_url}}/api/auth/me/ Headers: Authorization: Token {{token}} Resposta Esperada: { \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 } 3. Listar Contatos M\u00e9todo: GET URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Resposta Esperada: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"avatar\": \"https://example.com/avatar1.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 }, { \"id\": 2, \"name\": \"Maria Santos\", \"phone\": \"11988888888\", \"avatar\": \"https://example.com/avatar2.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T20:04:40.459828-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 } ] } 4. Detalhes do Contato M\u00e9todo: GET URL: {{base_url}}/api/contacts/{id}/ Headers: Authorization: Token {{token}} 5. Criar Contato M\u00e9todo: POST URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Content-Type: application/json Body (raw JSON): { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"email\": \"joao@exemplo.com\" } 6. Listar Conversas M\u00e9todo: GET URL: {{base_url}}/api/conversations/ Headers: Authorization: Token {{token}} 7. Timeout de Sess\u00e3o M\u00e9todo: POST URL: {{base_url}}/api/auth/session-timeout/ Headers: Authorization: Token {{token}} Content-Type: application/json Body (raw JSON): { \"timeout\": 60 } Resposta Esperada: { \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 } 7. Dashboard Stats M\u00e9todo: GET URL: {{base_url}}/api/dashboard/stats/ Headers: Authorization: Token {{token}} 8. An\u00e1lise de Conversas M\u00e9todo: GET URL: {{base_url}}/api/analysis/ Headers: Authorization: Token {{token}} 9. Listar Mensagens M\u00e9todo: GET URL: {{base_url}}/api/messages/ Headers: Authorization: Token {{token}} 10. Listar Provedores M\u00e9todo: GET URL: {{base_url}}/api/provedores/ Headers: Authorization: Token {{token}} Solu\u00e7\u00e3o de Problemas Erro 401 - N\u00e3o Autorizado Problema: \"As credenciais de autentica\u00e7\u00e3o n\u00e3o foram fornecidas\" Solu\u00e7\u00e3o: 1. Verifique se fez login primeiro 2. Verifique se o token est\u00e1 sendo enviado corretamente 3. Verifique o formato do header Authorization Formato Correto do Header: Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... \u274c Formato Incorreto: Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Script para Verificar Token: // Adicione este script na aba \"Tests\" de cada request const token = pm.environment.get(\"token\"); if (!token) { console.log(\"\u274c Token n\u00e3o encontrado. Fa\u00e7a login primeiro.\"); pm.test(\"Token exists\", () => { pm.expect(token).to.not.be.undefined; }); } else { console.log(\"\u2705 Token encontrado:\", token.substring(0, 20) + \"...\"); } Erro 403 - Proibido Solu\u00e7\u00e3o: 1. Verifique se o usu\u00e1rio tem permiss\u00e3o para acessar o endpoint 2. Verifique se est\u00e1 logado com o usu\u00e1rio correto 3. Verifique se o provedor est\u00e1 configurado corretamente Erro 400 - Requisi\u00e7\u00e3o Inv\u00e1lida Solu\u00e7\u00e3o: 1. Verifique se a URL est\u00e1 correta 2. Verifique se o endpoint existe 3. Verifique se o servidor est\u00e1 rodando 4. Para /api/auth/session-timeout/ : Inclua o body JSON com o par\u00e2metro timeout Exemplo de Body Correto: { \"timeout\": 60 } Erro Comum: { \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" } Erro 404 - N\u00e3o Encontrado Solu\u00e7\u00e3o: 1. Verifique se a URL est\u00e1 correta 2. Verifique se o endpoint existe 3. Verifique se o servidor est\u00e1 rodando Erro 500 - Erro Interno do Servidor Solu\u00e7\u00e3o: 1. Verifique os logs do servidor 2. Verifique se o banco de dados est\u00e1 funcionando 3. Verifique se todas as depend\u00eancias est\u00e3o instaladas Scripts \u00dateis 1. Verificar Status da Resposta pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); }); pm.test(\"Response has data\", () => { const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('data'); }); 2. Salvar ID do Contato if (pm.response.code === 201) { const response = pm.response.json(); pm.environment.set(\"contact_id\", response.id); console.log(\"ID do contato salvo:\", response.id); } 3. Verificar Estrutura da Resposta pm.test(\"Response structure is correct\", () => { const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('results'); pm.expect(jsonData).to.have.property('count'); pm.expect(jsonData).to.have.property('next'); pm.expect(jsonData).to.have.property('previous'); }); 4. Log de Debug console.log(\"Request URL:\", pm.request.url); console.log(\"Request Headers:\", pm.request.headers); console.log(\"Response Status:\", pm.response.status); console.log(\"Response Time:\", pm.response.responseTime + \"ms\"); Collection Completa Estrutura Recomendada: NioChat API/ \u251c\u2500\u2500 Authentication/ \u2502 \u251c\u2500\u2500 Login \u2502 \u251c\u2500\u2500 Logout \u2502 \u2514\u2500\u2500 Get User Info \u251c\u2500\u2500 Users/ \u2502 \u251c\u2500\u2500 List Users \u2502 \u251c\u2500\u2500 Get User \u2502 \u251c\u2500\u2500 Create User \u2502 \u2514\u2500\u2500 Update User \u251c\u2500\u2500 Contacts/ \u2502 \u251c\u2500\u2500 List Contacts \u2502 \u251c\u2500\u2500 Get Contact \u2502 \u251c\u2500\u2500 Create Contact \u2502 \u2514\u2500\u2500 Update Contact \u251c\u2500\u2500 Conversations/ \u2502 \u251c\u2500\u2500 List Conversations \u2502 \u251c\u2500\u2500 Get Conversation \u2502 \u2514\u2500\u2500 Create Conversation \u251c\u2500\u2500 Messages/ \u2502 \u251c\u2500\u2500 List Messages \u2502 \u251c\u2500\u2500 Send Message \u2502 \u2514\u2500\u2500 Get Message \u2514\u2500\u2500 Dashboard/ \u251c\u2500\u2500 Get Stats \u251c\u2500\u2500 Get CSAT Stats \u2514\u2500\u2500 Get Recent Feedbacks Configura\u00e7\u00e3o de Pre-request Scripts Para toda a Collection: // Verificar se o token existe const token = pm.environment.get(\"token\"); if (!token && pm.info.requestName !== \"Login\") { console.log(\"\u26a0\ufe0f Token n\u00e3o encontrado. Execute o request 'Login' primeiro.\"); } Para requests espec\u00edficos: // Adicionar timestamp pm.globals.set(\"timestamp\", new Date().toISOString()); Configura\u00e7\u00e3o de Tests Para requests de autentica\u00e7\u00e3o: pm.test(\"Login successful\", () => { pm.response.to.have.status(200); const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('token'); pm.expect(jsonData).to.have.property('user'); }); Para requests de dados: pm.test(\"Data retrieved successfully\", () => { pm.response.to.have.status(200); const jsonData = pm.response.json(); pm.expect(jsonData).to.be.an('object'); }); Exportar Collection Clique no menu da collection (tr\u00eas pontos) Selecione \"Export\" Escolha \"Collection v2.1\" Salve o arquivo JSON Compartilhe com a equipe Importar Collection Clique em \"Import\" Selecione o arquivo JSON da collection Confirme a importa\u00e7\u00e3o Configure as vari\u00e1veis de ambiente Pr\u00f3ximos Passos Endpoints - Explore todos os endpoints WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks Troubleshooting - Resolva problemas","title":"Guia de Uso do Postman com NioChat"},{"location":"api/postman-guide/#guia-de-uso-do-postman-com-niochat","text":"Este guia explica como configurar e usar o Postman para testar a API do NioChat.","title":"Guia de Uso do Postman com NioChat"},{"location":"api/postman-guide/#configuracao-inicial","text":"","title":"Configura\u00e7\u00e3o Inicial"},{"location":"api/postman-guide/#1-criar-nova-collection","text":"Abra o Postman Clique em \"New\" \u2192 \"Collection\" Nome: \"NioChat API\" Descri\u00e7\u00e3o: \"API do NioChat - Sistema de Atendimento WhatsApp\"","title":"1. Criar Nova Collection"},{"location":"api/postman-guide/#2-configurar-variaveis-de-ambiente","text":"Clique em \"Environments\" \u2192 \"Create Environment\" Nome: \"NioChat Local\" ou \"NioChat Production\" Adicione as seguintes vari\u00e1veis: Variable Initial Value Current Value base_url http://localhost:8010 http://localhost:8010 token (deixar vazio) (ser\u00e1 preenchido ap\u00f3s login)","title":"2. Configurar Vari\u00e1veis de Ambiente"},{"location":"api/postman-guide/#autenticacao","text":"","title":"Autentica\u00e7\u00e3o"},{"location":"api/postman-guide/#1-endpoint-de-login","text":"M\u00e9todo: POST URL: {{base_url}}/api/auth/login/ Headers: Content-Type: application/json Body (raw JSON): { \"username\": \"seu_usuario\", \"password\": \"sua_senha\" } Script de Teste (Tests tab): if (pm.response.code === 200) { const response = pm.response.json(); pm.environment.set(\"token\", response.token); console.log(\"Token salvo:\", response.token); console.log(\"Resposta completa:\", response); } else { console.log(\"Erro no login:\", pm.response.text()); } Resposta Esperada: { \"token\": \"afe94c2006465105312e24043b859e5c0628aadf\" }","title":"1. Endpoint de Login"},{"location":"api/postman-guide/#2-configurar-authorization-global","text":"V\u00e1 para a aba \"Authorization\" da collection Type: \"Bearer Token\" Token: {{token}} OU configure manualmente em cada request: 1. V\u00e1 para a aba \"Authorization\" do request 2. Type: \"Custom\" 3. Key: Authorization 4. Value: Token {{token}}","title":"2. Configurar Authorization Global"},{"location":"api/postman-guide/#endpoints-principais","text":"","title":"Endpoints Principais"},{"location":"api/postman-guide/#1-listar-contatos","text":"M\u00e9todo: GET URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Par\u00e2metros de Query (opcionais): - search : Busca por nome ou telefone - page : N\u00famero da p\u00e1gina (padr\u00e3o: 1) - page_size : Tamanho da p\u00e1gina (padr\u00e3o: 20)","title":"1. Listar Contatos"},{"location":"api/postman-guide/#2-informacoes-do-usuario","text":"M\u00e9todo: GET URL: {{base_url}}/api/auth/me/ Headers: Authorization: Token {{token}} Resposta Esperada: { \"id\": 3, \"username\": \"niochat\", \"email\": \"contatofinnybot@gmail.com.br\", \"first_name\": \"Nio\", \"last_name\": \"chat\", \"provedor_id\": 1, \"user_type\": \"admin\", \"permissions\": [], \"sound_notifications_enabled\": true, \"new_message_sound\": \"message_in_02.mp3\", \"new_conversation_sound\": \"chat_new_08.mp3\", \"session_timeout\": 60 }","title":"2. Informa\u00e7\u00f5es do Usu\u00e1rio"},{"location":"api/postman-guide/#3-listar-contatos","text":"M\u00e9todo: GET URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Resposta Esperada: { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"avatar\": \"https://example.com/avatar1.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T19:55:34.775872-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 }, { \"id\": 2, \"name\": \"Maria Santos\", \"phone\": \"11988888888\", \"avatar\": \"https://example.com/avatar2.jpg\", \"inbox\": 1, \"created_at\": \"2025-10-11T20:04:40.459828-03:00\", \"updated_at\": \"2025-10-11T20:06:34.300428-03:00\", \"is_online\": false, \"last_seen\": null, \"conversation_count\": 1, \"unread_messages\": 0 } ] }","title":"3. Listar Contatos"},{"location":"api/postman-guide/#4-detalhes-do-contato","text":"M\u00e9todo: GET URL: {{base_url}}/api/contacts/{id}/ Headers: Authorization: Token {{token}}","title":"4. Detalhes do Contato"},{"location":"api/postman-guide/#5-criar-contato","text":"M\u00e9todo: POST URL: {{base_url}}/api/contacts/ Headers: Authorization: Token {{token}} Content-Type: application/json Body (raw JSON): { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"11999999999\", \"email\": \"joao@exemplo.com\" }","title":"5. Criar Contato"},{"location":"api/postman-guide/#6-listar-conversas","text":"M\u00e9todo: GET URL: {{base_url}}/api/conversations/ Headers: Authorization: Token {{token}}","title":"6. Listar Conversas"},{"location":"api/postman-guide/#7-timeout-de-sessao","text":"M\u00e9todo: POST URL: {{base_url}}/api/auth/session-timeout/ Headers: Authorization: Token {{token}} Content-Type: application/json Body (raw JSON): { \"timeout\": 60 } Resposta Esperada: { \"message\": \"Timeout da sess\u00e3o atualizado com sucesso\", \"session_timeout\": 60 }","title":"7. Timeout de Sess\u00e3o"},{"location":"api/postman-guide/#7-dashboard-stats","text":"M\u00e9todo: GET URL: {{base_url}}/api/dashboard/stats/ Headers: Authorization: Token {{token}}","title":"7. Dashboard Stats"},{"location":"api/postman-guide/#8-analise-de-conversas","text":"M\u00e9todo: GET URL: {{base_url}}/api/analysis/ Headers: Authorization: Token {{token}}","title":"8. An\u00e1lise de Conversas"},{"location":"api/postman-guide/#9-listar-mensagens","text":"M\u00e9todo: GET URL: {{base_url}}/api/messages/ Headers: Authorization: Token {{token}}","title":"9. Listar Mensagens"},{"location":"api/postman-guide/#10-listar-provedores","text":"M\u00e9todo: GET URL: {{base_url}}/api/provedores/ Headers: Authorization: Token {{token}}","title":"10. Listar Provedores"},{"location":"api/postman-guide/#solucao-de-problemas","text":"","title":"Solu\u00e7\u00e3o de Problemas"},{"location":"api/postman-guide/#erro-401-nao-autorizado","text":"","title":"Erro 401 - N\u00e3o Autorizado"},{"location":"api/postman-guide/#problema-as-credenciais-de-autenticacao-nao-foram-fornecidas","text":"Solu\u00e7\u00e3o: 1. Verifique se fez login primeiro 2. Verifique se o token est\u00e1 sendo enviado corretamente 3. Verifique o formato do header Authorization","title":"Problema: \"As credenciais de autentica\u00e7\u00e3o n\u00e3o foram fornecidas\""},{"location":"api/postman-guide/#formato-correto-do-header","text":"Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... \u274c Formato Incorreto: Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...","title":"Formato Correto do Header:"},{"location":"api/postman-guide/#script-para-verificar-token","text":"// Adicione este script na aba \"Tests\" de cada request const token = pm.environment.get(\"token\"); if (!token) { console.log(\"\u274c Token n\u00e3o encontrado. Fa\u00e7a login primeiro.\"); pm.test(\"Token exists\", () => { pm.expect(token).to.not.be.undefined; }); } else { console.log(\"\u2705 Token encontrado:\", token.substring(0, 20) + \"...\"); }","title":"Script para Verificar Token:"},{"location":"api/postman-guide/#erro-403-proibido","text":"Solu\u00e7\u00e3o: 1. Verifique se o usu\u00e1rio tem permiss\u00e3o para acessar o endpoint 2. Verifique se est\u00e1 logado com o usu\u00e1rio correto 3. Verifique se o provedor est\u00e1 configurado corretamente","title":"Erro 403 - Proibido"},{"location":"api/postman-guide/#erro-400-requisicao-invalida","text":"Solu\u00e7\u00e3o: 1. Verifique se a URL est\u00e1 correta 2. Verifique se o endpoint existe 3. Verifique se o servidor est\u00e1 rodando 4. Para /api/auth/session-timeout/ : Inclua o body JSON com o par\u00e2metro timeout Exemplo de Body Correto: { \"timeout\": 60 } Erro Comum: { \"error\": \"Timeout da sess\u00e3o n\u00e3o fornecido\" }","title":"Erro 400 - Requisi\u00e7\u00e3o Inv\u00e1lida"},{"location":"api/postman-guide/#erro-404-nao-encontrado","text":"Solu\u00e7\u00e3o: 1. Verifique se a URL est\u00e1 correta 2. Verifique se o endpoint existe 3. Verifique se o servidor est\u00e1 rodando","title":"Erro 404 - N\u00e3o Encontrado"},{"location":"api/postman-guide/#erro-500-erro-interno-do-servidor","text":"Solu\u00e7\u00e3o: 1. Verifique os logs do servidor 2. Verifique se o banco de dados est\u00e1 funcionando 3. Verifique se todas as depend\u00eancias est\u00e3o instaladas","title":"Erro 500 - Erro Interno do Servidor"},{"location":"api/postman-guide/#scripts-uteis","text":"","title":"Scripts \u00dateis"},{"location":"api/postman-guide/#1-verificar-status-da-resposta","text":"pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); }); pm.test(\"Response has data\", () => { const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('data'); });","title":"1. Verificar Status da Resposta"},{"location":"api/postman-guide/#2-salvar-id-do-contato","text":"if (pm.response.code === 201) { const response = pm.response.json(); pm.environment.set(\"contact_id\", response.id); console.log(\"ID do contato salvo:\", response.id); }","title":"2. Salvar ID do Contato"},{"location":"api/postman-guide/#3-verificar-estrutura-da-resposta","text":"pm.test(\"Response structure is correct\", () => { const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('results'); pm.expect(jsonData).to.have.property('count'); pm.expect(jsonData).to.have.property('next'); pm.expect(jsonData).to.have.property('previous'); });","title":"3. Verificar Estrutura da Resposta"},{"location":"api/postman-guide/#4-log-de-debug","text":"console.log(\"Request URL:\", pm.request.url); console.log(\"Request Headers:\", pm.request.headers); console.log(\"Response Status:\", pm.response.status); console.log(\"Response Time:\", pm.response.responseTime + \"ms\");","title":"4. Log de Debug"},{"location":"api/postman-guide/#collection-completa","text":"","title":"Collection Completa"},{"location":"api/postman-guide/#estrutura-recomendada","text":"NioChat API/ \u251c\u2500\u2500 Authentication/ \u2502 \u251c\u2500\u2500 Login \u2502 \u251c\u2500\u2500 Logout \u2502 \u2514\u2500\u2500 Get User Info \u251c\u2500\u2500 Users/ \u2502 \u251c\u2500\u2500 List Users \u2502 \u251c\u2500\u2500 Get User \u2502 \u251c\u2500\u2500 Create User \u2502 \u2514\u2500\u2500 Update User \u251c\u2500\u2500 Contacts/ \u2502 \u251c\u2500\u2500 List Contacts \u2502 \u251c\u2500\u2500 Get Contact \u2502 \u251c\u2500\u2500 Create Contact \u2502 \u2514\u2500\u2500 Update Contact \u251c\u2500\u2500 Conversations/ \u2502 \u251c\u2500\u2500 List Conversations \u2502 \u251c\u2500\u2500 Get Conversation \u2502 \u2514\u2500\u2500 Create Conversation \u251c\u2500\u2500 Messages/ \u2502 \u251c\u2500\u2500 List Messages \u2502 \u251c\u2500\u2500 Send Message \u2502 \u2514\u2500\u2500 Get Message \u2514\u2500\u2500 Dashboard/ \u251c\u2500\u2500 Get Stats \u251c\u2500\u2500 Get CSAT Stats \u2514\u2500\u2500 Get Recent Feedbacks","title":"Estrutura Recomendada:"},{"location":"api/postman-guide/#configuracao-de-pre-request-scripts","text":"","title":"Configura\u00e7\u00e3o de Pre-request Scripts"},{"location":"api/postman-guide/#para-toda-a-collection","text":"// Verificar se o token existe const token = pm.environment.get(\"token\"); if (!token && pm.info.requestName !== \"Login\") { console.log(\"\u26a0\ufe0f Token n\u00e3o encontrado. Execute o request 'Login' primeiro.\"); }","title":"Para toda a Collection:"},{"location":"api/postman-guide/#para-requests-especificos","text":"// Adicionar timestamp pm.globals.set(\"timestamp\", new Date().toISOString());","title":"Para requests espec\u00edficos:"},{"location":"api/postman-guide/#configuracao-de-tests","text":"","title":"Configura\u00e7\u00e3o de Tests"},{"location":"api/postman-guide/#para-requests-de-autenticacao","text":"pm.test(\"Login successful\", () => { pm.response.to.have.status(200); const jsonData = pm.response.json(); pm.expect(jsonData).to.have.property('token'); pm.expect(jsonData).to.have.property('user'); });","title":"Para requests de autentica\u00e7\u00e3o:"},{"location":"api/postman-guide/#para-requests-de-dados","text":"pm.test(\"Data retrieved successfully\", () => { pm.response.to.have.status(200); const jsonData = pm.response.json(); pm.expect(jsonData).to.be.an('object'); });","title":"Para requests de dados:"},{"location":"api/postman-guide/#exportar-collection","text":"Clique no menu da collection (tr\u00eas pontos) Selecione \"Export\" Escolha \"Collection v2.1\" Salve o arquivo JSON Compartilhe com a equipe","title":"Exportar Collection"},{"location":"api/postman-guide/#importar-collection","text":"Clique em \"Import\" Selecione o arquivo JSON da collection Confirme a importa\u00e7\u00e3o Configure as vari\u00e1veis de ambiente","title":"Importar Collection"},{"location":"api/postman-guide/#proximos-passos","text":"Endpoints - Explore todos os endpoints WebSocket - Aprenda sobre WebSocket Webhooks - Aprenda sobre webhooks Troubleshooting - Resolva problemas","title":"Pr\u00f3ximos Passos"},{"location":"api/webhooks/","text":"Webhooks O NioChat utiliza webhooks para receber notifica\u00e7\u00f5es em tempo real de eventos do WhatsApp. Este documento explica como implementar e usar webhooks. Webhook Uazapi/Evolution URL do Webhook POST /webhook/evolution-uazapi/ POST /webhooks/evolution-uazapi/ Estrutura da Requisi\u00e7\u00e3o { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\" } } } Eventos Suportados Mensagem de Texto { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\", \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } } Mensagem de Imagem { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Imagem enviada\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"image\", \"media\": { \"url\": \"https://example.com/image.jpg\", \"filename\": \"image.jpg\", \"size\": 1024 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } } Mensagem de \u00c1udio { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"\u00c1udio enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"audio\", \"media\": { \"url\": \"https://example.com/audio.ogg\", \"filename\": \"audio.ogg\", \"size\": 2048, \"duration\": 30 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } } Mensagem de V\u00eddeo { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"V\u00eddeo enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"video\", \"media\": { \"url\": \"https://example.com/video.mp4\", \"filename\": \"video.mp4\", \"size\": 5120 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } } Mensagem de Documento { \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Documento enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"document\", \"media\": { \"url\": \"https://example.com/document.pdf\", \"filename\": \"document.pdf\", \"size\": 10240 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } } Rea\u00e7\u00e3o a Mensagem { \"event\": \"reaction\", \"data\": { \"message_id\": \"message_id\", \"reaction\": \"\ud83d\udc4d\", \"from\": \"+5511999999999\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } Mensagem Deletada { \"event\": \"message_deleted\", \"data\": { \"message_id\": \"message_id\", \"from\": \"+5511999999999\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } Status de Entrega { \"event\": \"delivery_status\", \"data\": { \"message_id\": \"message_id\", \"status\": \"delivered\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } Status de Leitura { \"event\": \"read_status\", \"data\": { \"message_id\": \"message_id\", \"status\": \"read\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } Implementa\u00e7\u00e3o do Webhook Python (Django) from django.http import JsonResponse from django.views.decorators.csrf import csrf_exempt from django.views.decorators.http import require_http_methods import json import logging logger = logging.getLogger(__name__) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) event = data.get('event') message_data = data.get('data', {}).get('message', {}) logger.info(f\"Webhook recebido: {event}\") if event == 'message': process_message(message_data) elif event == 'reaction': process_reaction(data.get('data', {})) elif event == 'message_deleted': process_message_deleted(data.get('data', {})) elif event == 'delivery_status': process_delivery_status(data.get('data', {})) elif event == 'read_status': process_read_status(data.get('data', {})) return JsonResponse({'status': 'success'}) except Exception as e: logger.error(f\"Erro no webhook: {e}\") return JsonResponse({'status': 'error', 'message': str(e)}, status=500) def process_message(message_data): \"\"\"Processa mensagem recebida\"\"\" message_id = message_data.get('id') from_number = message_data.get('from') to_number = message_data.get('to') content = message_data.get('content') message_type = message_data.get('message_type', 'text') # Processar mensagem logger.info(f\"Processando mensagem {message_id} de {from_number}\") # Salvar no banco de dados # Enviar para IA # Atualizar dashboard via WebSocket def process_reaction(reaction_data): \"\"\"Processa rea\u00e7\u00e3o a mensagem\"\"\" message_id = reaction_data.get('message_id') reaction = reaction_data.get('reaction') logger.info(f\"Rea\u00e7\u00e3o {reaction} na mensagem {message_id}\") def process_message_deleted(deleted_data): \"\"\"Processa mensagem deletada\"\"\" message_id = deleted_data.get('message_id') logger.info(f\"Mensagem {message_id} foi deletada\") def process_delivery_status(status_data): \"\"\"Processa status de entrega\"\"\" message_id = status_data.get('message_id') status = status_data.get('status') logger.info(f\"Status de entrega da mensagem {message_id}: {status}\") def process_read_status(status_data): \"\"\"Processa status de leitura\"\"\" message_id = status_data.get('message_id') status = status_data.get('status') logger.info(f\"Status de leitura da mensagem {message_id}: {status}\") Node.js (Express) const express = require('express'); const app = express(); app.use(express.json()); app.post('/webhook/evolution-uazapi', (req, res) => { try { const { event, data } = req.body; const message = data?.message; console.log(`Webhook recebido: ${event}`); switch (event) { case 'message': processMessage(message); break; case 'reaction': processReaction(data); break; case 'message_deleted': processMessageDeleted(data); break; case 'delivery_status': processDeliveryStatus(data); break; case 'read_status': processReadStatus(data); break; default: console.log(`Evento desconhecido: ${event}`); } res.json({ status: 'success' }); } catch (error) { console.error('Erro no webhook:', error); res.status(500).json({ status: 'error', message: error.message }); } }); function processMessage(message) { const { id, from, to, content, message_type } = message; console.log(`Processando mensagem ${id} de ${from}`); // Processar mensagem // Salvar no banco de dados // Enviar para IA // Atualizar dashboard via WebSocket } function processReaction(data) { const { message_id, reaction } = data; console.log(`Rea\u00e7\u00e3o ${reaction} na mensagem ${message_id}`); } function processMessageDeleted(data) { const { message_id } = data; console.log(`Mensagem ${message_id} foi deletada`); } function processDeliveryStatus(data) { const { message_id, status } = data; console.log(`Status de entrega da mensagem ${message_id}: ${status}`); } function processReadStatus(data) { const { message_id, status } = data; console.log(`Status de leitura da mensagem ${message_id}: ${status}`); } app.listen(3000, () => { console.log('Servidor rodando na porta 3000'); }); PHP <?php header('Content-Type: application/json'); $input = file_get_contents('php://input'); $data = json_decode($input, true); if (!$data) { http_response_code(400); echo json_encode(['status' => 'error', 'message' => 'Dados inv\u00e1lidos']); exit; } $event = $data['event'] ?? ''; $messageData = $data['data']['message'] ?? []; error_log(\"Webhook recebido: $event\"); switch ($event) { case 'message': processMessage($messageData); break; case 'reaction': processReaction($data['data']); break; case 'message_deleted': processMessageDeleted($data['data']); break; case 'delivery_status': processDeliveryStatus($data['data']); break; case 'read_status': processReadStatus($data['data']); break; default: error_log(\"Evento desconhecido: $event\"); } function processMessage($message) { $id = $message['id'] ?? ''; $from = $message['from'] ?? ''; $content = $message['content'] ?? ''; $messageType = $message['message_type'] ?? 'text'; error_log(\"Processando mensagem $id de $from\"); // Processar mensagem // Salvar no banco de dados // Enviar para IA // Atualizar dashboard via WebSocket } function processReaction($data) { $messageId = $data['message_id'] ?? ''; $reaction = $data['reaction'] ?? ''; error_log(\"Rea\u00e7\u00e3o $reaction na mensagem $messageId\"); } function processMessageDeleted($data) { $messageId = $data['message_id'] ?? ''; error_log(\"Mensagem $messageId foi deletada\"); } function processDeliveryStatus($data) { $messageId = $data['message_id'] ?? ''; $status = $data['status'] ?? ''; error_log(\"Status de entrega da mensagem $messageId: $status\"); } function processReadStatus($data) { $messageId = $data['message_id'] ?? ''; $status = $data['status'] ?? ''; error_log(\"Status de leitura da mensagem $messageId: $status\"); } echo json_encode(['status' => 'success']); ?> Configura\u00e7\u00e3o do Webhook Uazapi/Evolution { \"webhook\": { \"url\": \"https://seu-dominio.com/webhook/evolution-uazapi/\", \"events\": [ \"message\", \"reaction\", \"message_deleted\", \"delivery_status\", \"read_status\" ], \"headers\": { \"Authorization\": \"Bearer seu_token_aqui\" } } } Configura\u00e7\u00e3o no NioChat # settings.py WEBHOOK_SECRET = 'seu_secret_aqui' WEBHOOK_TIMEOUT = 30 WEBHOOK_RETRY_ATTEMPTS = 3 Valida\u00e7\u00e3o de Webhook Verifica\u00e7\u00e3o de Assinatura import hmac import hashlib def verify_webhook_signature(payload, signature, secret): \"\"\"Verifica a assinatura do webhook\"\"\" expected_signature = hmac.new( secret.encode(), payload, hashlib.sha256 ).hexdigest() return hmac.compare_digest(signature, expected_signature) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): # Verificar assinatura signature = request.headers.get('X-Signature') if not verify_webhook_signature(request.body, signature, WEBHOOK_SECRET): return JsonResponse({'status': 'error', 'message': 'Assinatura inv\u00e1lida'}, status=401) # Processar webhook # ... Rate Limiting from django.core.cache import cache from django.http import JsonResponse def rate_limit_webhook(request): \"\"\"Aplica rate limiting ao webhook\"\"\" client_ip = request.META.get('REMOTE_ADDR') cache_key = f\"webhook_rate_limit_{client_ip}\" # Limite de 100 requisi\u00e7\u00f5es por minuto current_count = cache.get(cache_key, 0) if current_count >= 100: return JsonResponse({'status': 'error', 'message': 'Rate limit exceeded'}, status=429) cache.set(cache_key, current_count + 1, 60) # 60 segundos return None Tratamento de Erros Retry Autom\u00e1tico import time from django.core.cache import cache def process_webhook_with_retry(data, max_retries=3): \"\"\"Processa webhook com retry autom\u00e1tico\"\"\" for attempt in range(max_retries): try: # Processar webhook process_webhook(data) return True except Exception as e: if attempt == max_retries - 1: # \u00daltima tentativa falhou logger.error(f\"Webhook falhou ap\u00f3s {max_retries} tentativas: {e}\") return False else: # Aguardar antes da pr\u00f3xima tentativa time.sleep(2 ** attempt) # Backoff exponencial return False Logging de Erros import logging logger = logging.getLogger(__name__) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) logger.info(f\"Webhook recebido: {data.get('event')}\") # Processar webhook process_webhook(data) return JsonResponse({'status': 'success'}) except json.JSONDecodeError as e: logger.error(f\"Erro ao decodificar JSON: {e}\") return JsonResponse({'status': 'error', 'message': 'JSON inv\u00e1lido'}, status=400) except Exception as e: logger.error(f\"Erro no webhook: {e}\", exc_info=True) return JsonResponse({'status': 'error', 'message': 'Erro interno'}, status=500) Monitoramento M\u00e9tricas de Webhook from django.core.cache import cache from django.utils import timezone def track_webhook_metrics(event, status): \"\"\"Rastreia m\u00e9tricas do webhook\"\"\" timestamp = timezone.now() # Incrementar contador de eventos cache_key = f\"webhook_events_{event}_{status}\" cache.incr(cache_key, 1) cache.expire(cache_key, 3600) # 1 hora # Log de m\u00e9tricas logger.info(f\"Webhook metric: {event} - {status} at {timestamp}\") @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) event = data.get('event') # Processar webhook process_webhook(data) # Rastrear m\u00e9tricas track_webhook_metrics(event, 'success') return JsonResponse({'status': 'success'}) except Exception as e: # Rastrear m\u00e9tricas de erro track_webhook_metrics('error', 'failed') raise e Pr\u00f3ximos Passos Endpoints - Explore todos os endpoints da API WebSocket - Aprenda sobre WebSocket Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o","title":"Webhooks"},{"location":"api/webhooks/#webhooks","text":"O NioChat utiliza webhooks para receber notifica\u00e7\u00f5es em tempo real de eventos do WhatsApp. Este documento explica como implementar e usar webhooks.","title":"Webhooks"},{"location":"api/webhooks/#webhook-uazapievolution","text":"","title":"Webhook Uazapi/Evolution"},{"location":"api/webhooks/#url-do-webhook","text":"POST /webhook/evolution-uazapi/ POST /webhooks/evolution-uazapi/","title":"URL do Webhook"},{"location":"api/webhooks/#estrutura-da-requisicao","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\" } } }","title":"Estrutura da Requisi\u00e7\u00e3o"},{"location":"api/webhooks/#eventos-suportados","text":"","title":"Eventos Suportados"},{"location":"api/webhooks/#mensagem-de-texto","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Ol\u00e1, como posso ajudar?\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\", \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } }","title":"Mensagem de Texto"},{"location":"api/webhooks/#mensagem-de-imagem","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Imagem enviada\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"image\", \"media\": { \"url\": \"https://example.com/image.jpg\", \"filename\": \"image.jpg\", \"size\": 1024 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } }","title":"Mensagem de Imagem"},{"location":"api/webhooks/#mensagem-de-audio","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"\u00c1udio enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"audio\", \"media\": { \"url\": \"https://example.com/audio.ogg\", \"filename\": \"audio.ogg\", \"size\": 2048, \"duration\": 30 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } }","title":"Mensagem de \u00c1udio"},{"location":"api/webhooks/#mensagem-de-video","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"V\u00eddeo enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"video\", \"media\": { \"url\": \"https://example.com/video.mp4\", \"filename\": \"video.mp4\", \"size\": 5120 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } }","title":"Mensagem de V\u00eddeo"},{"location":"api/webhooks/#mensagem-de-documento","text":"{ \"event\": \"message\", \"data\": { \"message\": { \"id\": \"message_id\", \"from\": \"+5511999999999\", \"to\": \"+5511888888888\", \"content\": \"Documento enviado\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"document\", \"media\": { \"url\": \"https://example.com/document.pdf\", \"filename\": \"document.pdf\", \"size\": 10240 }, \"sender\": { \"name\": \"Jo\u00e3o Silva\", \"phone\": \"+5511999999999\" } } } }","title":"Mensagem de Documento"},{"location":"api/webhooks/#reacao-a-mensagem","text":"{ \"event\": \"reaction\", \"data\": { \"message_id\": \"message_id\", \"reaction\": \"\ud83d\udc4d\", \"from\": \"+5511999999999\", \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"Rea\u00e7\u00e3o a Mensagem"},{"location":"api/webhooks/#mensagem-deletada","text":"{ \"event\": \"message_deleted\", \"data\": { \"message_id\": \"message_id\", \"from\": \"+5511999999999\", \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"Mensagem Deletada"},{"location":"api/webhooks/#status-de-entrega","text":"{ \"event\": \"delivery_status\", \"data\": { \"message_id\": \"message_id\", \"status\": \"delivered\", \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"Status de Entrega"},{"location":"api/webhooks/#status-de-leitura","text":"{ \"event\": \"read_status\", \"data\": { \"message_id\": \"message_id\", \"status\": \"read\", \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"Status de Leitura"},{"location":"api/webhooks/#implementacao-do-webhook","text":"","title":"Implementa\u00e7\u00e3o do Webhook"},{"location":"api/webhooks/#python-django","text":"from django.http import JsonResponse from django.views.decorators.csrf import csrf_exempt from django.views.decorators.http import require_http_methods import json import logging logger = logging.getLogger(__name__) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) event = data.get('event') message_data = data.get('data', {}).get('message', {}) logger.info(f\"Webhook recebido: {event}\") if event == 'message': process_message(message_data) elif event == 'reaction': process_reaction(data.get('data', {})) elif event == 'message_deleted': process_message_deleted(data.get('data', {})) elif event == 'delivery_status': process_delivery_status(data.get('data', {})) elif event == 'read_status': process_read_status(data.get('data', {})) return JsonResponse({'status': 'success'}) except Exception as e: logger.error(f\"Erro no webhook: {e}\") return JsonResponse({'status': 'error', 'message': str(e)}, status=500) def process_message(message_data): \"\"\"Processa mensagem recebida\"\"\" message_id = message_data.get('id') from_number = message_data.get('from') to_number = message_data.get('to') content = message_data.get('content') message_type = message_data.get('message_type', 'text') # Processar mensagem logger.info(f\"Processando mensagem {message_id} de {from_number}\") # Salvar no banco de dados # Enviar para IA # Atualizar dashboard via WebSocket def process_reaction(reaction_data): \"\"\"Processa rea\u00e7\u00e3o a mensagem\"\"\" message_id = reaction_data.get('message_id') reaction = reaction_data.get('reaction') logger.info(f\"Rea\u00e7\u00e3o {reaction} na mensagem {message_id}\") def process_message_deleted(deleted_data): \"\"\"Processa mensagem deletada\"\"\" message_id = deleted_data.get('message_id') logger.info(f\"Mensagem {message_id} foi deletada\") def process_delivery_status(status_data): \"\"\"Processa status de entrega\"\"\" message_id = status_data.get('message_id') status = status_data.get('status') logger.info(f\"Status de entrega da mensagem {message_id}: {status}\") def process_read_status(status_data): \"\"\"Processa status de leitura\"\"\" message_id = status_data.get('message_id') status = status_data.get('status') logger.info(f\"Status de leitura da mensagem {message_id}: {status}\")","title":"Python (Django)"},{"location":"api/webhooks/#nodejs-express","text":"const express = require('express'); const app = express(); app.use(express.json()); app.post('/webhook/evolution-uazapi', (req, res) => { try { const { event, data } = req.body; const message = data?.message; console.log(`Webhook recebido: ${event}`); switch (event) { case 'message': processMessage(message); break; case 'reaction': processReaction(data); break; case 'message_deleted': processMessageDeleted(data); break; case 'delivery_status': processDeliveryStatus(data); break; case 'read_status': processReadStatus(data); break; default: console.log(`Evento desconhecido: ${event}`); } res.json({ status: 'success' }); } catch (error) { console.error('Erro no webhook:', error); res.status(500).json({ status: 'error', message: error.message }); } }); function processMessage(message) { const { id, from, to, content, message_type } = message; console.log(`Processando mensagem ${id} de ${from}`); // Processar mensagem // Salvar no banco de dados // Enviar para IA // Atualizar dashboard via WebSocket } function processReaction(data) { const { message_id, reaction } = data; console.log(`Rea\u00e7\u00e3o ${reaction} na mensagem ${message_id}`); } function processMessageDeleted(data) { const { message_id } = data; console.log(`Mensagem ${message_id} foi deletada`); } function processDeliveryStatus(data) { const { message_id, status } = data; console.log(`Status de entrega da mensagem ${message_id}: ${status}`); } function processReadStatus(data) { const { message_id, status } = data; console.log(`Status de leitura da mensagem ${message_id}: ${status}`); } app.listen(3000, () => { console.log('Servidor rodando na porta 3000'); });","title":"Node.js (Express)"},{"location":"api/webhooks/#php","text":"<?php header('Content-Type: application/json'); $input = file_get_contents('php://input'); $data = json_decode($input, true); if (!$data) { http_response_code(400); echo json_encode(['status' => 'error', 'message' => 'Dados inv\u00e1lidos']); exit; } $event = $data['event'] ?? ''; $messageData = $data['data']['message'] ?? []; error_log(\"Webhook recebido: $event\"); switch ($event) { case 'message': processMessage($messageData); break; case 'reaction': processReaction($data['data']); break; case 'message_deleted': processMessageDeleted($data['data']); break; case 'delivery_status': processDeliveryStatus($data['data']); break; case 'read_status': processReadStatus($data['data']); break; default: error_log(\"Evento desconhecido: $event\"); } function processMessage($message) { $id = $message['id'] ?? ''; $from = $message['from'] ?? ''; $content = $message['content'] ?? ''; $messageType = $message['message_type'] ?? 'text'; error_log(\"Processando mensagem $id de $from\"); // Processar mensagem // Salvar no banco de dados // Enviar para IA // Atualizar dashboard via WebSocket } function processReaction($data) { $messageId = $data['message_id'] ?? ''; $reaction = $data['reaction'] ?? ''; error_log(\"Rea\u00e7\u00e3o $reaction na mensagem $messageId\"); } function processMessageDeleted($data) { $messageId = $data['message_id'] ?? ''; error_log(\"Mensagem $messageId foi deletada\"); } function processDeliveryStatus($data) { $messageId = $data['message_id'] ?? ''; $status = $data['status'] ?? ''; error_log(\"Status de entrega da mensagem $messageId: $status\"); } function processReadStatus($data) { $messageId = $data['message_id'] ?? ''; $status = $data['status'] ?? ''; error_log(\"Status de leitura da mensagem $messageId: $status\"); } echo json_encode(['status' => 'success']); ?>","title":"PHP"},{"location":"api/webhooks/#configuracao-do-webhook","text":"","title":"Configura\u00e7\u00e3o do Webhook"},{"location":"api/webhooks/#uazapievolution","text":"{ \"webhook\": { \"url\": \"https://seu-dominio.com/webhook/evolution-uazapi/\", \"events\": [ \"message\", \"reaction\", \"message_deleted\", \"delivery_status\", \"read_status\" ], \"headers\": { \"Authorization\": \"Bearer seu_token_aqui\" } } }","title":"Uazapi/Evolution"},{"location":"api/webhooks/#configuracao-no-niochat","text":"# settings.py WEBHOOK_SECRET = 'seu_secret_aqui' WEBHOOK_TIMEOUT = 30 WEBHOOK_RETRY_ATTEMPTS = 3","title":"Configura\u00e7\u00e3o no NioChat"},{"location":"api/webhooks/#validacao-de-webhook","text":"","title":"Valida\u00e7\u00e3o de Webhook"},{"location":"api/webhooks/#verificacao-de-assinatura","text":"import hmac import hashlib def verify_webhook_signature(payload, signature, secret): \"\"\"Verifica a assinatura do webhook\"\"\" expected_signature = hmac.new( secret.encode(), payload, hashlib.sha256 ).hexdigest() return hmac.compare_digest(signature, expected_signature) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): # Verificar assinatura signature = request.headers.get('X-Signature') if not verify_webhook_signature(request.body, signature, WEBHOOK_SECRET): return JsonResponse({'status': 'error', 'message': 'Assinatura inv\u00e1lida'}, status=401) # Processar webhook # ...","title":"Verifica\u00e7\u00e3o de Assinatura"},{"location":"api/webhooks/#rate-limiting","text":"from django.core.cache import cache from django.http import JsonResponse def rate_limit_webhook(request): \"\"\"Aplica rate limiting ao webhook\"\"\" client_ip = request.META.get('REMOTE_ADDR') cache_key = f\"webhook_rate_limit_{client_ip}\" # Limite de 100 requisi\u00e7\u00f5es por minuto current_count = cache.get(cache_key, 0) if current_count >= 100: return JsonResponse({'status': 'error', 'message': 'Rate limit exceeded'}, status=429) cache.set(cache_key, current_count + 1, 60) # 60 segundos return None","title":"Rate Limiting"},{"location":"api/webhooks/#tratamento-de-erros","text":"","title":"Tratamento de Erros"},{"location":"api/webhooks/#retry-automatico","text":"import time from django.core.cache import cache def process_webhook_with_retry(data, max_retries=3): \"\"\"Processa webhook com retry autom\u00e1tico\"\"\" for attempt in range(max_retries): try: # Processar webhook process_webhook(data) return True except Exception as e: if attempt == max_retries - 1: # \u00daltima tentativa falhou logger.error(f\"Webhook falhou ap\u00f3s {max_retries} tentativas: {e}\") return False else: # Aguardar antes da pr\u00f3xima tentativa time.sleep(2 ** attempt) # Backoff exponencial return False","title":"Retry Autom\u00e1tico"},{"location":"api/webhooks/#logging-de-erros","text":"import logging logger = logging.getLogger(__name__) @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) logger.info(f\"Webhook recebido: {data.get('event')}\") # Processar webhook process_webhook(data) return JsonResponse({'status': 'success'}) except json.JSONDecodeError as e: logger.error(f\"Erro ao decodificar JSON: {e}\") return JsonResponse({'status': 'error', 'message': 'JSON inv\u00e1lido'}, status=400) except Exception as e: logger.error(f\"Erro no webhook: {e}\", exc_info=True) return JsonResponse({'status': 'error', 'message': 'Erro interno'}, status=500)","title":"Logging de Erros"},{"location":"api/webhooks/#monitoramento","text":"","title":"Monitoramento"},{"location":"api/webhooks/#metricas-de-webhook","text":"from django.core.cache import cache from django.utils import timezone def track_webhook_metrics(event, status): \"\"\"Rastreia m\u00e9tricas do webhook\"\"\" timestamp = timezone.now() # Incrementar contador de eventos cache_key = f\"webhook_events_{event}_{status}\" cache.incr(cache_key, 1) cache.expire(cache_key, 3600) # 1 hora # Log de m\u00e9tricas logger.info(f\"Webhook metric: {event} - {status} at {timestamp}\") @csrf_exempt @require_http_methods([\"POST\"]) def webhook_evolution_uazapi(request): try: data = json.loads(request.body) event = data.get('event') # Processar webhook process_webhook(data) # Rastrear m\u00e9tricas track_webhook_metrics(event, 'success') return JsonResponse({'status': 'success'}) except Exception as e: # Rastrear m\u00e9tricas de erro track_webhook_metrics('error', 'failed') raise e","title":"M\u00e9tricas de Webhook"},{"location":"api/webhooks/#proximos-passos","text":"Endpoints - Explore todos os endpoints da API WebSocket - Aprenda sobre WebSocket Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o","title":"Pr\u00f3ximos Passos"},{"location":"api/websocket/","text":"WebSocket O NioChat utiliza WebSocket para comunica\u00e7\u00e3o em tempo real entre o frontend e backend. Este documento explica como implementar e usar WebSocket. Conex\u00e3o URL de Conex\u00e3o const ws = new WebSocket('ws://localhost:8010/ws/dashboard/'); Com Autentica\u00e7\u00e3o const token = 'seu_token_aqui'; const ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); Implementa\u00e7\u00e3o JavaScript Classe WebSocket class NioChatWebSocket { constructor(token) { this.token = token; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = 5; this.reconnectInterval = 5000; this.listeners = {}; } connect() { const url = `ws://localhost:8010/ws/dashboard/?token=${this.token}`; this.ws = new WebSocket(url); this.ws.onopen = (event) => { console.log('WebSocket conectado'); this.reconnectAttempts = 0; this.emit('connected', event); }; this.ws.onmessage = (event) => { try { const data = JSON.parse(event.data); this.handleMessage(data); } catch (error) { console.error('Erro ao processar mensagem:', error); } }; this.ws.onclose = (event) => { console.log('WebSocket desconectado:', event.code, event.reason); this.emit('disconnected', event); this.attemptReconnect(); }; this.ws.onerror = (error) => { console.error('Erro no WebSocket:', error); this.emit('error', error); }; } handleMessage(data) { const { type, data: messageData } = data; switch (type) { case 'chat_message': this.emit('chat_message', messageData); break; case 'message_reaction': this.emit('message_reaction', messageData); break; case 'message_deleted': this.emit('message_deleted', messageData); break; case 'dashboard_metrics': this.emit('dashboard_metrics', messageData); break; case 'csat_update': this.emit('csat_update', messageData); break; case 'audit_log': this.emit('audit_log', messageData); break; case 'user_status': this.emit('user_status', messageData); break; default: console.log('Tipo de mensagem desconhecido:', type); } } attemptReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Tentativa de reconex\u00e3o ${this.reconnectAttempts}/${this.maxReconnectAttempts}`); setTimeout(() => { this.connect(); }, this.reconnectInterval); } else { console.error('M\u00e1ximo de tentativas de reconex\u00e3o atingido'); this.emit('reconnect_failed'); } } send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } else { console.error('WebSocket n\u00e3o est\u00e1 conectado'); } } on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); } off(event, callback) { if (this.listeners[event]) { this.listeners[event] = this.listeners[event].filter(cb => cb !== callback); } } emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } } // Uso const ws = new NioChatWebSocket('seu_token_aqui'); // Conectar ws.connect(); // Escutar eventos ws.on('chat_message', (data) => { console.log('Nova mensagem:', data); }); ws.on('dashboard_metrics', (data) => { console.log('M\u00e9tricas atualizadas:', data); }); ws.on('csat_update', (data) => { console.log('CSAT atualizado:', data); }); ws.on('connected', () => { console.log('Conectado ao WebSocket'); }); ws.on('disconnected', () => { console.log('Desconectado do WebSocket'); }); ws.on('error', (error) => { console.error('Erro no WebSocket:', error); }); Eventos Dispon\u00edveis Chat Nova Mensagem { \"type\": \"chat_message\", \"data\": { \"conversation_id\": 1, \"message\": { \"id\": 1, \"content\": \"Nova mensagem\", \"sender\": \"customer\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\" } } } Rea\u00e7\u00e3o a Mensagem { \"type\": \"message_reaction\", \"data\": { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\", \"user_id\": 1 } } Mensagem Deletada { \"type\": \"message_deleted\", \"data\": { \"message_id\": 1, \"deleted_by\": 1 } } Dashboard M\u00e9tricas Atualizadas { \"type\": \"dashboard_metrics\", \"data\": { \"total_conversations\": 100, \"open_conversations\": 25, \"closed_conversations\": 75, \"average_satisfaction\": 4.2, \"resolution_rate\": 0.85, \"response_time\": 120 } } CSAT Atualizado { \"type\": \"csat_update\", \"data\": { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente atendimento!\", \"contact_name\": \"Jo\u00e3o Silva\", \"timestamp\": \"2024-01-01T10:00:00Z\" } } Log de Auditoria { \"type\": \"audit_log\", \"data\": { \"id\": 1, \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1, \"contact_name\": \"Jo\u00e3o Silva\" }, \"user\": { \"id\": 1, \"username\": \"agente1\" }, \"timestamp\": \"2024-01-01T10:00:00Z\" } } Status do Usu\u00e1rio Usu\u00e1rio Online/Offline { \"type\": \"user_status\", \"data\": { \"user_id\": 1, \"status\": \"online\", \"last_seen\": \"2024-01-01T10:00:00Z\" } } Implementa\u00e7\u00e3o React Hook useWebSocket import { useState, useEffect, useCallback } from 'react'; export const useWebSocket = (token) => { const [ws, setWs] = useState(null); const [connected, setConnected] = useState(false); const [messages, setMessages] = useState([]); const [metrics, setMetrics] = useState(null); const [csatUpdates, setCsatUpdates] = useState([]); const connect = useCallback(() => { if (!token) return; const websocket = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); websocket.onopen = () => { setConnected(true); setWs(websocket); }; websocket.onmessage = (event) => { const data = JSON.parse(event.data); switch (data.type) { case 'chat_message': setMessages(prev => [...prev, data.data]); break; case 'dashboard_metrics': setMetrics(data.data); break; case 'csat_update': setCsatUpdates(prev => [...prev, data.data]); break; default: console.log('Evento desconhecido:', data.type); } }; websocket.onclose = () => { setConnected(false); setWs(null); }; websocket.onerror = (error) => { console.error('Erro no WebSocket:', error); }; return websocket; }, [token]); useEffect(() => { const websocket = connect(); return () => { if (websocket) { websocket.close(); } }; }, [connect]); const sendMessage = useCallback((data) => { if (ws && ws.readyState === WebSocket.OPEN) { ws.send(JSON.stringify(data)); } }, [ws]); return { connected, messages, metrics, csatUpdates, sendMessage }; }; Componente Dashboard import React from 'react'; import { useWebSocket } from './hooks/useWebSocket'; const Dashboard = ({ token }) => { const { connected, metrics, csatUpdates } = useWebSocket(token); return ( <div> <h1>Dashboard</h1> <p>Status: {connected ? 'Conectado' : 'Desconectado'}</p> {metrics && ( <div> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {metrics.total_conversations}</p> <p>Conversas Abertas: {metrics.open_conversations}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {metrics.average_satisfaction}</p> </div> )} {csatUpdates.length > 0 && ( <div> <h2>\u00daltimos CSATs</h2> {csatUpdates.map((csat, index) => ( <div key={index}> <p>{csat.contact_name}: {csat.rating} - {csat.feedback}</p> </div> ))} </div> )} </div> ); }; export default Dashboard; Implementa\u00e7\u00e3o Vue.js Plugin WebSocket // websocket.js export default { install(Vue) { Vue.prototype.$websocket = { ws: null, connected: false, listeners: {}, connect(token) { this.ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); this.ws.onopen = () => { this.connected = true; this.emit('connected'); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.data); }; this.ws.onclose = () => { this.connected = false; this.emit('disconnected'); }; this.ws.onerror = (error) => { this.emit('error', error); }; }, send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } }, on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); }, off(event, callback) { if (this.listeners[event]) { this.listeners[event] = this.listeners[event].filter(cb => cb !== callback); } }, emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } }, disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } }; } }; Componente Vue <template> <div> <h1>Dashboard</h1> <p>Status: {{ connected ? 'Conectado' : 'Desconectado' }}</p> <div v-if=\"metrics\"> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {{ metrics.total_conversations }}</p> <p>Conversas Abertas: {{ metrics.open_conversations }}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {{ metrics.average_satisfaction }}</p> </div> <div v-if=\"csatUpdates.length > 0\"> <h2>\u00daltimos CSATs</h2> <div v-for=\"(csat, index) in csatUpdates\" :key=\"index\"> <p>{{ csat.contact_name }}: {{ csat.rating }} - {{ csat.feedback }}</p> </div> </div> </div> </template> <script> export default { data() { return { connected: false, metrics: null, csatUpdates: [] }; }, mounted() { const token = localStorage.getItem('niochat_token'); if (token) { this.$websocket.connect(token); this.$websocket.on('connected', () => { this.connected = true; }); this.$websocket.on('disconnected', () => { this.connected = false; }); this.$websocket.on('dashboard_metrics', (data) => { this.metrics = data; }); this.$websocket.on('csat_update', (data) => { this.csatUpdates.push(data); }); } }, beforeDestroy() { this.$websocket.disconnect(); } }; </script> Implementa\u00e7\u00e3o Angular Servi\u00e7o WebSocket import { Injectable } from '@angular/core'; import { Observable, Subject } from 'rxjs'; @Injectable({ providedIn: 'root' }) export class WebSocketService { private ws: WebSocket; private connected = false; private messageSubject = new Subject<any>(); connect(token: string): void { this.ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); this.ws.onopen = () => { this.connected = true; this.messageSubject.next({ type: 'connected' }); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.messageSubject.next(data); }; this.ws.onclose = () => { this.connected = false; this.messageSubject.next({ type: 'disconnected' }); }; this.ws.onerror = (error) => { this.messageSubject.next({ type: 'error', data: error }); }; } send(data: any): void { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } } getMessages(): Observable<any> { return this.messageSubject.asObservable(); } isConnected(): boolean { return this.connected; } disconnect(): void { if (this.ws) { this.ws.close(); this.ws = null; } } } Componente Angular import { Component, OnInit, OnDestroy } from '@angular/core'; import { WebSocketService } from './websocket.service'; import { Subscription } from 'rxjs'; @Component({ selector: 'app-dashboard', template: ` <div> <h1>Dashboard</h1> <p>Status: {{ connected ? 'Conectado' : 'Desconectado' }}</p> <div *ngIf=\"metrics\"> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {{ metrics.total_conversations }}</p> <p>Conversas Abertas: {{ metrics.open_conversations }}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {{ metrics.average_satisfaction }}</p> </div> <div *ngIf=\"csatUpdates.length > 0\"> <h2>\u00daltimos CSATs</h2> <div *ngFor=\"let csat of csatUpdates; let i = index\"> <p>{{ csat.contact_name }}: {{ csat.rating }} - {{ csat.feedback }}</p> </div> </div> </div> ` }) export class DashboardComponent implements OnInit, OnDestroy { connected = false; metrics: any = null; csatUpdates: any[] = []; private subscription: Subscription; constructor(private websocketService: WebSocketService) {} ngOnInit() { const token = localStorage.getItem('niochat_token'); if (token) { this.websocketService.connect(token); this.subscription = this.websocketService.getMessages().subscribe(message => { switch (message.type) { case 'connected': this.connected = true; break; case 'disconnected': this.connected = false; break; case 'dashboard_metrics': this.metrics = message.data; break; case 'csat_update': this.csatUpdates.push(message.data); break; } }); } } ngOnDestroy() { if (this.subscription) { this.subscription.unsubscribe(); } this.websocketService.disconnect(); } } Tratamento de Erros Reconex\u00e3o Autom\u00e1tica class WebSocketWithReconnect { constructor(url, options = {}) { this.url = url; this.options = { maxReconnectAttempts: 5, reconnectInterval: 5000, ...options }; this.reconnectAttempts = 0; this.listeners = {}; } connect() { this.ws = new WebSocket(this.url); this.ws.onopen = () => { this.reconnectAttempts = 0; this.emit('connected'); }; this.ws.onclose = (event) => { this.emit('disconnected', event); this.attemptReconnect(); }; this.ws.onerror = (error) => { this.emit('error', error); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.data); }; } attemptReconnect() { if (this.reconnectAttempts < this.options.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Tentativa de reconex\u00e3o ${this.reconnectAttempts}/${this.options.maxReconnectAttempts}`); setTimeout(() => { this.connect(); }, this.options.reconnectInterval); } else { this.emit('reconnect_failed'); } } send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } else { console.error('WebSocket n\u00e3o est\u00e1 conectado'); } } on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); } emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } } Pr\u00f3ximos Passos Endpoints - Explore todos os endpoints da API Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o Webhooks - Aprenda sobre webhooks","title":"WebSocket"},{"location":"api/websocket/#websocket","text":"O NioChat utiliza WebSocket para comunica\u00e7\u00e3o em tempo real entre o frontend e backend. Este documento explica como implementar e usar WebSocket.","title":"WebSocket"},{"location":"api/websocket/#conexao","text":"","title":"Conex\u00e3o"},{"location":"api/websocket/#url-de-conexao","text":"const ws = new WebSocket('ws://localhost:8010/ws/dashboard/');","title":"URL de Conex\u00e3o"},{"location":"api/websocket/#com-autenticacao","text":"const token = 'seu_token_aqui'; const ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`);","title":"Com Autentica\u00e7\u00e3o"},{"location":"api/websocket/#implementacao-javascript","text":"","title":"Implementa\u00e7\u00e3o JavaScript"},{"location":"api/websocket/#classe-websocket","text":"class NioChatWebSocket { constructor(token) { this.token = token; this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = 5; this.reconnectInterval = 5000; this.listeners = {}; } connect() { const url = `ws://localhost:8010/ws/dashboard/?token=${this.token}`; this.ws = new WebSocket(url); this.ws.onopen = (event) => { console.log('WebSocket conectado'); this.reconnectAttempts = 0; this.emit('connected', event); }; this.ws.onmessage = (event) => { try { const data = JSON.parse(event.data); this.handleMessage(data); } catch (error) { console.error('Erro ao processar mensagem:', error); } }; this.ws.onclose = (event) => { console.log('WebSocket desconectado:', event.code, event.reason); this.emit('disconnected', event); this.attemptReconnect(); }; this.ws.onerror = (error) => { console.error('Erro no WebSocket:', error); this.emit('error', error); }; } handleMessage(data) { const { type, data: messageData } = data; switch (type) { case 'chat_message': this.emit('chat_message', messageData); break; case 'message_reaction': this.emit('message_reaction', messageData); break; case 'message_deleted': this.emit('message_deleted', messageData); break; case 'dashboard_metrics': this.emit('dashboard_metrics', messageData); break; case 'csat_update': this.emit('csat_update', messageData); break; case 'audit_log': this.emit('audit_log', messageData); break; case 'user_status': this.emit('user_status', messageData); break; default: console.log('Tipo de mensagem desconhecido:', type); } } attemptReconnect() { if (this.reconnectAttempts < this.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Tentativa de reconex\u00e3o ${this.reconnectAttempts}/${this.maxReconnectAttempts}`); setTimeout(() => { this.connect(); }, this.reconnectInterval); } else { console.error('M\u00e1ximo de tentativas de reconex\u00e3o atingido'); this.emit('reconnect_failed'); } } send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } else { console.error('WebSocket n\u00e3o est\u00e1 conectado'); } } on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); } off(event, callback) { if (this.listeners[event]) { this.listeners[event] = this.listeners[event].filter(cb => cb !== callback); } } emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } } // Uso const ws = new NioChatWebSocket('seu_token_aqui'); // Conectar ws.connect(); // Escutar eventos ws.on('chat_message', (data) => { console.log('Nova mensagem:', data); }); ws.on('dashboard_metrics', (data) => { console.log('M\u00e9tricas atualizadas:', data); }); ws.on('csat_update', (data) => { console.log('CSAT atualizado:', data); }); ws.on('connected', () => { console.log('Conectado ao WebSocket'); }); ws.on('disconnected', () => { console.log('Desconectado do WebSocket'); }); ws.on('error', (error) => { console.error('Erro no WebSocket:', error); });","title":"Classe WebSocket"},{"location":"api/websocket/#eventos-disponiveis","text":"","title":"Eventos Dispon\u00edveis"},{"location":"api/websocket/#chat","text":"","title":"Chat"},{"location":"api/websocket/#nova-mensagem","text":"{ \"type\": \"chat_message\", \"data\": { \"conversation_id\": 1, \"message\": { \"id\": 1, \"content\": \"Nova mensagem\", \"sender\": \"customer\", \"timestamp\": \"2024-01-01T10:00:00Z\", \"message_type\": \"text\" } } }","title":"Nova Mensagem"},{"location":"api/websocket/#reacao-a-mensagem","text":"{ \"type\": \"message_reaction\", \"data\": { \"message_id\": 1, \"reaction\": \"\ud83d\udc4d\", \"user_id\": 1 } }","title":"Rea\u00e7\u00e3o a Mensagem"},{"location":"api/websocket/#mensagem-deletada","text":"{ \"type\": \"message_deleted\", \"data\": { \"message_id\": 1, \"deleted_by\": 1 } }","title":"Mensagem Deletada"},{"location":"api/websocket/#dashboard","text":"","title":"Dashboard"},{"location":"api/websocket/#metricas-atualizadas","text":"{ \"type\": \"dashboard_metrics\", \"data\": { \"total_conversations\": 100, \"open_conversations\": 25, \"closed_conversations\": 75, \"average_satisfaction\": 4.2, \"resolution_rate\": 0.85, \"response_time\": 120 } }","title":"M\u00e9tricas Atualizadas"},{"location":"api/websocket/#csat-atualizado","text":"{ \"type\": \"csat_update\", \"data\": { \"conversation_id\": 1, \"rating\": 5, \"feedback\": \"Excelente atendimento!\", \"contact_name\": \"Jo\u00e3o Silva\", \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"CSAT Atualizado"},{"location":"api/websocket/#log-de-auditoria","text":"{ \"type\": \"audit_log\", \"data\": { \"id\": 1, \"action\": \"conversation_created\", \"details\": { \"conversation_id\": 1, \"contact_name\": \"Jo\u00e3o Silva\" }, \"user\": { \"id\": 1, \"username\": \"agente1\" }, \"timestamp\": \"2024-01-01T10:00:00Z\" } }","title":"Log de Auditoria"},{"location":"api/websocket/#status-do-usuario","text":"","title":"Status do Usu\u00e1rio"},{"location":"api/websocket/#usuario-onlineoffline","text":"{ \"type\": \"user_status\", \"data\": { \"user_id\": 1, \"status\": \"online\", \"last_seen\": \"2024-01-01T10:00:00Z\" } }","title":"Usu\u00e1rio Online/Offline"},{"location":"api/websocket/#implementacao-react","text":"","title":"Implementa\u00e7\u00e3o React"},{"location":"api/websocket/#hook-usewebsocket","text":"import { useState, useEffect, useCallback } from 'react'; export const useWebSocket = (token) => { const [ws, setWs] = useState(null); const [connected, setConnected] = useState(false); const [messages, setMessages] = useState([]); const [metrics, setMetrics] = useState(null); const [csatUpdates, setCsatUpdates] = useState([]); const connect = useCallback(() => { if (!token) return; const websocket = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); websocket.onopen = () => { setConnected(true); setWs(websocket); }; websocket.onmessage = (event) => { const data = JSON.parse(event.data); switch (data.type) { case 'chat_message': setMessages(prev => [...prev, data.data]); break; case 'dashboard_metrics': setMetrics(data.data); break; case 'csat_update': setCsatUpdates(prev => [...prev, data.data]); break; default: console.log('Evento desconhecido:', data.type); } }; websocket.onclose = () => { setConnected(false); setWs(null); }; websocket.onerror = (error) => { console.error('Erro no WebSocket:', error); }; return websocket; }, [token]); useEffect(() => { const websocket = connect(); return () => { if (websocket) { websocket.close(); } }; }, [connect]); const sendMessage = useCallback((data) => { if (ws && ws.readyState === WebSocket.OPEN) { ws.send(JSON.stringify(data)); } }, [ws]); return { connected, messages, metrics, csatUpdates, sendMessage }; };","title":"Hook useWebSocket"},{"location":"api/websocket/#componente-dashboard","text":"import React from 'react'; import { useWebSocket } from './hooks/useWebSocket'; const Dashboard = ({ token }) => { const { connected, metrics, csatUpdates } = useWebSocket(token); return ( <div> <h1>Dashboard</h1> <p>Status: {connected ? 'Conectado' : 'Desconectado'}</p> {metrics && ( <div> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {metrics.total_conversations}</p> <p>Conversas Abertas: {metrics.open_conversations}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {metrics.average_satisfaction}</p> </div> )} {csatUpdates.length > 0 && ( <div> <h2>\u00daltimos CSATs</h2> {csatUpdates.map((csat, index) => ( <div key={index}> <p>{csat.contact_name}: {csat.rating} - {csat.feedback}</p> </div> ))} </div> )} </div> ); }; export default Dashboard;","title":"Componente Dashboard"},{"location":"api/websocket/#implementacao-vuejs","text":"","title":"Implementa\u00e7\u00e3o Vue.js"},{"location":"api/websocket/#plugin-websocket","text":"// websocket.js export default { install(Vue) { Vue.prototype.$websocket = { ws: null, connected: false, listeners: {}, connect(token) { this.ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); this.ws.onopen = () => { this.connected = true; this.emit('connected'); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.data); }; this.ws.onclose = () => { this.connected = false; this.emit('disconnected'); }; this.ws.onerror = (error) => { this.emit('error', error); }; }, send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } }, on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); }, off(event, callback) { if (this.listeners[event]) { this.listeners[event] = this.listeners[event].filter(cb => cb !== callback); } }, emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } }, disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } }; } };","title":"Plugin WebSocket"},{"location":"api/websocket/#componente-vue","text":"<template> <div> <h1>Dashboard</h1> <p>Status: {{ connected ? 'Conectado' : 'Desconectado' }}</p> <div v-if=\"metrics\"> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {{ metrics.total_conversations }}</p> <p>Conversas Abertas: {{ metrics.open_conversations }}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {{ metrics.average_satisfaction }}</p> </div> <div v-if=\"csatUpdates.length > 0\"> <h2>\u00daltimos CSATs</h2> <div v-for=\"(csat, index) in csatUpdates\" :key=\"index\"> <p>{{ csat.contact_name }}: {{ csat.rating }} - {{ csat.feedback }}</p> </div> </div> </div> </template> <script> export default { data() { return { connected: false, metrics: null, csatUpdates: [] }; }, mounted() { const token = localStorage.getItem('niochat_token'); if (token) { this.$websocket.connect(token); this.$websocket.on('connected', () => { this.connected = true; }); this.$websocket.on('disconnected', () => { this.connected = false; }); this.$websocket.on('dashboard_metrics', (data) => { this.metrics = data; }); this.$websocket.on('csat_update', (data) => { this.csatUpdates.push(data); }); } }, beforeDestroy() { this.$websocket.disconnect(); } }; </script>","title":"Componente Vue"},{"location":"api/websocket/#implementacao-angular","text":"","title":"Implementa\u00e7\u00e3o Angular"},{"location":"api/websocket/#servico-websocket","text":"import { Injectable } from '@angular/core'; import { Observable, Subject } from 'rxjs'; @Injectable({ providedIn: 'root' }) export class WebSocketService { private ws: WebSocket; private connected = false; private messageSubject = new Subject<any>(); connect(token: string): void { this.ws = new WebSocket(`ws://localhost:8010/ws/dashboard/?token=${token}`); this.ws.onopen = () => { this.connected = true; this.messageSubject.next({ type: 'connected' }); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.messageSubject.next(data); }; this.ws.onclose = () => { this.connected = false; this.messageSubject.next({ type: 'disconnected' }); }; this.ws.onerror = (error) => { this.messageSubject.next({ type: 'error', data: error }); }; } send(data: any): void { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } } getMessages(): Observable<any> { return this.messageSubject.asObservable(); } isConnected(): boolean { return this.connected; } disconnect(): void { if (this.ws) { this.ws.close(); this.ws = null; } } }","title":"Servi\u00e7o WebSocket"},{"location":"api/websocket/#componente-angular","text":"import { Component, OnInit, OnDestroy } from '@angular/core'; import { WebSocketService } from './websocket.service'; import { Subscription } from 'rxjs'; @Component({ selector: 'app-dashboard', template: ` <div> <h1>Dashboard</h1> <p>Status: {{ connected ? 'Conectado' : 'Desconectado' }}</p> <div *ngIf=\"metrics\"> <h2>M\u00e9tricas</h2> <p>Total de Conversas: {{ metrics.total_conversations }}</p> <p>Conversas Abertas: {{ metrics.open_conversations }}</p> <p>Satisfa\u00e7\u00e3o M\u00e9dia: {{ metrics.average_satisfaction }}</p> </div> <div *ngIf=\"csatUpdates.length > 0\"> <h2>\u00daltimos CSATs</h2> <div *ngFor=\"let csat of csatUpdates; let i = index\"> <p>{{ csat.contact_name }}: {{ csat.rating }} - {{ csat.feedback }}</p> </div> </div> </div> ` }) export class DashboardComponent implements OnInit, OnDestroy { connected = false; metrics: any = null; csatUpdates: any[] = []; private subscription: Subscription; constructor(private websocketService: WebSocketService) {} ngOnInit() { const token = localStorage.getItem('niochat_token'); if (token) { this.websocketService.connect(token); this.subscription = this.websocketService.getMessages().subscribe(message => { switch (message.type) { case 'connected': this.connected = true; break; case 'disconnected': this.connected = false; break; case 'dashboard_metrics': this.metrics = message.data; break; case 'csat_update': this.csatUpdates.push(message.data); break; } }); } } ngOnDestroy() { if (this.subscription) { this.subscription.unsubscribe(); } this.websocketService.disconnect(); } }","title":"Componente Angular"},{"location":"api/websocket/#tratamento-de-erros","text":"","title":"Tratamento de Erros"},{"location":"api/websocket/#reconexao-automatica","text":"class WebSocketWithReconnect { constructor(url, options = {}) { this.url = url; this.options = { maxReconnectAttempts: 5, reconnectInterval: 5000, ...options }; this.reconnectAttempts = 0; this.listeners = {}; } connect() { this.ws = new WebSocket(this.url); this.ws.onopen = () => { this.reconnectAttempts = 0; this.emit('connected'); }; this.ws.onclose = (event) => { this.emit('disconnected', event); this.attemptReconnect(); }; this.ws.onerror = (error) => { this.emit('error', error); }; this.ws.onmessage = (event) => { const data = JSON.parse(event.data); this.emit(data.type, data.data); }; } attemptReconnect() { if (this.reconnectAttempts < this.options.maxReconnectAttempts) { this.reconnectAttempts++; console.log(`Tentativa de reconex\u00e3o ${this.reconnectAttempts}/${this.options.maxReconnectAttempts}`); setTimeout(() => { this.connect(); }, this.options.reconnectInterval); } else { this.emit('reconnect_failed'); } } send(data) { if (this.ws && this.ws.readyState === WebSocket.OPEN) { this.ws.send(JSON.stringify(data)); } else { console.error('WebSocket n\u00e3o est\u00e1 conectado'); } } on(event, callback) { if (!this.listeners[event]) { this.listeners[event] = []; } this.listeners[event].push(callback); } emit(event, data) { if (this.listeners[event]) { this.listeners[event].forEach(callback => callback(data)); } } disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } } }","title":"Reconex\u00e3o Autom\u00e1tica"},{"location":"api/websocket/#proximos-passos","text":"Endpoints - Explore todos os endpoints da API Autentica\u00e7\u00e3o - Aprenda sobre autentica\u00e7\u00e3o Webhooks - Aprenda sobre webhooks","title":"Pr\u00f3ximos Passos"},{"location":"configuration/supabase/","text":"Configura\u00e7\u00e3o do Supabase O NioChat utiliza Supabase para dashboard em tempo real, auditoria e sistema CSAT. Este guia explica como configurar a integra\u00e7\u00e3o. Criar Projeto no Supabase 1. Acessar Supabase Acesse supabase.com Fa\u00e7a login ou crie uma conta Clique em \"New Project\" 2. Configurar Projeto Nome : NioChat Database Password : Senha segura Region : Escolha a regi\u00e3o mais pr\u00f3xima Pricing Plan : Free (para desenvolvimento) 3. Obter Credenciais Ap\u00f3s criar o projeto, voc\u00ea encontrar\u00e1: - Project URL : https://seu-projeto.supabase.co - Anon Key : Chave p\u00fablica para autentica\u00e7\u00e3o - Service Role Key : Chave privada para opera\u00e7\u00f5es administrativas Configurar Banco de Dados 1. Executar SQL no Supabase Acesse o SQL Editor no Supabase e execute: -- Criar tabela de conversas CREATE TABLE conversations ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, inbox_id BIGINT, status TEXT DEFAULT 'open', assignee_id BIGINT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), ended_at TIMESTAMPTZ, additional_attributes JSONB ); -- Criar tabela de contatos CREATE TABLE contacts ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, name TEXT NOT NULL, phone TEXT, email TEXT, avatar TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), additional_attributes JSONB ); -- Criar tabela de mensagens CREATE TABLE messages ( id BIGINT PRIMARY KEY, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, provedor_id BIGINT NOT NULL, content TEXT, message_type TEXT DEFAULT 'text', is_from_customer BOOLEAN DEFAULT true, file_url TEXT, file_name TEXT, file_size BIGINT, external_id TEXT, additional_attributes JSONB, created_at TIMESTAMPTZ DEFAULT NOW() ); -- Criar tabela de feedback CSAT CREATE TABLE csat_feedback ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, emoji_rating TEXT, rating_value INTEGER NOT NULL, original_message TEXT, contact_avatar TEXT, feedback_sent_at TIMESTAMPTZ DEFAULT NOW() ); -- Criar tabela de auditoria CREATE TABLE audit_logs ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, user_id BIGINT, action TEXT NOT NULL, details JSONB, timestamp TIMESTAMPTZ DEFAULT NOW() ); 2. Configurar RLS (Row Level Security) -- Habilitar RLS ALTER TABLE conversations ENABLE ROW LEVEL SECURITY; ALTER TABLE contacts ENABLE ROW LEVEL SECURITY; ALTER TABLE messages ENABLE ROW LEVEL SECURITY; ALTER TABLE csat_feedback ENABLE ROW LEVEL SECURITY; ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY; -- Pol\u00edticas RLS para isolamento por provedor CREATE POLICY \"Isolate by provedor_id\" ON conversations FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON contacts FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON messages FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON csat_feedback FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON audit_logs FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); 3. Criar \u00cdndices para Performance -- \u00cdndices para conversas CREATE INDEX idx_conversations_provedor_id ON conversations(provedor_id); CREATE INDEX idx_conversations_status ON conversations(status); CREATE INDEX idx_conversations_assignee_id ON conversations(assignee_id); CREATE INDEX idx_conversations_created_at ON conversations(created_at); -- \u00cdndices para contatos CREATE INDEX idx_contacts_provedor_id ON contacts(provedor_id); CREATE INDEX idx_contacts_phone ON contacts(phone); -- \u00cdndices para mensagens CREATE INDEX idx_messages_conversation_id ON messages(conversation_id); CREATE INDEX idx_messages_provedor_id ON messages(provedor_id); CREATE INDEX idx_messages_created_at ON messages(created_at); -- \u00cdndices para CSAT CREATE INDEX idx_csat_provedor_id ON csat_feedback(provedor_id); CREATE INDEX idx_csat_rating_value ON csat_feedback(rating_value); CREATE INDEX idx_csat_feedback_sent_at ON csat_feedback(feedback_sent_at); -- \u00cdndices para auditoria CREATE INDEX idx_audit_provedor_id ON audit_logs(provedor_id); CREATE INDEX idx_audit_user_id ON audit_logs(user_id); CREATE INDEX idx_audit_action ON audit_logs(action); CREATE INDEX idx_audit_timestamp ON audit_logs(timestamp); Configurar Vari\u00e1veis de Ambiente 1. Arquivo .env # Supabase SUPABASE_URL=https://seu-projeto.supabase.co SUPABASE_ANON_KEY=sua_chave_anon_aqui SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_aqui 2. Configura\u00e7\u00e3o no Django # settings.py SUPABASE_URL = os.getenv('SUPABASE_URL') SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY') SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY') Configurar Dashboard 1. Criar Views no Supabase -- View para m\u00e9tricas de conversas CREATE VIEW conversation_metrics AS SELECT provedor_id, COUNT(*) as total_conversations, COUNT(CASE WHEN status = 'open' THEN 1 END) as open_conversations, COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_conversations, AVG(CASE WHEN status = 'closed' THEN EXTRACT(EPOCH FROM (ended_at - created_at))/3600 END) as avg_resolution_time_hours FROM conversations GROUP BY provedor_id; -- View para m\u00e9tricas CSAT CREATE VIEW csat_metrics AS SELECT provedor_id, COUNT(*) as total_feedbacks, AVG(rating_value) as average_rating, COUNT(CASE WHEN rating_value = 5 THEN 1 END) as excellent_count, COUNT(CASE WHEN rating_value >= 4 THEN 1 END) as satisfied_count, COUNT(CASE WHEN rating_value <= 2 THEN 1 END) as unsatisfied_count FROM csat_feedback GROUP BY provedor_id; 2. Configurar Real-time -- Habilitar real-time para tabelas ALTER PUBLICATION supabase_realtime ADD TABLE conversations; ALTER PUBLICATION supabase_realtime ADD TABLE messages; ALTER PUBLICATION supabase_realtime ADD TABLE csat_feedback; ALTER PUBLICATION supabase_realtime ADD TABLE audit_logs; Configurar Autentica\u00e7\u00e3o 1. Configurar JWT # settings.py SUPABASE_JWT_SECRET = os.getenv('SUPABASE_JWT_SECRET') # Middleware para JWT MIDDLEWARE = [ 'core.middleware.SupabaseJWTMiddleware', # ... outros middlewares ] 2. Middleware JWT # core/middleware.py import jwt from django.conf import settings class SupabaseJWTMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): # Processar JWT do Supabase auth_header = request.META.get('HTTP_AUTHORIZATION') if auth_header and auth_header.startswith('Bearer '): token = auth_header.split(' ')[1] try: payload = jwt.decode( token, settings.SUPABASE_JWT_SECRET, algorithms=['HS256'] ) request.supabase_user = payload except jwt.InvalidTokenError: pass response = self.get_response(request) return response Configurar Webhooks 1. Webhook para Atualiza\u00e7\u00f5es # core/supabase_service.py import requests from django.conf import settings class SupabaseService: def __init__(self): self.url = settings.SUPABASE_URL self.headers = { 'apikey': settings.SUPABASE_ANON_KEY, 'Authorization': f'Bearer {settings.SUPABASE_ANON_KEY}', 'Content-Type': 'application/json' } def send_webhook(self, event_type, data): \"\"\"Enviar webhook para atualizar dashboard\"\"\" webhook_url = f\"{self.url}/functions/v1/dashboard-update\" payload = { 'event': event_type, 'data': data, 'timestamp': timezone.now().isoformat() } response = requests.post( webhook_url, json=payload, headers=self.headers ) return response.status_code == 200 2. Fun\u00e7\u00e3o Edge para Webhook // supabase/functions/dashboard-update/index.ts import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\" serve(async (req) => { const { event, data, timestamp } = await req.json() // Processar evento switch (event) { case 'conversation_created': // Atualizar dashboard break case 'message_sent': // Atualizar chat break case 'csat_received': // Atualizar m\u00e9tricas CSAT break } return new Response(JSON.stringify({ success: true }), { headers: { \"Content-Type\": \"application/json\" }, }) }) Monitoramento 1. Configurar Alertas -- Fun\u00e7\u00e3o para alertas CREATE OR REPLACE FUNCTION check_conversation_alerts() RETURNS TRIGGER AS $$ BEGIN -- Alertar se conversa aberta h\u00e1 mais de 1 hora IF NEW.status = 'open' AND EXTRACT(EPOCH FROM (NOW() - NEW.created_at))/3600 > 1 THEN -- Enviar notifica\u00e7\u00e3o PERFORM pg_notify('conversation_alert', json_build_object( 'conversation_id', NEW.id, 'provedor_id', NEW.provedor_id, 'alert_type', 'long_open_conversation' )::text ); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; -- Trigger para alertas CREATE TRIGGER conversation_alert_trigger AFTER UPDATE ON conversations FOR EACH ROW EXECUTE FUNCTION check_conversation_alerts(); 2. M\u00e9tricas de Performance -- View para performance CREATE VIEW performance_metrics AS SELECT provedor_id, DATE_TRUNC('hour', created_at) as hour, COUNT(*) as conversations_per_hour, AVG(EXTRACT(EPOCH FROM (ended_at - created_at))/60) as avg_resolution_minutes, COUNT(CASE WHEN status = 'closed' THEN 1 END) as resolved_conversations FROM conversations WHERE created_at >= NOW() - INTERVAL '24 hours' GROUP BY provedor_id, DATE_TRUNC('hour', created_at) ORDER BY hour DESC; Troubleshooting Problemas Comuns Erro de Conex\u00e3o # Verificar URL curl -I https://seu-projeto.supabase.co # Verificar chave curl -H \"apikey: sua_chave\" https://seu-projeto.supabase.co/rest/v1/ Erro de RLS -- Verificar pol\u00edticas SELECT * FROM pg_policies WHERE tablename = 'conversations'; -- Testar acesso SELECT * FROM conversations WHERE provedor_id = 1; Erro de Real-time -- Verificar publica\u00e7\u00e3o SELECT * FROM pg_publication_tables WHERE pubname = 'supabase_realtime'; -- Habilitar tabela ALTER PUBLICATION supabase_realtime ADD TABLE conversations; Comandos \u00dateis Verificar Status # Testar conex\u00e3o from core.supabase_service import SupabaseService supabase = SupabaseService() print(supabase.test_connection()) Limpar Dados -- Limpar dados de teste DELETE FROM audit_logs WHERE provedor_id = 999; DELETE FROM csat_feedback WHERE provedor_id = 999; DELETE FROM messages WHERE provedor_id = 999; DELETE FROM conversations WHERE provedor_id = 999; DELETE FROM contacts WHERE provedor_id = 999; Pr\u00f3ximos Passos Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Configura\u00e7\u00e3o do Supabase"},{"location":"configuration/supabase/#configuracao-do-supabase","text":"O NioChat utiliza Supabase para dashboard em tempo real, auditoria e sistema CSAT. Este guia explica como configurar a integra\u00e7\u00e3o.","title":"Configura\u00e7\u00e3o do Supabase"},{"location":"configuration/supabase/#criar-projeto-no-supabase","text":"","title":"Criar Projeto no Supabase"},{"location":"configuration/supabase/#1-acessar-supabase","text":"Acesse supabase.com Fa\u00e7a login ou crie uma conta Clique em \"New Project\"","title":"1. Acessar Supabase"},{"location":"configuration/supabase/#2-configurar-projeto","text":"Nome : NioChat Database Password : Senha segura Region : Escolha a regi\u00e3o mais pr\u00f3xima Pricing Plan : Free (para desenvolvimento)","title":"2. Configurar Projeto"},{"location":"configuration/supabase/#3-obter-credenciais","text":"Ap\u00f3s criar o projeto, voc\u00ea encontrar\u00e1: - Project URL : https://seu-projeto.supabase.co - Anon Key : Chave p\u00fablica para autentica\u00e7\u00e3o - Service Role Key : Chave privada para opera\u00e7\u00f5es administrativas","title":"3. Obter Credenciais"},{"location":"configuration/supabase/#configurar-banco-de-dados","text":"","title":"Configurar Banco de Dados"},{"location":"configuration/supabase/#1-executar-sql-no-supabase","text":"Acesse o SQL Editor no Supabase e execute: -- Criar tabela de conversas CREATE TABLE conversations ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, inbox_id BIGINT, status TEXT DEFAULT 'open', assignee_id BIGINT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), ended_at TIMESTAMPTZ, additional_attributes JSONB ); -- Criar tabela de contatos CREATE TABLE contacts ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, name TEXT NOT NULL, phone TEXT, email TEXT, avatar TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), additional_attributes JSONB ); -- Criar tabela de mensagens CREATE TABLE messages ( id BIGINT PRIMARY KEY, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, provedor_id BIGINT NOT NULL, content TEXT, message_type TEXT DEFAULT 'text', is_from_customer BOOLEAN DEFAULT true, file_url TEXT, file_name TEXT, file_size BIGINT, external_id TEXT, additional_attributes JSONB, created_at TIMESTAMPTZ DEFAULT NOW() ); -- Criar tabela de feedback CSAT CREATE TABLE csat_feedback ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, emoji_rating TEXT, rating_value INTEGER NOT NULL, original_message TEXT, contact_avatar TEXT, feedback_sent_at TIMESTAMPTZ DEFAULT NOW() ); -- Criar tabela de auditoria CREATE TABLE audit_logs ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, user_id BIGINT, action TEXT NOT NULL, details JSONB, timestamp TIMESTAMPTZ DEFAULT NOW() );","title":"1. Executar SQL no Supabase"},{"location":"configuration/supabase/#2-configurar-rls-row-level-security","text":"-- Habilitar RLS ALTER TABLE conversations ENABLE ROW LEVEL SECURITY; ALTER TABLE contacts ENABLE ROW LEVEL SECURITY; ALTER TABLE messages ENABLE ROW LEVEL SECURITY; ALTER TABLE csat_feedback ENABLE ROW LEVEL SECURITY; ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY; -- Pol\u00edticas RLS para isolamento por provedor CREATE POLICY \"Isolate by provedor_id\" ON conversations FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON contacts FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON messages FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON csat_feedback FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); CREATE POLICY \"Isolate by provedor_id\" ON audit_logs FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint);","title":"2. Configurar RLS (Row Level Security)"},{"location":"configuration/supabase/#3-criar-indices-para-performance","text":"-- \u00cdndices para conversas CREATE INDEX idx_conversations_provedor_id ON conversations(provedor_id); CREATE INDEX idx_conversations_status ON conversations(status); CREATE INDEX idx_conversations_assignee_id ON conversations(assignee_id); CREATE INDEX idx_conversations_created_at ON conversations(created_at); -- \u00cdndices para contatos CREATE INDEX idx_contacts_provedor_id ON contacts(provedor_id); CREATE INDEX idx_contacts_phone ON contacts(phone); -- \u00cdndices para mensagens CREATE INDEX idx_messages_conversation_id ON messages(conversation_id); CREATE INDEX idx_messages_provedor_id ON messages(provedor_id); CREATE INDEX idx_messages_created_at ON messages(created_at); -- \u00cdndices para CSAT CREATE INDEX idx_csat_provedor_id ON csat_feedback(provedor_id); CREATE INDEX idx_csat_rating_value ON csat_feedback(rating_value); CREATE INDEX idx_csat_feedback_sent_at ON csat_feedback(feedback_sent_at); -- \u00cdndices para auditoria CREATE INDEX idx_audit_provedor_id ON audit_logs(provedor_id); CREATE INDEX idx_audit_user_id ON audit_logs(user_id); CREATE INDEX idx_audit_action ON audit_logs(action); CREATE INDEX idx_audit_timestamp ON audit_logs(timestamp);","title":"3. Criar \u00cdndices para Performance"},{"location":"configuration/supabase/#configurar-variaveis-de-ambiente","text":"","title":"Configurar Vari\u00e1veis de Ambiente"},{"location":"configuration/supabase/#1-arquivo-env","text":"# Supabase SUPABASE_URL=https://seu-projeto.supabase.co SUPABASE_ANON_KEY=sua_chave_anon_aqui SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_aqui","title":"1. Arquivo .env"},{"location":"configuration/supabase/#2-configuracao-no-django","text":"# settings.py SUPABASE_URL = os.getenv('SUPABASE_URL') SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY') SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')","title":"2. Configura\u00e7\u00e3o no Django"},{"location":"configuration/supabase/#configurar-dashboard","text":"","title":"Configurar Dashboard"},{"location":"configuration/supabase/#1-criar-views-no-supabase","text":"-- View para m\u00e9tricas de conversas CREATE VIEW conversation_metrics AS SELECT provedor_id, COUNT(*) as total_conversations, COUNT(CASE WHEN status = 'open' THEN 1 END) as open_conversations, COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_conversations, AVG(CASE WHEN status = 'closed' THEN EXTRACT(EPOCH FROM (ended_at - created_at))/3600 END) as avg_resolution_time_hours FROM conversations GROUP BY provedor_id; -- View para m\u00e9tricas CSAT CREATE VIEW csat_metrics AS SELECT provedor_id, COUNT(*) as total_feedbacks, AVG(rating_value) as average_rating, COUNT(CASE WHEN rating_value = 5 THEN 1 END) as excellent_count, COUNT(CASE WHEN rating_value >= 4 THEN 1 END) as satisfied_count, COUNT(CASE WHEN rating_value <= 2 THEN 1 END) as unsatisfied_count FROM csat_feedback GROUP BY provedor_id;","title":"1. Criar Views no Supabase"},{"location":"configuration/supabase/#2-configurar-real-time","text":"-- Habilitar real-time para tabelas ALTER PUBLICATION supabase_realtime ADD TABLE conversations; ALTER PUBLICATION supabase_realtime ADD TABLE messages; ALTER PUBLICATION supabase_realtime ADD TABLE csat_feedback; ALTER PUBLICATION supabase_realtime ADD TABLE audit_logs;","title":"2. Configurar Real-time"},{"location":"configuration/supabase/#configurar-autenticacao","text":"","title":"Configurar Autentica\u00e7\u00e3o"},{"location":"configuration/supabase/#1-configurar-jwt","text":"# settings.py SUPABASE_JWT_SECRET = os.getenv('SUPABASE_JWT_SECRET') # Middleware para JWT MIDDLEWARE = [ 'core.middleware.SupabaseJWTMiddleware', # ... outros middlewares ]","title":"1. Configurar JWT"},{"location":"configuration/supabase/#2-middleware-jwt","text":"# core/middleware.py import jwt from django.conf import settings class SupabaseJWTMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): # Processar JWT do Supabase auth_header = request.META.get('HTTP_AUTHORIZATION') if auth_header and auth_header.startswith('Bearer '): token = auth_header.split(' ')[1] try: payload = jwt.decode( token, settings.SUPABASE_JWT_SECRET, algorithms=['HS256'] ) request.supabase_user = payload except jwt.InvalidTokenError: pass response = self.get_response(request) return response","title":"2. Middleware JWT"},{"location":"configuration/supabase/#configurar-webhooks","text":"","title":"Configurar Webhooks"},{"location":"configuration/supabase/#1-webhook-para-atualizacoes","text":"# core/supabase_service.py import requests from django.conf import settings class SupabaseService: def __init__(self): self.url = settings.SUPABASE_URL self.headers = { 'apikey': settings.SUPABASE_ANON_KEY, 'Authorization': f'Bearer {settings.SUPABASE_ANON_KEY}', 'Content-Type': 'application/json' } def send_webhook(self, event_type, data): \"\"\"Enviar webhook para atualizar dashboard\"\"\" webhook_url = f\"{self.url}/functions/v1/dashboard-update\" payload = { 'event': event_type, 'data': data, 'timestamp': timezone.now().isoformat() } response = requests.post( webhook_url, json=payload, headers=self.headers ) return response.status_code == 200","title":"1. Webhook para Atualiza\u00e7\u00f5es"},{"location":"configuration/supabase/#2-funcao-edge-para-webhook","text":"// supabase/functions/dashboard-update/index.ts import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\" serve(async (req) => { const { event, data, timestamp } = await req.json() // Processar evento switch (event) { case 'conversation_created': // Atualizar dashboard break case 'message_sent': // Atualizar chat break case 'csat_received': // Atualizar m\u00e9tricas CSAT break } return new Response(JSON.stringify({ success: true }), { headers: { \"Content-Type\": \"application/json\" }, }) })","title":"2. Fun\u00e7\u00e3o Edge para Webhook"},{"location":"configuration/supabase/#monitoramento","text":"","title":"Monitoramento"},{"location":"configuration/supabase/#1-configurar-alertas","text":"-- Fun\u00e7\u00e3o para alertas CREATE OR REPLACE FUNCTION check_conversation_alerts() RETURNS TRIGGER AS $$ BEGIN -- Alertar se conversa aberta h\u00e1 mais de 1 hora IF NEW.status = 'open' AND EXTRACT(EPOCH FROM (NOW() - NEW.created_at))/3600 > 1 THEN -- Enviar notifica\u00e7\u00e3o PERFORM pg_notify('conversation_alert', json_build_object( 'conversation_id', NEW.id, 'provedor_id', NEW.provedor_id, 'alert_type', 'long_open_conversation' )::text ); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; -- Trigger para alertas CREATE TRIGGER conversation_alert_trigger AFTER UPDATE ON conversations FOR EACH ROW EXECUTE FUNCTION check_conversation_alerts();","title":"1. Configurar Alertas"},{"location":"configuration/supabase/#2-metricas-de-performance","text":"-- View para performance CREATE VIEW performance_metrics AS SELECT provedor_id, DATE_TRUNC('hour', created_at) as hour, COUNT(*) as conversations_per_hour, AVG(EXTRACT(EPOCH FROM (ended_at - created_at))/60) as avg_resolution_minutes, COUNT(CASE WHEN status = 'closed' THEN 1 END) as resolved_conversations FROM conversations WHERE created_at >= NOW() - INTERVAL '24 hours' GROUP BY provedor_id, DATE_TRUNC('hour', created_at) ORDER BY hour DESC;","title":"2. M\u00e9tricas de Performance"},{"location":"configuration/supabase/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"configuration/supabase/#problemas-comuns","text":"","title":"Problemas Comuns"},{"location":"configuration/supabase/#erro-de-conexao","text":"# Verificar URL curl -I https://seu-projeto.supabase.co # Verificar chave curl -H \"apikey: sua_chave\" https://seu-projeto.supabase.co/rest/v1/","title":"Erro de Conex\u00e3o"},{"location":"configuration/supabase/#erro-de-rls","text":"-- Verificar pol\u00edticas SELECT * FROM pg_policies WHERE tablename = 'conversations'; -- Testar acesso SELECT * FROM conversations WHERE provedor_id = 1;","title":"Erro de RLS"},{"location":"configuration/supabase/#erro-de-real-time","text":"-- Verificar publica\u00e7\u00e3o SELECT * FROM pg_publication_tables WHERE pubname = 'supabase_realtime'; -- Habilitar tabela ALTER PUBLICATION supabase_realtime ADD TABLE conversations;","title":"Erro de Real-time"},{"location":"configuration/supabase/#comandos-uteis","text":"","title":"Comandos \u00dateis"},{"location":"configuration/supabase/#verificar-status","text":"# Testar conex\u00e3o from core.supabase_service import SupabaseService supabase = SupabaseService() print(supabase.test_connection())","title":"Verificar Status"},{"location":"configuration/supabase/#limpar-dados","text":"-- Limpar dados de teste DELETE FROM audit_logs WHERE provedor_id = 999; DELETE FROM csat_feedback WHERE provedor_id = 999; DELETE FROM messages WHERE provedor_id = 999; DELETE FROM conversations WHERE provedor_id = 999; DELETE FROM contacts WHERE provedor_id = 999;","title":"Limpar Dados"},{"location":"configuration/supabase/#proximos-passos","text":"Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Pr\u00f3ximos Passos"},{"location":"development/contributing/","text":"Contribuindo para o NioChat Obrigado por seu interesse em contribuir para o NioChat! Este guia explica como contribuir para o projeto. Como Contribuir 1. Reportar Problemas Use o GitHub Issues Descreva o problema detalhadamente Inclua logs e screenshots se poss\u00edvel Use labels apropriadas 2. Sugerir Melhorias Use o GitHub Discussions Descreva a melhoria proposta Explique o benef\u00edcio para os usu\u00e1rios Considere a implementa\u00e7\u00e3o 3. Enviar Pull Requests Fork o reposit\u00f3rio Crie uma branch para sua feature Implemente as mudan\u00e7as Teste suas mudan\u00e7as Envie o pull request Processo de Desenvolvimento 1. Configurar Ambiente # Fork e clone git clone https://github.com/seu-usuario/niochat.git cd niochat # Configurar backend cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt # Configurar frontend cd ../frontend/frontend npm install 2. Criar Branch # Criar branch para feature git checkout -b feature/nova-funcionalidade # Criar branch para bugfix git checkout -b bugfix/corrigir-problema 3. Implementar Mudan\u00e7as Siga as conven\u00e7\u00f5es de c\u00f3digo Escreva testes para novas funcionalidades Atualize a documenta\u00e7\u00e3o se necess\u00e1rio Mantenha o c\u00f3digo limpo e leg\u00edvel 4. Testar Mudan\u00e7as # Testes backend cd backend python manage.py test # Testes frontend cd frontend/frontend npm test # Lint npm run lint 5. Enviar Pull Request # Commit das mudan\u00e7as git add . git commit -m \"feat: adicionar nova funcionalidade\" # Push para seu fork git push origin feature/nova-funcionalidade # Criar pull request no GitHub Conven\u00e7\u00f5es de C\u00f3digo 1. Python (Backend) # Nomes de vari\u00e1veis e fun\u00e7\u00f5es def process_message(message_text: str) -> str: \"\"\"Processar mensagem com IA.\"\"\" return ai_service.generate_response(message_text) # Nomes de classes class ConversationService: \"\"\"Servi\u00e7o para gerenciar conversas.\"\"\" def create_conversation(self, contact_id: int) -> Conversation: \"\"\"Criar nova conversa.\"\"\" pass # Nomes de constantes MAX_MESSAGE_LENGTH = 1000 DEFAULT_TIMEOUT = 30 2. JavaScript (Frontend) // Nomes de vari\u00e1veis e fun\u00e7\u00f5es const processMessage = (messageText) => { return aiService.generateResponse(messageText); }; // Nomes de componentes const ConversationList = ({ conversations }) => { return ( <div className=\"conversation-list\"> {conversations.map(conversation => ( <ConversationItem key={conversation.id} conversation={conversation} /> ))} </div> ); }; // Nomes de constantes const MAX_MESSAGE_LENGTH = 1000; const DEFAULT_TIMEOUT = 30; 3. Commits # Formato: tipo: descri\u00e7\u00e3o feat: adicionar nova funcionalidade fix: corrigir problema docs: atualizar documenta\u00e7\u00e3o style: formata\u00e7\u00e3o de c\u00f3digo refactor: refatorar c\u00f3digo test: adicionar testes chore: tarefas de manuten\u00e7\u00e3o Estrutura de Pull Request 1. T\u00edtulo Descreva claramente a mudan\u00e7a Use o formato: tipo: descri\u00e7\u00e3o Seja conciso mas descritivo 2. Descri\u00e7\u00e3o ## Descri\u00e7\u00e3o Descreva o que foi implementado ou corrigido. ## Tipo de Mudan\u00e7a - [ ] Bug fix - [ ] Nova funcionalidade - [ ] Breaking change - [ ] Documenta\u00e7\u00e3o ## Como Testar 1. Passo 1 2. Passo 2 3. Passo 3 ## Checklist - [ ] C\u00f3digo testado - [ ] Documenta\u00e7\u00e3o atualizada - [ ] Testes adicionados - [ ] Lint passou 3. Checklist [ ] C\u00f3digo testado localmente [ ] Testes unit\u00e1rios passaram [ ] Lint passou [ ] Documenta\u00e7\u00e3o atualizada [ ] Screenshots inclu\u00eddas (se aplic\u00e1vel) Tipos de Contribui\u00e7\u00e3o 1. Bug Fixes Identifique o problema Crie um teste que reproduza o bug Implemente a corre\u00e7\u00e3o Verifique que o teste passa Documente a corre\u00e7\u00e3o 2. Novas Funcionalidades Discuta a funcionalidade primeiro Implemente com testes Atualize documenta\u00e7\u00e3o Considere impacto na performance Mantenha compatibilidade 3. Melhorias de Performance Me\u00e7a o impacto Documente as melhorias Mantenha funcionalidade Teste em diferentes cen\u00e1rios Considere trade-offs 4. Documenta\u00e7\u00e3o Seja claro e conciso Use exemplos pr\u00e1ticos Mantenha consist\u00eancia Atualize regularmente Inclua screenshots Testes 1. Testes Unit\u00e1rios # backend/tests/test_models.py class ConversationModelTest(TestCase): def test_create_conversation(self): \"\"\"Testar cria\u00e7\u00e3o de conversa.\"\"\" contact = Contact.objects.create(name=\"Teste\") conversation = Conversation.objects.create(contact=contact) self.assertEqual(conversation.status, 'open') 2. Testes de Integra\u00e7\u00e3o # backend/tests/test_api.py class ConversationAPITest(APITestCase): def test_list_conversations(self): \"\"\"Testar listagem de conversas.\"\"\" response = self.client.get('/api/conversations/') self.assertEqual(response.status_code, 200) 3. Testes Frontend // frontend/tests/ConversationList.test.jsx import { render, screen } from '@testing-library/react'; import ConversationList from '../components/ConversationList'; test('renders conversation list', () => { const conversations = [ { id: 1, name: 'Teste', status: 'open' } ]; render(<ConversationList conversations={conversations} />); expect(screen.getByText('Teste')).toBeInTheDocument(); }); Code Review 1. Como Revisar Verifique a funcionalidade Teste o c\u00f3digo localmente Verifique testes Comente sugest\u00f5es construtivas Aprove se estiver satisfeito 2. O que Procurar Funcionalidade correta C\u00f3digo limpo e leg\u00edvel Testes adequados Documenta\u00e7\u00e3o atualizada Performance adequada Seguran\u00e7a 3. Coment\u00e1rios Seja construtivo Explique o porqu\u00ea Sugira alternativas Reconhe\u00e7a boas pr\u00e1ticas Seja respeitoso Comunidade 1. C\u00f3digo de Conduta Seja respeitoso Seja inclusivo Seja construtivo Seja paciente Seja colaborativo 2. Comunica\u00e7\u00e3o Use issues para problemas Use discussions para ideias Use pull requests para c\u00f3digo Seja claro e direto Seja paciente com respostas 3. Suporte Leia a documenta\u00e7\u00e3o primeiro Procure em issues existentes Seja espec\u00edfico no problema Inclua logs e screenshots Seja paciente Roadmap 1. Funcionalidades Planejadas [ ] Integra\u00e7\u00e3o com Telegram [ ] Sistema de templates [ ] Analytics avan\u00e7ados [ ] API GraphQL [ ] Mobile app 2. Melhorias T\u00e9cnicas [ ] Testes E2E [ ] CI/CD melhorado [ ] Monitoramento avan\u00e7ado [ ] Cache distribu\u00eddo [ ] Microservi\u00e7os 3. Documenta\u00e7\u00e3o [ ] Tutoriais em v\u00eddeo [ ] Exemplos pr\u00e1ticos [ ] Guias de deploy [ ] Troubleshooting [ ] FAQ Pr\u00f3ximos Passos Estrutura - Entenda a estrutura do projeto Troubleshooting - Resolva problemas API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Contato GitHub : juniorssilvaa/niochat Email : suporte@niochat.com.br Discord : Link do servidor Twitter : @niochat Obrigado por contribuir para o NioChat! \ud83d\ude80","title":"Contribuindo para o NioChat"},{"location":"development/contributing/#contribuindo-para-o-niochat","text":"Obrigado por seu interesse em contribuir para o NioChat! Este guia explica como contribuir para o projeto.","title":"Contribuindo para o NioChat"},{"location":"development/contributing/#como-contribuir","text":"","title":"Como Contribuir"},{"location":"development/contributing/#1-reportar-problemas","text":"Use o GitHub Issues Descreva o problema detalhadamente Inclua logs e screenshots se poss\u00edvel Use labels apropriadas","title":"1. Reportar Problemas"},{"location":"development/contributing/#2-sugerir-melhorias","text":"Use o GitHub Discussions Descreva a melhoria proposta Explique o benef\u00edcio para os usu\u00e1rios Considere a implementa\u00e7\u00e3o","title":"2. Sugerir Melhorias"},{"location":"development/contributing/#3-enviar-pull-requests","text":"Fork o reposit\u00f3rio Crie uma branch para sua feature Implemente as mudan\u00e7as Teste suas mudan\u00e7as Envie o pull request","title":"3. Enviar Pull Requests"},{"location":"development/contributing/#processo-de-desenvolvimento","text":"","title":"Processo de Desenvolvimento"},{"location":"development/contributing/#1-configurar-ambiente","text":"# Fork e clone git clone https://github.com/seu-usuario/niochat.git cd niochat # Configurar backend cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt # Configurar frontend cd ../frontend/frontend npm install","title":"1. Configurar Ambiente"},{"location":"development/contributing/#2-criar-branch","text":"# Criar branch para feature git checkout -b feature/nova-funcionalidade # Criar branch para bugfix git checkout -b bugfix/corrigir-problema","title":"2. Criar Branch"},{"location":"development/contributing/#3-implementar-mudancas","text":"Siga as conven\u00e7\u00f5es de c\u00f3digo Escreva testes para novas funcionalidades Atualize a documenta\u00e7\u00e3o se necess\u00e1rio Mantenha o c\u00f3digo limpo e leg\u00edvel","title":"3. Implementar Mudan\u00e7as"},{"location":"development/contributing/#4-testar-mudancas","text":"# Testes backend cd backend python manage.py test # Testes frontend cd frontend/frontend npm test # Lint npm run lint","title":"4. Testar Mudan\u00e7as"},{"location":"development/contributing/#5-enviar-pull-request","text":"# Commit das mudan\u00e7as git add . git commit -m \"feat: adicionar nova funcionalidade\" # Push para seu fork git push origin feature/nova-funcionalidade # Criar pull request no GitHub","title":"5. Enviar Pull Request"},{"location":"development/contributing/#convencoes-de-codigo","text":"","title":"Conven\u00e7\u00f5es de C\u00f3digo"},{"location":"development/contributing/#1-python-backend","text":"# Nomes de vari\u00e1veis e fun\u00e7\u00f5es def process_message(message_text: str) -> str: \"\"\"Processar mensagem com IA.\"\"\" return ai_service.generate_response(message_text) # Nomes de classes class ConversationService: \"\"\"Servi\u00e7o para gerenciar conversas.\"\"\" def create_conversation(self, contact_id: int) -> Conversation: \"\"\"Criar nova conversa.\"\"\" pass # Nomes de constantes MAX_MESSAGE_LENGTH = 1000 DEFAULT_TIMEOUT = 30","title":"1. Python (Backend)"},{"location":"development/contributing/#2-javascript-frontend","text":"// Nomes de vari\u00e1veis e fun\u00e7\u00f5es const processMessage = (messageText) => { return aiService.generateResponse(messageText); }; // Nomes de componentes const ConversationList = ({ conversations }) => { return ( <div className=\"conversation-list\"> {conversations.map(conversation => ( <ConversationItem key={conversation.id} conversation={conversation} /> ))} </div> ); }; // Nomes de constantes const MAX_MESSAGE_LENGTH = 1000; const DEFAULT_TIMEOUT = 30;","title":"2. JavaScript (Frontend)"},{"location":"development/contributing/#3-commits","text":"# Formato: tipo: descri\u00e7\u00e3o feat: adicionar nova funcionalidade fix: corrigir problema docs: atualizar documenta\u00e7\u00e3o style: formata\u00e7\u00e3o de c\u00f3digo refactor: refatorar c\u00f3digo test: adicionar testes chore: tarefas de manuten\u00e7\u00e3o","title":"3. Commits"},{"location":"development/contributing/#estrutura-de-pull-request","text":"","title":"Estrutura de Pull Request"},{"location":"development/contributing/#1-titulo","text":"Descreva claramente a mudan\u00e7a Use o formato: tipo: descri\u00e7\u00e3o Seja conciso mas descritivo","title":"1. T\u00edtulo"},{"location":"development/contributing/#2-descricao","text":"## Descri\u00e7\u00e3o Descreva o que foi implementado ou corrigido. ## Tipo de Mudan\u00e7a - [ ] Bug fix - [ ] Nova funcionalidade - [ ] Breaking change - [ ] Documenta\u00e7\u00e3o ## Como Testar 1. Passo 1 2. Passo 2 3. Passo 3 ## Checklist - [ ] C\u00f3digo testado - [ ] Documenta\u00e7\u00e3o atualizada - [ ] Testes adicionados - [ ] Lint passou","title":"2. Descri\u00e7\u00e3o"},{"location":"development/contributing/#3-checklist","text":"[ ] C\u00f3digo testado localmente [ ] Testes unit\u00e1rios passaram [ ] Lint passou [ ] Documenta\u00e7\u00e3o atualizada [ ] Screenshots inclu\u00eddas (se aplic\u00e1vel)","title":"3. Checklist"},{"location":"development/contributing/#tipos-de-contribuicao","text":"","title":"Tipos de Contribui\u00e7\u00e3o"},{"location":"development/contributing/#1-bug-fixes","text":"Identifique o problema Crie um teste que reproduza o bug Implemente a corre\u00e7\u00e3o Verifique que o teste passa Documente a corre\u00e7\u00e3o","title":"1. Bug Fixes"},{"location":"development/contributing/#2-novas-funcionalidades","text":"Discuta a funcionalidade primeiro Implemente com testes Atualize documenta\u00e7\u00e3o Considere impacto na performance Mantenha compatibilidade","title":"2. Novas Funcionalidades"},{"location":"development/contributing/#3-melhorias-de-performance","text":"Me\u00e7a o impacto Documente as melhorias Mantenha funcionalidade Teste em diferentes cen\u00e1rios Considere trade-offs","title":"3. Melhorias de Performance"},{"location":"development/contributing/#4-documentacao","text":"Seja claro e conciso Use exemplos pr\u00e1ticos Mantenha consist\u00eancia Atualize regularmente Inclua screenshots","title":"4. Documenta\u00e7\u00e3o"},{"location":"development/contributing/#testes","text":"","title":"Testes"},{"location":"development/contributing/#1-testes-unitarios","text":"# backend/tests/test_models.py class ConversationModelTest(TestCase): def test_create_conversation(self): \"\"\"Testar cria\u00e7\u00e3o de conversa.\"\"\" contact = Contact.objects.create(name=\"Teste\") conversation = Conversation.objects.create(contact=contact) self.assertEqual(conversation.status, 'open')","title":"1. Testes Unit\u00e1rios"},{"location":"development/contributing/#2-testes-de-integracao","text":"# backend/tests/test_api.py class ConversationAPITest(APITestCase): def test_list_conversations(self): \"\"\"Testar listagem de conversas.\"\"\" response = self.client.get('/api/conversations/') self.assertEqual(response.status_code, 200)","title":"2. Testes de Integra\u00e7\u00e3o"},{"location":"development/contributing/#3-testes-frontend","text":"// frontend/tests/ConversationList.test.jsx import { render, screen } from '@testing-library/react'; import ConversationList from '../components/ConversationList'; test('renders conversation list', () => { const conversations = [ { id: 1, name: 'Teste', status: 'open' } ]; render(<ConversationList conversations={conversations} />); expect(screen.getByText('Teste')).toBeInTheDocument(); });","title":"3. Testes Frontend"},{"location":"development/contributing/#code-review","text":"","title":"Code Review"},{"location":"development/contributing/#1-como-revisar","text":"Verifique a funcionalidade Teste o c\u00f3digo localmente Verifique testes Comente sugest\u00f5es construtivas Aprove se estiver satisfeito","title":"1. Como Revisar"},{"location":"development/contributing/#2-o-que-procurar","text":"Funcionalidade correta C\u00f3digo limpo e leg\u00edvel Testes adequados Documenta\u00e7\u00e3o atualizada Performance adequada Seguran\u00e7a","title":"2. O que Procurar"},{"location":"development/contributing/#3-comentarios","text":"Seja construtivo Explique o porqu\u00ea Sugira alternativas Reconhe\u00e7a boas pr\u00e1ticas Seja respeitoso","title":"3. Coment\u00e1rios"},{"location":"development/contributing/#comunidade","text":"","title":"Comunidade"},{"location":"development/contributing/#1-codigo-de-conduta","text":"Seja respeitoso Seja inclusivo Seja construtivo Seja paciente Seja colaborativo","title":"1. C\u00f3digo de Conduta"},{"location":"development/contributing/#2-comunicacao","text":"Use issues para problemas Use discussions para ideias Use pull requests para c\u00f3digo Seja claro e direto Seja paciente com respostas","title":"2. Comunica\u00e7\u00e3o"},{"location":"development/contributing/#3-suporte","text":"Leia a documenta\u00e7\u00e3o primeiro Procure em issues existentes Seja espec\u00edfico no problema Inclua logs e screenshots Seja paciente","title":"3. Suporte"},{"location":"development/contributing/#roadmap","text":"","title":"Roadmap"},{"location":"development/contributing/#1-funcionalidades-planejadas","text":"[ ] Integra\u00e7\u00e3o com Telegram [ ] Sistema de templates [ ] Analytics avan\u00e7ados [ ] API GraphQL [ ] Mobile app","title":"1. Funcionalidades Planejadas"},{"location":"development/contributing/#2-melhorias-tecnicas","text":"[ ] Testes E2E [ ] CI/CD melhorado [ ] Monitoramento avan\u00e7ado [ ] Cache distribu\u00eddo [ ] Microservi\u00e7os","title":"2. Melhorias T\u00e9cnicas"},{"location":"development/contributing/#3-documentacao","text":"[ ] Tutoriais em v\u00eddeo [ ] Exemplos pr\u00e1ticos [ ] Guias de deploy [ ] Troubleshooting [ ] FAQ","title":"3. Documenta\u00e7\u00e3o"},{"location":"development/contributing/#proximos-passos","text":"Estrutura - Entenda a estrutura do projeto Troubleshooting - Resolva problemas API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Pr\u00f3ximos Passos"},{"location":"development/contributing/#contato","text":"GitHub : juniorssilvaa/niochat Email : suporte@niochat.com.br Discord : Link do servidor Twitter : @niochat Obrigado por contribuir para o NioChat! \ud83d\ude80","title":"Contato"},{"location":"development/structure/","text":"Estrutura do Projeto Este documento explica a estrutura do projeto NioChat e como navegar pelo c\u00f3digo. Estrutura Geral niochat/ \u251c\u2500\u2500 backend/ # Django Backend \u2502 \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es externas \u2502 \u2514\u2500\u2500 requirements.txt # Depend\u00eancias Python \u251c\u2500\u2500 frontend/ # React Frontend \u2502 \u2514\u2500\u2500 frontend/ # Aplica\u00e7\u00e3o React \u2502 \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u2502 \u2514\u2500\u2500 package.json # Depend\u00eancias Node.js \u251c\u2500\u2500 docs/ # Documenta\u00e7\u00e3o \u251c\u2500\u2500 nginx/ # Configura\u00e7\u00f5es Nginx \u251c\u2500\u2500 systemd/ # Servi\u00e7os Systemd \u2514\u2500\u2500 scripts/ # Scripts utilit\u00e1rios Backend (Django) Estrutura do Backend backend/ \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py # Configura\u00e7\u00f5es \u2502 \u251c\u2500\u2500 urls.py # URLs principais \u2502 \u251c\u2500\u2500 wsgi.py # WSGI \u2502 \u251c\u2500\u2500 asgi.py # ASGI \u2502 \u2514\u2500\u2500 celery.py # Configura\u00e7\u00e3o Celery \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 models.py # Modelos principais \u2502 \u251c\u2500\u2500 views.py # Views principais \u2502 \u251c\u2500\u2500 serializers.py # Serializers \u2502 \u251c\u2500\u2500 urls.py # URLs da API \u2502 \u251c\u2500\u2500 openai_service.py # Servi\u00e7o OpenAI \u2502 \u251c\u2500\u2500 supabase_service.py # Servi\u00e7o Supabase \u2502 \u251c\u2500\u2500 sgp_client.py # Cliente SGP \u2502 \u2514\u2500\u2500 uazapi_client.py # Cliente Uazapi \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 models.py # Modelos de conversa \u2502 \u251c\u2500\u2500 views.py # Views de conversa \u2502 \u251c\u2500\u2500 serializers.py # Serializers \u2502 \u251c\u2500\u2500 urls.py # URLs \u2502 \u251c\u2500\u2500 csat_automation.py # Automa\u00e7\u00e3o CSAT \u2502 \u251c\u2500\u2500 csat_service.py # Servi\u00e7o CSAT \u2502 \u251c\u2500\u2500 tasks.py # Tarefas Celery \u2502 \u2514\u2500\u2500 signals.py # Signals Django \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es \u2502 \u251c\u2500\u2500 models.py # Modelos de integra\u00e7\u00e3o \u2502 \u251c\u2500\u2500 views.py # Views de integra\u00e7\u00e3o \u2502 \u251c\u2500\u2500 urls.py # URLs \u2502 \u2514\u2500\u2500 utils.py # Utilit\u00e1rios \u251c\u2500\u2500 manage.py # Script de gerenciamento \u2514\u2500\u2500 requirements.txt # Depend\u00eancias Aplica\u00e7\u00f5es Django 1. Core (Aplica\u00e7\u00e3o Principal) Responsabilidade : Funcionalidades centrais Modelos : User, Provedor, Canal, Company Views : Autentica\u00e7\u00e3o, dashboard, configura\u00e7\u00f5es Servi\u00e7os : OpenAI, Supabase, SGP, Uazapi 2. Conversations (Sistema de Conversas) Responsabilidade : Gerenciamento de conversas Modelos : Conversation, Message, Contact, Inbox Views : CRUD de conversas, mensagens Features : CSAT, transfer\u00eancia, atribui\u00e7\u00e3o 3. Integrations (Integra\u00e7\u00f5es) Responsabilidade : Integra\u00e7\u00f5es externas Modelos : Integration, Webhook Views : Webhooks, configura\u00e7\u00f5es Features : WhatsApp, Telegram, Email Frontend (React) Estrutura do Frontend frontend/frontend/ \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 components/ # Componentes React \u2502 \u2502 \u251c\u2500\u2500 dashboard/ # Componentes do dashboard \u2502 \u2502 \u251c\u2500\u2500 chat/ # Componentes de chat \u2502 \u2502 \u251c\u2500\u2500 ui/ # Componentes UI \u2502 \u2502 \u2514\u2500\u2500 layout/ # Componentes de layout \u2502 \u251c\u2500\u2500 hooks/ # Custom hooks \u2502 \u251c\u2500\u2500 services/ # Servi\u00e7os API \u2502 \u251c\u2500\u2500 utils/ # Utilit\u00e1rios \u2502 \u251c\u2500\u2500 context/ # Context API \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u2514\u2500\u2500 App.jsx # Componente principal \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u251c\u2500\u2500 package.json # Depend\u00eancias \u2514\u2500\u2500 vite.config.js # Configura\u00e7\u00e3o Vite Componentes Principais 1. Dashboard DashboardPrincipal : Dashboard principal ConversationAnalysis : An\u00e1lise de conversas AgentPerformanceTable : Performance dos agentes CSATDashboard : Dashboard CSAT 2. Chat ConversationList : Lista de conversas ChatInterface : Interface de chat MessageList : Lista de mensagens MessageInput : Input de mensagem 3. UI Button : Bot\u00e3o reutiliz\u00e1vel Modal : Modal reutiliz\u00e1vel Table : Tabela reutiliz\u00e1vel Form : Formul\u00e1rio reutiliz\u00e1vel Configura\u00e7\u00f5es 1. Django Settings # settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'channels', 'core', 'conversations', 'integrations', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] 2. URLs Principais # niochat/urls.py urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('core.urls')), path('api/', include('conversations.urls')), path('api/', include('integrations.urls')), path('webhook/evolution-uazapi/', webhook_evolution_uazapi), ] 3. Configura\u00e7\u00e3o Celery # niochat/celery.py from celery import Celery from django.conf import settings app = Celery('niochat') app.config_from_object('django.conf:settings', namespace='CELERY') app.autodiscover_tasks() Modelos de Dados 1. Core Models # core/models.py class Provedor(models.Model): name = models.CharField(max_length=100) description = models.TextField() created_at = models.DateTimeField(auto_now_add=True) class User(AbstractUser): provedor = models.ForeignKey(Provedor, on_delete=models.CASCADE) is_agent = models.BooleanField(default=False) is_admin = models.BooleanField(default=False) 2. Conversation Models # conversations/models.py class Conversation(models.Model): contact = models.ForeignKey(Contact, on_delete=models.CASCADE) provedor = models.ForeignKey(Provedor, on_delete=models.CASCADE) status = models.CharField(max_length=20, default='open') assignee = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) created_at = models.DateTimeField(auto_now_add=True) class Message(models.Model): conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE) content = models.TextField() message_type = models.CharField(max_length=20, default='text') is_from_customer = models.BooleanField(default=True) created_at = models.DateTimeField(auto_now_add=True) APIs e Endpoints 1. Core API # core/urls.py urlpatterns = [ path('auth/login/', CustomAuthToken.as_view()), path('auth/me/', UserMeView.as_view()), path('dashboard/stats/', DashboardStatsView.as_view()), path('atendimento/ia/', AtendimentoIAView.as_view()), ] 2. Conversations API # conversations/urls.py urlpatterns = [ path('conversations/', ConversationViewSet.as_view()), path('messages/', MessageViewSet.as_view()), path('csat/feedbacks/', CSATFeedbackViewSet.as_view()), ] Servi\u00e7os 1. OpenAI Service # core/openai_service.py class OpenAIService: def generate_response(self, message, context): # Gerar resposta da IA pass def transcribe_audio(self, audio_file): # Transcrever \u00e1udio pass def analyze_sentiment(self, text): # Analisar sentimento pass 2. Supabase Service # core/supabase_service.py class SupabaseService: def save_conversation(self, data): # Salvar conversa pass def save_message(self, data): # Salvar mensagem pass def save_csat(self, data): # Salvar CSAT pass Tarefas Celery 1. CSAT Automation # conversations/tasks.py @shared_task def send_csat_message(csat_request_id): # Enviar mensagem CSAT pass @shared_task def process_csat_response(message_text, conversation_id): # Processar resposta CSAT pass 2. Background Tasks # conversations/tasks.py @shared_task def sync_to_supabase(): # Sincronizar com Supabase pass @shared_task def cleanup_old_data(): # Limpar dados antigos pass WebSocket 1. Consumers # conversations/consumers.py class DashboardConsumer(AsyncWebsocketConsumer): async def connect(self): # Conectar ao WebSocket pass async def disconnect(self, close_code): # Desconectar pass async def receive(self, text_data): # Receber mensagem pass 2. Routing # conversations/routing.py websocket_urlpatterns = [ path('ws/dashboard/', DashboardConsumer.as_asgi()), path('ws/chat/', ChatConsumer.as_asgi()), ] Testes 1. Testes Unit\u00e1rios # tests/test_models.py class ConversationModelTest(TestCase): def test_create_conversation(self): # Testar cria\u00e7\u00e3o de conversa pass 2. Testes de Integra\u00e7\u00e3o # tests/test_api.py class ConversationAPITest(APITestCase): def test_list_conversations(self): # Testar API de conversas pass Deploy 1. Docker # Dockerfile.backend FROM python:3.12 WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY . . CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8010\"] 2. Systemd # systemd/niochat-backend.service [Unit] Description=NioChat Backend After=network.target [Service] Type=exec User=www-data WorkingDirectory=/opt/niochat/backend ExecStart=/opt/niochat/backend/venv/bin/python manage.py runserver 0.0.0.0:8010 Restart=always Pr\u00f3ximos Passos Contribui\u00e7\u00e3o - Como contribuir Troubleshooting - Resolver problemas API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Estrutura do Projeto"},{"location":"development/structure/#estrutura-do-projeto","text":"Este documento explica a estrutura do projeto NioChat e como navegar pelo c\u00f3digo.","title":"Estrutura do Projeto"},{"location":"development/structure/#estrutura-geral","text":"niochat/ \u251c\u2500\u2500 backend/ # Django Backend \u2502 \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es externas \u2502 \u2514\u2500\u2500 requirements.txt # Depend\u00eancias Python \u251c\u2500\u2500 frontend/ # React Frontend \u2502 \u2514\u2500\u2500 frontend/ # Aplica\u00e7\u00e3o React \u2502 \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u2502 \u2514\u2500\u2500 package.json # Depend\u00eancias Node.js \u251c\u2500\u2500 docs/ # Documenta\u00e7\u00e3o \u251c\u2500\u2500 nginx/ # Configura\u00e7\u00f5es Nginx \u251c\u2500\u2500 systemd/ # Servi\u00e7os Systemd \u2514\u2500\u2500 scripts/ # Scripts utilit\u00e1rios","title":"Estrutura Geral"},{"location":"development/structure/#backend-django","text":"","title":"Backend (Django)"},{"location":"development/structure/#estrutura-do-backend","text":"backend/ \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py # Configura\u00e7\u00f5es \u2502 \u251c\u2500\u2500 urls.py # URLs principais \u2502 \u251c\u2500\u2500 wsgi.py # WSGI \u2502 \u251c\u2500\u2500 asgi.py # ASGI \u2502 \u2514\u2500\u2500 celery.py # Configura\u00e7\u00e3o Celery \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 models.py # Modelos principais \u2502 \u251c\u2500\u2500 views.py # Views principais \u2502 \u251c\u2500\u2500 serializers.py # Serializers \u2502 \u251c\u2500\u2500 urls.py # URLs da API \u2502 \u251c\u2500\u2500 openai_service.py # Servi\u00e7o OpenAI \u2502 \u251c\u2500\u2500 supabase_service.py # Servi\u00e7o Supabase \u2502 \u251c\u2500\u2500 sgp_client.py # Cliente SGP \u2502 \u2514\u2500\u2500 uazapi_client.py # Cliente Uazapi \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 models.py # Modelos de conversa \u2502 \u251c\u2500\u2500 views.py # Views de conversa \u2502 \u251c\u2500\u2500 serializers.py # Serializers \u2502 \u251c\u2500\u2500 urls.py # URLs \u2502 \u251c\u2500\u2500 csat_automation.py # Automa\u00e7\u00e3o CSAT \u2502 \u251c\u2500\u2500 csat_service.py # Servi\u00e7o CSAT \u2502 \u251c\u2500\u2500 tasks.py # Tarefas Celery \u2502 \u2514\u2500\u2500 signals.py # Signals Django \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es \u2502 \u251c\u2500\u2500 models.py # Modelos de integra\u00e7\u00e3o \u2502 \u251c\u2500\u2500 views.py # Views de integra\u00e7\u00e3o \u2502 \u251c\u2500\u2500 urls.py # URLs \u2502 \u2514\u2500\u2500 utils.py # Utilit\u00e1rios \u251c\u2500\u2500 manage.py # Script de gerenciamento \u2514\u2500\u2500 requirements.txt # Depend\u00eancias","title":"Estrutura do Backend"},{"location":"development/structure/#aplicacoes-django","text":"","title":"Aplica\u00e7\u00f5es Django"},{"location":"development/structure/#1-core-aplicacao-principal","text":"Responsabilidade : Funcionalidades centrais Modelos : User, Provedor, Canal, Company Views : Autentica\u00e7\u00e3o, dashboard, configura\u00e7\u00f5es Servi\u00e7os : OpenAI, Supabase, SGP, Uazapi","title":"1. Core (Aplica\u00e7\u00e3o Principal)"},{"location":"development/structure/#2-conversations-sistema-de-conversas","text":"Responsabilidade : Gerenciamento de conversas Modelos : Conversation, Message, Contact, Inbox Views : CRUD de conversas, mensagens Features : CSAT, transfer\u00eancia, atribui\u00e7\u00e3o","title":"2. Conversations (Sistema de Conversas)"},{"location":"development/structure/#3-integrations-integracoes","text":"Responsabilidade : Integra\u00e7\u00f5es externas Modelos : Integration, Webhook Views : Webhooks, configura\u00e7\u00f5es Features : WhatsApp, Telegram, Email","title":"3. Integrations (Integra\u00e7\u00f5es)"},{"location":"development/structure/#frontend-react","text":"","title":"Frontend (React)"},{"location":"development/structure/#estrutura-do-frontend","text":"frontend/frontend/ \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 components/ # Componentes React \u2502 \u2502 \u251c\u2500\u2500 dashboard/ # Componentes do dashboard \u2502 \u2502 \u251c\u2500\u2500 chat/ # Componentes de chat \u2502 \u2502 \u251c\u2500\u2500 ui/ # Componentes UI \u2502 \u2502 \u2514\u2500\u2500 layout/ # Componentes de layout \u2502 \u251c\u2500\u2500 hooks/ # Custom hooks \u2502 \u251c\u2500\u2500 services/ # Servi\u00e7os API \u2502 \u251c\u2500\u2500 utils/ # Utilit\u00e1rios \u2502 \u251c\u2500\u2500 context/ # Context API \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u2514\u2500\u2500 App.jsx # Componente principal \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u251c\u2500\u2500 package.json # Depend\u00eancias \u2514\u2500\u2500 vite.config.js # Configura\u00e7\u00e3o Vite","title":"Estrutura do Frontend"},{"location":"development/structure/#componentes-principais","text":"","title":"Componentes Principais"},{"location":"development/structure/#1-dashboard","text":"DashboardPrincipal : Dashboard principal ConversationAnalysis : An\u00e1lise de conversas AgentPerformanceTable : Performance dos agentes CSATDashboard : Dashboard CSAT","title":"1. Dashboard"},{"location":"development/structure/#2-chat","text":"ConversationList : Lista de conversas ChatInterface : Interface de chat MessageList : Lista de mensagens MessageInput : Input de mensagem","title":"2. Chat"},{"location":"development/structure/#3-ui","text":"Button : Bot\u00e3o reutiliz\u00e1vel Modal : Modal reutiliz\u00e1vel Table : Tabela reutiliz\u00e1vel Form : Formul\u00e1rio reutiliz\u00e1vel","title":"3. UI"},{"location":"development/structure/#configuracoes","text":"","title":"Configura\u00e7\u00f5es"},{"location":"development/structure/#1-django-settings","text":"# settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'channels', 'core', 'conversations', 'integrations', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ]","title":"1. Django Settings"},{"location":"development/structure/#2-urls-principais","text":"# niochat/urls.py urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('core.urls')), path('api/', include('conversations.urls')), path('api/', include('integrations.urls')), path('webhook/evolution-uazapi/', webhook_evolution_uazapi), ]","title":"2. URLs Principais"},{"location":"development/structure/#3-configuracao-celery","text":"# niochat/celery.py from celery import Celery from django.conf import settings app = Celery('niochat') app.config_from_object('django.conf:settings', namespace='CELERY') app.autodiscover_tasks()","title":"3. Configura\u00e7\u00e3o Celery"},{"location":"development/structure/#modelos-de-dados","text":"","title":"Modelos de Dados"},{"location":"development/structure/#1-core-models","text":"# core/models.py class Provedor(models.Model): name = models.CharField(max_length=100) description = models.TextField() created_at = models.DateTimeField(auto_now_add=True) class User(AbstractUser): provedor = models.ForeignKey(Provedor, on_delete=models.CASCADE) is_agent = models.BooleanField(default=False) is_admin = models.BooleanField(default=False)","title":"1. Core Models"},{"location":"development/structure/#2-conversation-models","text":"# conversations/models.py class Conversation(models.Model): contact = models.ForeignKey(Contact, on_delete=models.CASCADE) provedor = models.ForeignKey(Provedor, on_delete=models.CASCADE) status = models.CharField(max_length=20, default='open') assignee = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) created_at = models.DateTimeField(auto_now_add=True) class Message(models.Model): conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE) content = models.TextField() message_type = models.CharField(max_length=20, default='text') is_from_customer = models.BooleanField(default=True) created_at = models.DateTimeField(auto_now_add=True)","title":"2. Conversation Models"},{"location":"development/structure/#apis-e-endpoints","text":"","title":"APIs e Endpoints"},{"location":"development/structure/#1-core-api","text":"# core/urls.py urlpatterns = [ path('auth/login/', CustomAuthToken.as_view()), path('auth/me/', UserMeView.as_view()), path('dashboard/stats/', DashboardStatsView.as_view()), path('atendimento/ia/', AtendimentoIAView.as_view()), ]","title":"1. Core API"},{"location":"development/structure/#2-conversations-api","text":"# conversations/urls.py urlpatterns = [ path('conversations/', ConversationViewSet.as_view()), path('messages/', MessageViewSet.as_view()), path('csat/feedbacks/', CSATFeedbackViewSet.as_view()), ]","title":"2. Conversations API"},{"location":"development/structure/#servicos","text":"","title":"Servi\u00e7os"},{"location":"development/structure/#1-openai-service","text":"# core/openai_service.py class OpenAIService: def generate_response(self, message, context): # Gerar resposta da IA pass def transcribe_audio(self, audio_file): # Transcrever \u00e1udio pass def analyze_sentiment(self, text): # Analisar sentimento pass","title":"1. OpenAI Service"},{"location":"development/structure/#2-supabase-service","text":"# core/supabase_service.py class SupabaseService: def save_conversation(self, data): # Salvar conversa pass def save_message(self, data): # Salvar mensagem pass def save_csat(self, data): # Salvar CSAT pass","title":"2. Supabase Service"},{"location":"development/structure/#tarefas-celery","text":"","title":"Tarefas Celery"},{"location":"development/structure/#1-csat-automation","text":"# conversations/tasks.py @shared_task def send_csat_message(csat_request_id): # Enviar mensagem CSAT pass @shared_task def process_csat_response(message_text, conversation_id): # Processar resposta CSAT pass","title":"1. CSAT Automation"},{"location":"development/structure/#2-background-tasks","text":"# conversations/tasks.py @shared_task def sync_to_supabase(): # Sincronizar com Supabase pass @shared_task def cleanup_old_data(): # Limpar dados antigos pass","title":"2. Background Tasks"},{"location":"development/structure/#websocket","text":"","title":"WebSocket"},{"location":"development/structure/#1-consumers","text":"# conversations/consumers.py class DashboardConsumer(AsyncWebsocketConsumer): async def connect(self): # Conectar ao WebSocket pass async def disconnect(self, close_code): # Desconectar pass async def receive(self, text_data): # Receber mensagem pass","title":"1. Consumers"},{"location":"development/structure/#2-routing","text":"# conversations/routing.py websocket_urlpatterns = [ path('ws/dashboard/', DashboardConsumer.as_asgi()), path('ws/chat/', ChatConsumer.as_asgi()), ]","title":"2. Routing"},{"location":"development/structure/#testes","text":"","title":"Testes"},{"location":"development/structure/#1-testes-unitarios","text":"# tests/test_models.py class ConversationModelTest(TestCase): def test_create_conversation(self): # Testar cria\u00e7\u00e3o de conversa pass","title":"1. Testes Unit\u00e1rios"},{"location":"development/structure/#2-testes-de-integracao","text":"# tests/test_api.py class ConversationAPITest(APITestCase): def test_list_conversations(self): # Testar API de conversas pass","title":"2. Testes de Integra\u00e7\u00e3o"},{"location":"development/structure/#deploy","text":"","title":"Deploy"},{"location":"development/structure/#1-docker","text":"# Dockerfile.backend FROM python:3.12 WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY . . CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8010\"]","title":"1. Docker"},{"location":"development/structure/#2-systemd","text":"# systemd/niochat-backend.service [Unit] Description=NioChat Backend After=network.target [Service] Type=exec User=www-data WorkingDirectory=/opt/niochat/backend ExecStart=/opt/niochat/backend/venv/bin/python manage.py runserver 0.0.0.0:8010 Restart=always","title":"2. Systemd"},{"location":"development/structure/#proximos-passos","text":"Contribui\u00e7\u00e3o - Como contribuir Troubleshooting - Resolver problemas API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Pr\u00f3ximos Passos"},{"location":"development/troubleshooting/","text":"Troubleshooting Este guia ajuda a resolver problemas comuns no NioChat. Problemas de Instala\u00e7\u00e3o Python n\u00e3o encontrado # Ubuntu/Debian sudo apt install python3 python3-pip python3-venv # CentOS/RHEL sudo yum install python3 python3-pip Node.js n\u00e3o encontrado # Ubuntu/Debian curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt install nodejs # CentOS/RHEL curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash - sudo yum install nodejs PostgreSQL n\u00e3o encontrado # Ubuntu/Debian sudo apt install postgresql postgresql-contrib # CentOS/RHEL sudo yum install postgresql postgresql-server sudo postgresql-setup initdb sudo systemctl enable postgresql sudo systemctl start postgresql Redis n\u00e3o encontrado # Ubuntu/Debian sudo apt install redis-server # CentOS/RHEL sudo yum install redis sudo systemctl enable redis sudo systemctl start redis Problemas de Backend Erro de migra\u00e7\u00e3o # Verificar status das migra\u00e7\u00f5es python manage.py showmigrations # Aplicar migra\u00e7\u00f5es pendentes python manage.py migrate # Resetar migra\u00e7\u00f5es (cuidado!) python manage.py migrate --fake-initial Erro de banco de dados # Verificar conex\u00e3o python manage.py dbshell # Testar conex\u00e3o python manage.py shell >>> from django.db import connection >>> connection.ensure_connection() Erro de Redis # Verificar status redis-cli ping # Verificar logs sudo journalctl -u redis-server Erro de Celery # Verificar status celery -A niochat inspect active # Verificar workers celery -A niochat inspect stats # Reiniciar worker sudo systemctl restart niochat-celery Problemas de Frontend Erro de build # Limpar cache npm cache clean --force # Remover node_modules rm -rf node_modules package-lock.json # Reinstalar npm install # Build npm run build Erro de depend\u00eancias # Verificar vers\u00e3o do Node node --version # Atualizar npm npm install -g npm@latest # Verificar depend\u00eancias npm audit npm audit fix Problemas de API Erro 500 # Verificar logs tail -f logs/django.log # Verificar settings python manage.py check # Verificar banco python manage.py dbshell Erro 404 # Verificar URLs python manage.py show_urls # Verificar rotas python manage.py shell >>> from django.urls import reverse >>> reverse('api:conversations-list') Erro de autentica\u00e7\u00e3o # Verificar tokens python manage.py shell >>> from rest_framework.authtoken.models import Token >>> Token.objects.all() # Criar token python manage.py shell >>> from django.contrib.auth.models import User >>> from rest_framework.authtoken.models import Token >>> user = User.objects.get(username='admin') >>> token = Token.objects.create(user=user) >>> print(token.key) Problemas de WebSocket Conex\u00e3o falha // Verificar URL const ws = new WebSocket('ws://localhost:8010/ws/dashboard/'); // Verificar autentica\u00e7\u00e3o const ws = new WebSocket('ws://localhost:8010/ws/dashboard/?token=seu_token'); // Verificar logs tail -f logs/django.log Mensagens n\u00e3o chegam # Verificar status do WebSocket python manage.py shell >>> from channels.layers import get_channel_layer >>> channel_layer = get_channel_layer() >>> channel_layer.send('test', {'type': 'test'}) Problemas de Integra\u00e7\u00e3o Uazapi n\u00e3o conecta # Verificar URL curl -I https://seu-provedor.uazapi.com # Verificar token curl -H \"Authorization: Bearer seu_token\" https://seu-provedor.uazapi.com/api/status OpenAI n\u00e3o responde # Verificar API key python manage.py shell >>> from core.openai_service import openai_service >>> openai_service.test_connection() Supabase n\u00e3o conecta # Verificar configura\u00e7\u00e3o python manage.py shell >>> from core.supabase_service import supabase_service >>> supabase_service.test_connection() Problemas de Performance Lento # Verificar CPU top # Verificar mem\u00f3ria free -h # Verificar disco df -h # Verificar processos ps aux | grep python Alto uso de mem\u00f3ria # Verificar Redis redis-cli info memory # Verificar PostgreSQL sudo -u postgres psql -c \"SELECT * FROM pg_stat_activity;\" # Verificar Celery celery -A niochat inspect stats Problemas de Logs Logs n\u00e3o aparecem # Verificar configura\u00e7\u00e3o python manage.py shell >>> import logging >>> logger = logging.getLogger('django') >>> logger.info('Teste') # Verificar arquivo de log ls -la logs/ tail -f logs/django.log Logs muito grandes # Rotacionar logs sudo logrotate -f /etc/logrotate.d/django # Limpar logs antigos find logs/ -name \"*.log\" -mtime +7 -delete Problemas de Seguran\u00e7a Erro de CSRF # Verificar configura\u00e7\u00e3o python manage.py shell >>> from django.conf import settings >>> settings.CSRF_TRUSTED_ORIGINS Erro de CORS # Verificar configura\u00e7\u00e3o python manage.py shell >>> from django.conf import settings >>> settings.CORS_ALLOWED_ORIGINS Problemas de Deploy Build falha # Verificar depend\u00eancias pip check # Verificar requirements pip install -r requirements.txt # Verificar Python python --version Deploy n\u00e3o funciona # Verificar permiss\u00f5es ls -la /opt/niochat/ # Verificar servi\u00e7os sudo systemctl status niochat-backend sudo systemctl status niochat-celery Comandos \u00dateis Verificar status # Servi\u00e7os sudo systemctl status niochat-backend sudo systemctl status niochat-celery sudo systemctl status niochat-celery-beat # Banco de dados sudo -u postgres psql -d niochat -c \"SELECT version();\" # Redis redis-cli ping # Nginx sudo nginx -t Limpar cache # Django python manage.py clear_cache # Redis redis-cli flushall # Nginx sudo nginx -s reload Reiniciar servi\u00e7os # Todos os servi\u00e7os sudo systemctl restart niochat-backend sudo systemctl restart niochat-celery sudo systemctl restart niochat-celery-beat # Nginx sudo systemctl restart nginx # PostgreSQL sudo systemctl restart postgresql # Redis sudo systemctl restart redis-server Logs Importantes Django tail -f logs/django.log Celery tail -f logs/celery.log Nginx tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log Sistema journalctl -u niochat-backend -f journalctl -u niochat-celery -f Contato Se voc\u00ea n\u00e3o conseguir resolver o problema: GitHub Issues : Reportar problema Email : suporte@niochat.com.br Documenta\u00e7\u00e3o : Navegue pelas se\u00e7\u00f5es da documenta\u00e7\u00e3o Pr\u00f3ximos Passos Instala\u00e7\u00e3o - Configure o ambiente Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API","title":"Troubleshooting"},{"location":"development/troubleshooting/#troubleshooting","text":"Este guia ajuda a resolver problemas comuns no NioChat.","title":"Troubleshooting"},{"location":"development/troubleshooting/#problemas-de-instalacao","text":"","title":"Problemas de Instala\u00e7\u00e3o"},{"location":"development/troubleshooting/#python-nao-encontrado","text":"# Ubuntu/Debian sudo apt install python3 python3-pip python3-venv # CentOS/RHEL sudo yum install python3 python3-pip","title":"Python n\u00e3o encontrado"},{"location":"development/troubleshooting/#nodejs-nao-encontrado","text":"# Ubuntu/Debian curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt install nodejs # CentOS/RHEL curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash - sudo yum install nodejs","title":"Node.js n\u00e3o encontrado"},{"location":"development/troubleshooting/#postgresql-nao-encontrado","text":"# Ubuntu/Debian sudo apt install postgresql postgresql-contrib # CentOS/RHEL sudo yum install postgresql postgresql-server sudo postgresql-setup initdb sudo systemctl enable postgresql sudo systemctl start postgresql","title":"PostgreSQL n\u00e3o encontrado"},{"location":"development/troubleshooting/#redis-nao-encontrado","text":"# Ubuntu/Debian sudo apt install redis-server # CentOS/RHEL sudo yum install redis sudo systemctl enable redis sudo systemctl start redis","title":"Redis n\u00e3o encontrado"},{"location":"development/troubleshooting/#problemas-de-backend","text":"","title":"Problemas de Backend"},{"location":"development/troubleshooting/#erro-de-migracao","text":"# Verificar status das migra\u00e7\u00f5es python manage.py showmigrations # Aplicar migra\u00e7\u00f5es pendentes python manage.py migrate # Resetar migra\u00e7\u00f5es (cuidado!) python manage.py migrate --fake-initial","title":"Erro de migra\u00e7\u00e3o"},{"location":"development/troubleshooting/#erro-de-banco-de-dados","text":"# Verificar conex\u00e3o python manage.py dbshell # Testar conex\u00e3o python manage.py shell >>> from django.db import connection >>> connection.ensure_connection()","title":"Erro de banco de dados"},{"location":"development/troubleshooting/#erro-de-redis","text":"# Verificar status redis-cli ping # Verificar logs sudo journalctl -u redis-server","title":"Erro de Redis"},{"location":"development/troubleshooting/#erro-de-celery","text":"# Verificar status celery -A niochat inspect active # Verificar workers celery -A niochat inspect stats # Reiniciar worker sudo systemctl restart niochat-celery","title":"Erro de Celery"},{"location":"development/troubleshooting/#problemas-de-frontend","text":"","title":"Problemas de Frontend"},{"location":"development/troubleshooting/#erro-de-build","text":"# Limpar cache npm cache clean --force # Remover node_modules rm -rf node_modules package-lock.json # Reinstalar npm install # Build npm run build","title":"Erro de build"},{"location":"development/troubleshooting/#erro-de-dependencias","text":"# Verificar vers\u00e3o do Node node --version # Atualizar npm npm install -g npm@latest # Verificar depend\u00eancias npm audit npm audit fix","title":"Erro de depend\u00eancias"},{"location":"development/troubleshooting/#problemas-de-api","text":"","title":"Problemas de API"},{"location":"development/troubleshooting/#erro-500","text":"# Verificar logs tail -f logs/django.log # Verificar settings python manage.py check # Verificar banco python manage.py dbshell","title":"Erro 500"},{"location":"development/troubleshooting/#erro-404","text":"# Verificar URLs python manage.py show_urls # Verificar rotas python manage.py shell >>> from django.urls import reverse >>> reverse('api:conversations-list')","title":"Erro 404"},{"location":"development/troubleshooting/#erro-de-autenticacao","text":"# Verificar tokens python manage.py shell >>> from rest_framework.authtoken.models import Token >>> Token.objects.all() # Criar token python manage.py shell >>> from django.contrib.auth.models import User >>> from rest_framework.authtoken.models import Token >>> user = User.objects.get(username='admin') >>> token = Token.objects.create(user=user) >>> print(token.key)","title":"Erro de autentica\u00e7\u00e3o"},{"location":"development/troubleshooting/#problemas-de-websocket","text":"","title":"Problemas de WebSocket"},{"location":"development/troubleshooting/#conexao-falha","text":"// Verificar URL const ws = new WebSocket('ws://localhost:8010/ws/dashboard/'); // Verificar autentica\u00e7\u00e3o const ws = new WebSocket('ws://localhost:8010/ws/dashboard/?token=seu_token'); // Verificar logs tail -f logs/django.log","title":"Conex\u00e3o falha"},{"location":"development/troubleshooting/#mensagens-nao-chegam","text":"# Verificar status do WebSocket python manage.py shell >>> from channels.layers import get_channel_layer >>> channel_layer = get_channel_layer() >>> channel_layer.send('test', {'type': 'test'})","title":"Mensagens n\u00e3o chegam"},{"location":"development/troubleshooting/#problemas-de-integracao","text":"","title":"Problemas de Integra\u00e7\u00e3o"},{"location":"development/troubleshooting/#uazapi-nao-conecta","text":"# Verificar URL curl -I https://seu-provedor.uazapi.com # Verificar token curl -H \"Authorization: Bearer seu_token\" https://seu-provedor.uazapi.com/api/status","title":"Uazapi n\u00e3o conecta"},{"location":"development/troubleshooting/#openai-nao-responde","text":"# Verificar API key python manage.py shell >>> from core.openai_service import openai_service >>> openai_service.test_connection()","title":"OpenAI n\u00e3o responde"},{"location":"development/troubleshooting/#supabase-nao-conecta","text":"# Verificar configura\u00e7\u00e3o python manage.py shell >>> from core.supabase_service import supabase_service >>> supabase_service.test_connection()","title":"Supabase n\u00e3o conecta"},{"location":"development/troubleshooting/#problemas-de-performance","text":"","title":"Problemas de Performance"},{"location":"development/troubleshooting/#lento","text":"# Verificar CPU top # Verificar mem\u00f3ria free -h # Verificar disco df -h # Verificar processos ps aux | grep python","title":"Lento"},{"location":"development/troubleshooting/#alto-uso-de-memoria","text":"# Verificar Redis redis-cli info memory # Verificar PostgreSQL sudo -u postgres psql -c \"SELECT * FROM pg_stat_activity;\" # Verificar Celery celery -A niochat inspect stats","title":"Alto uso de mem\u00f3ria"},{"location":"development/troubleshooting/#problemas-de-logs","text":"","title":"Problemas de Logs"},{"location":"development/troubleshooting/#logs-nao-aparecem","text":"# Verificar configura\u00e7\u00e3o python manage.py shell >>> import logging >>> logger = logging.getLogger('django') >>> logger.info('Teste') # Verificar arquivo de log ls -la logs/ tail -f logs/django.log","title":"Logs n\u00e3o aparecem"},{"location":"development/troubleshooting/#logs-muito-grandes","text":"# Rotacionar logs sudo logrotate -f /etc/logrotate.d/django # Limpar logs antigos find logs/ -name \"*.log\" -mtime +7 -delete","title":"Logs muito grandes"},{"location":"development/troubleshooting/#problemas-de-seguranca","text":"","title":"Problemas de Seguran\u00e7a"},{"location":"development/troubleshooting/#erro-de-csrf","text":"# Verificar configura\u00e7\u00e3o python manage.py shell >>> from django.conf import settings >>> settings.CSRF_TRUSTED_ORIGINS","title":"Erro de CSRF"},{"location":"development/troubleshooting/#erro-de-cors","text":"# Verificar configura\u00e7\u00e3o python manage.py shell >>> from django.conf import settings >>> settings.CORS_ALLOWED_ORIGINS","title":"Erro de CORS"},{"location":"development/troubleshooting/#problemas-de-deploy","text":"","title":"Problemas de Deploy"},{"location":"development/troubleshooting/#build-falha","text":"# Verificar depend\u00eancias pip check # Verificar requirements pip install -r requirements.txt # Verificar Python python --version","title":"Build falha"},{"location":"development/troubleshooting/#deploy-nao-funciona","text":"# Verificar permiss\u00f5es ls -la /opt/niochat/ # Verificar servi\u00e7os sudo systemctl status niochat-backend sudo systemctl status niochat-celery","title":"Deploy n\u00e3o funciona"},{"location":"development/troubleshooting/#comandos-uteis","text":"","title":"Comandos \u00dateis"},{"location":"development/troubleshooting/#verificar-status","text":"# Servi\u00e7os sudo systemctl status niochat-backend sudo systemctl status niochat-celery sudo systemctl status niochat-celery-beat # Banco de dados sudo -u postgres psql -d niochat -c \"SELECT version();\" # Redis redis-cli ping # Nginx sudo nginx -t","title":"Verificar status"},{"location":"development/troubleshooting/#limpar-cache","text":"# Django python manage.py clear_cache # Redis redis-cli flushall # Nginx sudo nginx -s reload","title":"Limpar cache"},{"location":"development/troubleshooting/#reiniciar-servicos","text":"# Todos os servi\u00e7os sudo systemctl restart niochat-backend sudo systemctl restart niochat-celery sudo systemctl restart niochat-celery-beat # Nginx sudo systemctl restart nginx # PostgreSQL sudo systemctl restart postgresql # Redis sudo systemctl restart redis-server","title":"Reiniciar servi\u00e7os"},{"location":"development/troubleshooting/#logs-importantes","text":"","title":"Logs Importantes"},{"location":"development/troubleshooting/#django","text":"tail -f logs/django.log","title":"Django"},{"location":"development/troubleshooting/#celery","text":"tail -f logs/celery.log","title":"Celery"},{"location":"development/troubleshooting/#nginx","text":"tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log","title":"Nginx"},{"location":"development/troubleshooting/#sistema","text":"journalctl -u niochat-backend -f journalctl -u niochat-celery -f","title":"Sistema"},{"location":"development/troubleshooting/#contato","text":"Se voc\u00ea n\u00e3o conseguir resolver o problema: GitHub Issues : Reportar problema Email : suporte@niochat.com.br Documenta\u00e7\u00e3o : Navegue pelas se\u00e7\u00f5es da documenta\u00e7\u00e3o","title":"Contato"},{"location":"development/troubleshooting/#proximos-passos","text":"Instala\u00e7\u00e3o - Configure o ambiente Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API","title":"Pr\u00f3ximos Passos"},{"location":"installation/development/","text":"Instala\u00e7\u00e3o em Desenvolvimento Este guia explica como configurar o ambiente de desenvolvimento do NioChat. Pr\u00e9-requisitos Software Necess\u00e1rio Python : 3.8 ou superior Node.js : 16 ou superior PostgreSQL : 12 ou superior Redis : 6 ou superior Git : Para clonar o reposit\u00f3rio Sistema Operacional Ubuntu : 20.04+ CentOS : 8+ macOS : 10.15+ Windows : 10+ (com WSL recomendado) Instala\u00e7\u00e3o 1. Clone do Reposit\u00f3rio git clone https://github.com/juniorssilvaa/niochat.git cd niochat 2. Configurar Backend Criar Ambiente Virtual cd backend python -m venv venv source venv/bin/activate # Linux/macOS # ou venv\\Scripts\\activate # Windows Instalar Depend\u00eancias pip install -r requirements.txt Configurar Banco de Dados # Criar banco de dados createdb niochat # Aplicar migra\u00e7\u00f5es python manage.py migrate # Criar superusu\u00e1rio python manage.py createsuperuser # Coletar arquivos est\u00e1ticos python manage.py collectstatic 3. Configurar Frontend Instalar Depend\u00eancias cd frontend/frontend npm install Build de Desenvolvimento npm run build 4. Configurar Vari\u00e1veis de Ambiente Criar arquivo .env cd backend cp .env.example .env Configurar .env # Django DEBUG=True SECRET_KEY=sua_chave_secreta_aqui ALLOWED_HOSTS=localhost,127.0.0.1 # Banco de Dados DATABASE_URL=postgresql://usuario:senha@localhost:5432/niochat # Redis (porta 6380) REDIS_URL=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 REDIS_HOST=49.12.9.11 REDIS_PORT=6380 REDIS_PASSWORD=SUA_SENHA_REDIS # RabbitMQ (para Celery broker) CELERY_BROKER_URL=amqp://admin:SUA_SENHA_RABBITMQ@49.12.9.11:5672 CELERY_RESULT_BACKEND=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 CELERY_RESULT_EXPIRES=300 CELERY_TASK_IGNORE_RESULT=False # OpenAI OPENAI_API_KEY=sua_chave_openai # Supabase SUPABASE_URL=sua_url_supabase SUPABASE_ANON_KEY=sua_chave_supabase # Uazapi UAZAPI_URL=https://seu-provedor.uazapi.com UAZAPI_TOKEN=seu_token_uazapi Executar o Sistema 1. Iniciar Servi\u00e7os Terminal 1 - Backend cd backend source venv/bin/activate python manage.py runserver 0.0.0.0:8010 Terminal 2 - Celery Worker cd backend source venv/bin/activate celery -A niochat worker -l info Terminal 3 - Celery Beat cd backend source venv/bin/activate celery -A niochat beat -l info Terminal 4 - Frontend cd frontend/frontend npm run dev 2. Acessar o Sistema Frontend : http://localhost:5173 Backend : http://localhost:8010 Admin : http://localhost:8010/admin Configura\u00e7\u00e3o Adicional Redis (Porta 6380) # Ubuntu/Debian sudo apt install redis-server sudo systemctl start redis-server # CentOS/RHEL sudo yum install redis sudo systemctl start redis # macOS brew install redis brew services start redis # Configurar Redis para porta 6380 (se necess\u00e1rio) # Editar /etc/redis/redis.conf # port 6380 # requirepass SUA_SENHA_REDIS RabbitMQ (para Celery) # Ubuntu/Debian sudo apt install rabbitmq-server sudo systemctl start rabbitmq-server sudo systemctl enable rabbitmq-server # CentOS/RHEL sudo yum install rabbitmq-server sudo systemctl start rabbitmq-server sudo systemctl enable rabbitmq-server # macOS brew install rabbitmq brew services start rabbitmq # Configurar usu\u00e1rio e senha sudo rabbitmqctl add_user admin SUA_SENHA_RABBITMQ sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\" PostgreSQL # Ubuntu/Debian sudo apt install postgresql postgresql-contrib sudo -u postgres createdb niochat # CentOS/RHEL sudo yum install postgresql postgresql-server sudo postgresql-setup initdb sudo systemctl start postgresql sudo -u postgres createdb niochat # macOS brew install postgresql brew services start postgresql createdb niochat Desenvolvimento Estrutura do Projeto niochat/ \u251c\u2500\u2500 backend/ # Django Backend \u2502 \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es externas \u2502 \u2514\u2500\u2500 requirements.txt # Depend\u00eancias Python \u251c\u2500\u2500 frontend/ # React Frontend \u2502 \u2514\u2500\u2500 frontend/ # Aplica\u00e7\u00e3o React \u2502 \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u2502 \u2514\u2500\u2500 package.json # Depend\u00eancias Node.js \u2514\u2500\u2500 docs/ # Documenta\u00e7\u00e3o Comandos \u00dateis Backend # Aplicar migra\u00e7\u00f5es python manage.py migrate # Criar migra\u00e7\u00e3o python manage.py makemigrations # Shell Django python manage.py shell # Testes python manage.py test # Coletar est\u00e1ticos python manage.py collectstatic Frontend # Instalar depend\u00eancias npm install # Desenvolvimento npm run dev # Build produ\u00e7\u00e3o npm run build # Testes npm test # Lint npm run lint Debugging Logs do Django # Ver logs em tempo real tail -f logs/django.log # Configurar n\u00edvel de log export DJANGO_LOG_LEVEL=DEBUG Logs do Celery # Ver logs do worker tail -f logs/celery.log # Verificar workers ativos celery -A niochat inspect active Logs do Redis # Monitorar Redis redis-cli monitor # Verificar conex\u00e3o redis-cli ping Troubleshooting Problemas Comuns Porta j\u00e1 em uso # Verificar processos na porta lsof -i :8010 lsof -i :5173 # Matar processo kill -9 PID Erro de banco de dados # Verificar conex\u00e3o python manage.py dbshell # Resetar banco python manage.py flush Erro de Redis # Verificar status redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping # Reiniciar Redis sudo systemctl restart redis-server Erro de RabbitMQ # Verificar status sudo systemctl status rabbitmq-server # Verificar conex\u00e3o rabbitmqctl status # Reiniciar RabbitMQ sudo systemctl restart rabbitmq-server Erro de depend\u00eancias # Atualizar pip pip install --upgrade pip # Reinstalar depend\u00eancias pip install -r requirements.txt --force-reinstall Comandos de Diagn\u00f3stico Verificar Status # Django python manage.py check # Banco de dados python manage.py dbshell # Redis redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping # RabbitMQ rabbitmqctl status # Celery celery -A niochat inspect stats Limpar Cache # Django python manage.py clear_cache # Redis redis-cli flushall # Node.js npm cache clean --force Pr\u00f3ximos Passos Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Instala\u00e7\u00e3o em Desenvolvimento"},{"location":"installation/development/#instalacao-em-desenvolvimento","text":"Este guia explica como configurar o ambiente de desenvolvimento do NioChat.","title":"Instala\u00e7\u00e3o em Desenvolvimento"},{"location":"installation/development/#pre-requisitos","text":"","title":"Pr\u00e9-requisitos"},{"location":"installation/development/#software-necessario","text":"Python : 3.8 ou superior Node.js : 16 ou superior PostgreSQL : 12 ou superior Redis : 6 ou superior Git : Para clonar o reposit\u00f3rio","title":"Software Necess\u00e1rio"},{"location":"installation/development/#sistema-operacional","text":"Ubuntu : 20.04+ CentOS : 8+ macOS : 10.15+ Windows : 10+ (com WSL recomendado)","title":"Sistema Operacional"},{"location":"installation/development/#instalacao","text":"","title":"Instala\u00e7\u00e3o"},{"location":"installation/development/#1-clone-do-repositorio","text":"git clone https://github.com/juniorssilvaa/niochat.git cd niochat","title":"1. Clone do Reposit\u00f3rio"},{"location":"installation/development/#2-configurar-backend","text":"","title":"2. Configurar Backend"},{"location":"installation/development/#criar-ambiente-virtual","text":"cd backend python -m venv venv source venv/bin/activate # Linux/macOS # ou venv\\Scripts\\activate # Windows","title":"Criar Ambiente Virtual"},{"location":"installation/development/#instalar-dependencias","text":"pip install -r requirements.txt","title":"Instalar Depend\u00eancias"},{"location":"installation/development/#configurar-banco-de-dados","text":"# Criar banco de dados createdb niochat # Aplicar migra\u00e7\u00f5es python manage.py migrate # Criar superusu\u00e1rio python manage.py createsuperuser # Coletar arquivos est\u00e1ticos python manage.py collectstatic","title":"Configurar Banco de Dados"},{"location":"installation/development/#3-configurar-frontend","text":"","title":"3. Configurar Frontend"},{"location":"installation/development/#instalar-dependencias_1","text":"cd frontend/frontend npm install","title":"Instalar Depend\u00eancias"},{"location":"installation/development/#build-de-desenvolvimento","text":"npm run build","title":"Build de Desenvolvimento"},{"location":"installation/development/#4-configurar-variaveis-de-ambiente","text":"","title":"4. Configurar Vari\u00e1veis de Ambiente"},{"location":"installation/development/#criar-arquivo-env","text":"cd backend cp .env.example .env","title":"Criar arquivo .env"},{"location":"installation/development/#configurar-env","text":"# Django DEBUG=True SECRET_KEY=sua_chave_secreta_aqui ALLOWED_HOSTS=localhost,127.0.0.1 # Banco de Dados DATABASE_URL=postgresql://usuario:senha@localhost:5432/niochat # Redis (porta 6380) REDIS_URL=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 REDIS_HOST=49.12.9.11 REDIS_PORT=6380 REDIS_PASSWORD=SUA_SENHA_REDIS # RabbitMQ (para Celery broker) CELERY_BROKER_URL=amqp://admin:SUA_SENHA_RABBITMQ@49.12.9.11:5672 CELERY_RESULT_BACKEND=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 CELERY_RESULT_EXPIRES=300 CELERY_TASK_IGNORE_RESULT=False # OpenAI OPENAI_API_KEY=sua_chave_openai # Supabase SUPABASE_URL=sua_url_supabase SUPABASE_ANON_KEY=sua_chave_supabase # Uazapi UAZAPI_URL=https://seu-provedor.uazapi.com UAZAPI_TOKEN=seu_token_uazapi","title":"Configurar .env"},{"location":"installation/development/#executar-o-sistema","text":"","title":"Executar o Sistema"},{"location":"installation/development/#1-iniciar-servicos","text":"","title":"1. Iniciar Servi\u00e7os"},{"location":"installation/development/#terminal-1-backend","text":"cd backend source venv/bin/activate python manage.py runserver 0.0.0.0:8010","title":"Terminal 1 - Backend"},{"location":"installation/development/#terminal-2-celery-worker","text":"cd backend source venv/bin/activate celery -A niochat worker -l info","title":"Terminal 2 - Celery Worker"},{"location":"installation/development/#terminal-3-celery-beat","text":"cd backend source venv/bin/activate celery -A niochat beat -l info","title":"Terminal 3 - Celery Beat"},{"location":"installation/development/#terminal-4-frontend","text":"cd frontend/frontend npm run dev","title":"Terminal 4 - Frontend"},{"location":"installation/development/#2-acessar-o-sistema","text":"Frontend : http://localhost:5173 Backend : http://localhost:8010 Admin : http://localhost:8010/admin","title":"2. Acessar o Sistema"},{"location":"installation/development/#configuracao-adicional","text":"","title":"Configura\u00e7\u00e3o Adicional"},{"location":"installation/development/#redis-porta-6380","text":"# Ubuntu/Debian sudo apt install redis-server sudo systemctl start redis-server # CentOS/RHEL sudo yum install redis sudo systemctl start redis # macOS brew install redis brew services start redis # Configurar Redis para porta 6380 (se necess\u00e1rio) # Editar /etc/redis/redis.conf # port 6380 # requirepass SUA_SENHA_REDIS","title":"Redis (Porta 6380)"},{"location":"installation/development/#rabbitmq-para-celery","text":"# Ubuntu/Debian sudo apt install rabbitmq-server sudo systemctl start rabbitmq-server sudo systemctl enable rabbitmq-server # CentOS/RHEL sudo yum install rabbitmq-server sudo systemctl start rabbitmq-server sudo systemctl enable rabbitmq-server # macOS brew install rabbitmq brew services start rabbitmq # Configurar usu\u00e1rio e senha sudo rabbitmqctl add_user admin SUA_SENHA_RABBITMQ sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"","title":"RabbitMQ (para Celery)"},{"location":"installation/development/#postgresql","text":"# Ubuntu/Debian sudo apt install postgresql postgresql-contrib sudo -u postgres createdb niochat # CentOS/RHEL sudo yum install postgresql postgresql-server sudo postgresql-setup initdb sudo systemctl start postgresql sudo -u postgres createdb niochat # macOS brew install postgresql brew services start postgresql createdb niochat","title":"PostgreSQL"},{"location":"installation/development/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"installation/development/#estrutura-do-projeto","text":"niochat/ \u251c\u2500\u2500 backend/ # Django Backend \u2502 \u251c\u2500\u2500 niochat/ # Configura\u00e7\u00f5es Django \u2502 \u251c\u2500\u2500 core/ # Aplica\u00e7\u00e3o principal \u2502 \u251c\u2500\u2500 conversations/ # Sistema de conversas \u2502 \u251c\u2500\u2500 integrations/ # Integra\u00e7\u00f5es externas \u2502 \u2514\u2500\u2500 requirements.txt # Depend\u00eancias Python \u251c\u2500\u2500 frontend/ # React Frontend \u2502 \u2514\u2500\u2500 frontend/ # Aplica\u00e7\u00e3o React \u2502 \u251c\u2500\u2500 src/ # C\u00f3digo fonte \u2502 \u251c\u2500\u2500 public/ # Arquivos p\u00fablicos \u2502 \u2514\u2500\u2500 package.json # Depend\u00eancias Node.js \u2514\u2500\u2500 docs/ # Documenta\u00e7\u00e3o","title":"Estrutura do Projeto"},{"location":"installation/development/#comandos-uteis","text":"","title":"Comandos \u00dateis"},{"location":"installation/development/#backend","text":"# Aplicar migra\u00e7\u00f5es python manage.py migrate # Criar migra\u00e7\u00e3o python manage.py makemigrations # Shell Django python manage.py shell # Testes python manage.py test # Coletar est\u00e1ticos python manage.py collectstatic","title":"Backend"},{"location":"installation/development/#frontend","text":"# Instalar depend\u00eancias npm install # Desenvolvimento npm run dev # Build produ\u00e7\u00e3o npm run build # Testes npm test # Lint npm run lint","title":"Frontend"},{"location":"installation/development/#debugging","text":"","title":"Debugging"},{"location":"installation/development/#logs-do-django","text":"# Ver logs em tempo real tail -f logs/django.log # Configurar n\u00edvel de log export DJANGO_LOG_LEVEL=DEBUG","title":"Logs do Django"},{"location":"installation/development/#logs-do-celery","text":"# Ver logs do worker tail -f logs/celery.log # Verificar workers ativos celery -A niochat inspect active","title":"Logs do Celery"},{"location":"installation/development/#logs-do-redis","text":"# Monitorar Redis redis-cli monitor # Verificar conex\u00e3o redis-cli ping","title":"Logs do Redis"},{"location":"installation/development/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/development/#problemas-comuns","text":"","title":"Problemas Comuns"},{"location":"installation/development/#porta-ja-em-uso","text":"# Verificar processos na porta lsof -i :8010 lsof -i :5173 # Matar processo kill -9 PID","title":"Porta j\u00e1 em uso"},{"location":"installation/development/#erro-de-banco-de-dados","text":"# Verificar conex\u00e3o python manage.py dbshell # Resetar banco python manage.py flush","title":"Erro de banco de dados"},{"location":"installation/development/#erro-de-redis","text":"# Verificar status redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping # Reiniciar Redis sudo systemctl restart redis-server","title":"Erro de Redis"},{"location":"installation/development/#erro-de-rabbitmq","text":"# Verificar status sudo systemctl status rabbitmq-server # Verificar conex\u00e3o rabbitmqctl status # Reiniciar RabbitMQ sudo systemctl restart rabbitmq-server","title":"Erro de RabbitMQ"},{"location":"installation/development/#erro-de-dependencias","text":"# Atualizar pip pip install --upgrade pip # Reinstalar depend\u00eancias pip install -r requirements.txt --force-reinstall","title":"Erro de depend\u00eancias"},{"location":"installation/development/#comandos-de-diagnostico","text":"","title":"Comandos de Diagn\u00f3stico"},{"location":"installation/development/#verificar-status","text":"# Django python manage.py check # Banco de dados python manage.py dbshell # Redis redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping # RabbitMQ rabbitmqctl status # Celery celery -A niochat inspect stats","title":"Verificar Status"},{"location":"installation/development/#limpar-cache","text":"# Django python manage.py clear_cache # Redis redis-cli flushall # Node.js npm cache clean --force","title":"Limpar Cache"},{"location":"installation/development/#proximos-passos","text":"Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Pr\u00f3ximos Passos"},{"location":"installation/production/","text":"Instala\u00e7\u00e3o em Produ\u00e7\u00e3o Este guia explica como instalar e configurar o NioChat em um ambiente de produ\u00e7\u00e3o. Pr\u00e9-requisitos Servidor Sistema Operacional : Ubuntu 20.04+ ou CentOS 8+ RAM : M\u00ednimo 4GB, recomendado 8GB+ CPU : M\u00ednimo 2 cores, recomendado 4 cores+ Disco : M\u00ednimo 50GB, recomendado 100GB+ Rede : Conex\u00e3o est\u00e1vel com internet Software Python : 3.8+ Node.js : 16+ PostgreSQL : 12+ Redis : 6+ Nginx : 1.18+ Docker : 20+ (opcional) Instala\u00e7\u00e3o do Sistema 1. Atualizar Sistema sudo apt update && sudo apt upgrade -y 2. Instalar Depend\u00eancias sudo apt install -y python3 python3-pip python3-venv nodejs npm postgresql redis-server nginx git 3. Configurar PostgreSQL sudo -u postgres psql CREATE DATABASE niochat; CREATE USER niochat WITH PASSWORD 'senha_segura'; GRANT ALL PRIVILEGES ON DATABASE niochat TO niochat; \\q 4. Configurar Redis (Porta 6380) sudo systemctl enable redis-server sudo systemctl start redis-server # Configurar porta 6380 e senha sudo nano /etc/redis/redis.conf # Adicionar: # port 6380 # requirepass SUA_SENHA_REDIS # bind 0.0.0.0 sudo systemctl restart redis-server 5. Configurar RabbitMQ sudo apt install rabbitmq-server sudo systemctl enable rabbitmq-server sudo systemctl start rabbitmq-server # Configurar usu\u00e1rio e senha sudo rabbitmqctl add_user admin SUA_SENHA_RABBITMQ sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\" Instala\u00e7\u00e3o do NioChat 1. Clone do Reposit\u00f3rio cd /opt sudo git clone https://github.com/juniorssilvaa/niochat.git sudo chown -R $USER:$USER niochat cd niochat 2. Configurar Backend cd backend python3 -m venv venv source venv/bin/activate pip install -r requirements.txt 3. Configurar Frontend cd frontend/frontend npm install npm run build 4. Configurar Vari\u00e1veis de Ambiente sudo nano /opt/niochat/backend/.env # Django DEBUG=False SECRET_KEY=sua_chave_secreta_aqui ALLOWED_HOSTS=seu-dominio.com,www.seu-dominio.com # Banco de Dados DATABASE_URL=postgresql://niochat:senha_segura@localhost:5432/niochat # Redis (porta 6380) REDIS_URL=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 REDIS_HOST=49.12.9.11 REDIS_PORT=6380 REDIS_PASSWORD=SUA_SENHA_REDIS # RabbitMQ (para Celery broker) CELERY_BROKER_URL=amqp://admin:SUA_SENHA_RABBITMQ@49.12.9.11:5672 CELERY_RESULT_BACKEND=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 CELERY_RESULT_EXPIRES=300 CELERY_TASK_IGNORE_RESULT=False # OpenAI OPENAI_API_KEY=sua_chave_openai # Supabase SUPABASE_URL=sua_url_supabase SUPABASE_ANON_KEY=sua_chave_supabase # Uazapi UAZAPI_URL=https://seu-provedor.uazapi.com UAZAPI_TOKEN=seu_token_uazapi # Email EMAIL_HOST=smtp.gmail.com EMAIL_PORT=587 EMAIL_USE_TLS=True EMAIL_HOST_USER=seu-email@gmail.com EMAIL_HOST_PASSWORD=sua_senha_app # Webhook WEBHOOK_SECRET=seu_secret_webhook 5. Configurar Django cd /opt/niochat/backend source venv/bin/activate python manage.py migrate python manage.py collectstatic --noinput python manage.py createsuperuser Configura\u00e7\u00e3o do Nginx 1. Criar Configura\u00e7\u00e3o sudo nano /etc/nginx/sites-available/niochat server { listen 80; server_name seu-dominio.com www.seu-dominio.com; # Redirecionar para HTTPS return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; server_name seu-dominio.com www.seu-dominio.com; # SSL ssl_certificate /etc/letsencrypt/live/seu-dominio.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/seu-dominio.com/privkey.pem; # Frontend location / { root /opt/niochat/frontend/frontend/dist; try_files $uri $uri/ /index.html; } # Backend API location /api/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # WebSocket location /ws/ { proxy_pass http://127.0.0.1:8010; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # Webhooks location /webhook/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # Admin location /admin/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 2. Ativar Site sudo ln -s /etc/nginx/sites-available/niochat /etc/nginx/sites-enabled/ sudo nginx -t sudo systemctl reload nginx Configura\u00e7\u00e3o do SSL 1. Instalar Certbot sudo apt install certbot python3-certbot-nginx 2. Obter Certificado sudo certbot --nginx -d seu-dominio.com -d www.seu-dominio.com 3. Renova\u00e7\u00e3o Autom\u00e1tica sudo crontab -e 0 12 * * * /usr/bin/certbot renew --quiet Configura\u00e7\u00e3o do Systemd 1. Servi\u00e7o Backend sudo nano /etc/systemd/system/niochat-backend.service [Unit] Description=NioChat Backend After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/python manage.py runserver 0.0.0.0:8010 Restart=always RestartSec=10 [Install] WantedBy=multi-user.target 2. Servi\u00e7o Celery sudo nano /etc/systemd/system/niochat-celery.service [Unit] Description=NioChat Celery Worker After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/celery -A niochat worker -l info Restart=always RestartSec=10 [Install] WantedBy=multi-user.target 3. Servi\u00e7o Celery Beat sudo nano /etc/systemd/system/niochat-celery-beat.service [Unit] Description=NioChat Celery Beat After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/celery -A niochat beat -l info Restart=always RestartSec=10 [Install] WantedBy=multi-user.target 4. Ativar Servi\u00e7os sudo systemctl daemon-reload sudo systemctl enable niochat-backend sudo systemctl enable niochat-celery sudo systemctl enable niochat-celery-beat sudo systemctl start niochat-backend sudo systemctl start niochat-celery sudo systemctl start niochat-celery-beat Configura\u00e7\u00e3o do Firewall 1. UFW sudo ufw allow 22 sudo ufw allow 80 sudo ufw allow 443 sudo ufw enable 2. Verificar Status sudo ufw status Monitoramento 1. Logs do Sistema sudo journalctl -u niochat-backend -f sudo journalctl -u niochat-celery -f sudo journalctl -u niochat-celery-beat -f 2. Logs do Nginx sudo tail -f /var/log/nginx/access.log sudo tail -f /var/log/nginx/error.log 3. Logs da Aplica\u00e7\u00e3o sudo tail -f /opt/niochat/backend/logs/django.log sudo tail -f /opt/niochat/backend/logs/celery.log Backup 1. Script de Backup sudo nano /opt/niochat/backup.sh #!/bin/bash DATE=$(date +%Y%m%d_%H%M%S) BACKUP_DIR=\"/opt/backups\" DB_NAME=\"niochat\" DB_USER=\"niochat\" DB_PASS=\"senha_segura\" # Criar diret\u00f3rio de backup mkdir -p $BACKUP_DIR # Backup do banco de dados pg_dump -h localhost -U $DB_USER -d $DB_NAME > $BACKUP_DIR/db_$DATE.sql # Backup dos arquivos tar -czf $BACKUP_DIR/files_$DATE.tar.gz /opt/niochat # Remover backups antigos (manter 7 dias) find $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete find $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete echo \"Backup conclu\u00eddo: $DATE\" 2. Tornar Execut\u00e1vel sudo chmod +x /opt/niochat/backup.sh 3. Agendar Backup sudo crontab -e 0 2 * * * /opt/niochat/backup.sh Atualiza\u00e7\u00f5es 1. Script de Atualiza\u00e7\u00e3o sudo nano /opt/niochat/update.sh #!/bin/bash cd /opt/niochat # Backup antes da atualiza\u00e7\u00e3o ./backup.sh # Parar servi\u00e7os sudo systemctl stop niochat-backend sudo systemctl stop niochat-celery sudo systemctl stop niochat-celery-beat # Atualizar c\u00f3digo git pull origin main # Atualizar depend\u00eancias cd backend source venv/bin/activate pip install -r requirements.txt # Migra\u00e7\u00f5es python manage.py migrate python manage.py collectstatic --noinput # Rebuild frontend cd ../frontend/frontend npm install npm run build # Reiniciar servi\u00e7os sudo systemctl start niochat-backend sudo systemctl start niochat-celery sudo systemctl start niochat-celery-beat echo \"Atualiza\u00e7\u00e3o conclu\u00edda\" 2. Tornar Execut\u00e1vel sudo chmod +x /opt/niochat/update.sh Verifica\u00e7\u00e3o 1. Status dos Servi\u00e7os sudo systemctl status niochat-backend sudo systemctl status niochat-celery sudo systemctl status niochat-celery-beat 2. Teste de Conectividade curl -I https://seu-dominio.com curl -I https://seu-dominio.com/api/health/ 3. Teste de WebSocket const ws = new WebSocket('wss://seu-dominio.com/ws/dashboard/'); ws.onopen = () => console.log('WebSocket conectado'); Troubleshooting Problemas Comuns 1. Servi\u00e7o n\u00e3o inicia sudo journalctl -u niochat-backend --no-pager 2. Erro de permiss\u00e3o sudo chown -R www-data:www-data /opt/niochat 3. Erro de banco de dados sudo -u postgres psql -d niochat -c \"SELECT * FROM django_migrations;\" 4. Erro de Redis redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping 5. Erro de RabbitMQ sudo systemctl status rabbitmq-server rabbitmqctl status 6. Erro de Nginx sudo nginx -t sudo systemctl reload nginx Logs Importantes # Django tail -f /opt/niochat/backend/logs/django.log # Celery tail -f /opt/niochat/backend/logs/celery.log # Nginx tail -f /var/log/nginx/error.log # Sistema journalctl -u niochat-backend -f Pr\u00f3ximos Passos Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Instala\u00e7\u00e3o em Produ\u00e7\u00e3o"},{"location":"installation/production/#instalacao-em-producao","text":"Este guia explica como instalar e configurar o NioChat em um ambiente de produ\u00e7\u00e3o.","title":"Instala\u00e7\u00e3o em Produ\u00e7\u00e3o"},{"location":"installation/production/#pre-requisitos","text":"","title":"Pr\u00e9-requisitos"},{"location":"installation/production/#servidor","text":"Sistema Operacional : Ubuntu 20.04+ ou CentOS 8+ RAM : M\u00ednimo 4GB, recomendado 8GB+ CPU : M\u00ednimo 2 cores, recomendado 4 cores+ Disco : M\u00ednimo 50GB, recomendado 100GB+ Rede : Conex\u00e3o est\u00e1vel com internet","title":"Servidor"},{"location":"installation/production/#software","text":"Python : 3.8+ Node.js : 16+ PostgreSQL : 12+ Redis : 6+ Nginx : 1.18+ Docker : 20+ (opcional)","title":"Software"},{"location":"installation/production/#instalacao-do-sistema","text":"","title":"Instala\u00e7\u00e3o do Sistema"},{"location":"installation/production/#1-atualizar-sistema","text":"sudo apt update && sudo apt upgrade -y","title":"1. Atualizar Sistema"},{"location":"installation/production/#2-instalar-dependencias","text":"sudo apt install -y python3 python3-pip python3-venv nodejs npm postgresql redis-server nginx git","title":"2. Instalar Depend\u00eancias"},{"location":"installation/production/#3-configurar-postgresql","text":"sudo -u postgres psql CREATE DATABASE niochat; CREATE USER niochat WITH PASSWORD 'senha_segura'; GRANT ALL PRIVILEGES ON DATABASE niochat TO niochat; \\q","title":"3. Configurar PostgreSQL"},{"location":"installation/production/#4-configurar-redis-porta-6380","text":"sudo systemctl enable redis-server sudo systemctl start redis-server # Configurar porta 6380 e senha sudo nano /etc/redis/redis.conf # Adicionar: # port 6380 # requirepass SUA_SENHA_REDIS # bind 0.0.0.0 sudo systemctl restart redis-server","title":"4. Configurar Redis (Porta 6380)"},{"location":"installation/production/#5-configurar-rabbitmq","text":"sudo apt install rabbitmq-server sudo systemctl enable rabbitmq-server sudo systemctl start rabbitmq-server # Configurar usu\u00e1rio e senha sudo rabbitmqctl add_user admin SUA_SENHA_RABBITMQ sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"","title":"5. Configurar RabbitMQ"},{"location":"installation/production/#instalacao-do-niochat","text":"","title":"Instala\u00e7\u00e3o do NioChat"},{"location":"installation/production/#1-clone-do-repositorio","text":"cd /opt sudo git clone https://github.com/juniorssilvaa/niochat.git sudo chown -R $USER:$USER niochat cd niochat","title":"1. Clone do Reposit\u00f3rio"},{"location":"installation/production/#2-configurar-backend","text":"cd backend python3 -m venv venv source venv/bin/activate pip install -r requirements.txt","title":"2. Configurar Backend"},{"location":"installation/production/#3-configurar-frontend","text":"cd frontend/frontend npm install npm run build","title":"3. Configurar Frontend"},{"location":"installation/production/#4-configurar-variaveis-de-ambiente","text":"sudo nano /opt/niochat/backend/.env # Django DEBUG=False SECRET_KEY=sua_chave_secreta_aqui ALLOWED_HOSTS=seu-dominio.com,www.seu-dominio.com # Banco de Dados DATABASE_URL=postgresql://niochat:senha_segura@localhost:5432/niochat # Redis (porta 6380) REDIS_URL=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 REDIS_HOST=49.12.9.11 REDIS_PORT=6380 REDIS_PASSWORD=SUA_SENHA_REDIS # RabbitMQ (para Celery broker) CELERY_BROKER_URL=amqp://admin:SUA_SENHA_RABBITMQ@49.12.9.11:5672 CELERY_RESULT_BACKEND=redis://:SUA_SENHA_REDIS@49.12.9.11:6380/0 CELERY_RESULT_EXPIRES=300 CELERY_TASK_IGNORE_RESULT=False # OpenAI OPENAI_API_KEY=sua_chave_openai # Supabase SUPABASE_URL=sua_url_supabase SUPABASE_ANON_KEY=sua_chave_supabase # Uazapi UAZAPI_URL=https://seu-provedor.uazapi.com UAZAPI_TOKEN=seu_token_uazapi # Email EMAIL_HOST=smtp.gmail.com EMAIL_PORT=587 EMAIL_USE_TLS=True EMAIL_HOST_USER=seu-email@gmail.com EMAIL_HOST_PASSWORD=sua_senha_app # Webhook WEBHOOK_SECRET=seu_secret_webhook","title":"4. Configurar Vari\u00e1veis de Ambiente"},{"location":"installation/production/#5-configurar-django","text":"cd /opt/niochat/backend source venv/bin/activate python manage.py migrate python manage.py collectstatic --noinput python manage.py createsuperuser","title":"5. Configurar Django"},{"location":"installation/production/#configuracao-do-nginx","text":"","title":"Configura\u00e7\u00e3o do Nginx"},{"location":"installation/production/#1-criar-configuracao","text":"sudo nano /etc/nginx/sites-available/niochat server { listen 80; server_name seu-dominio.com www.seu-dominio.com; # Redirecionar para HTTPS return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; server_name seu-dominio.com www.seu-dominio.com; # SSL ssl_certificate /etc/letsencrypt/live/seu-dominio.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/seu-dominio.com/privkey.pem; # Frontend location / { root /opt/niochat/frontend/frontend/dist; try_files $uri $uri/ /index.html; } # Backend API location /api/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # WebSocket location /ws/ { proxy_pass http://127.0.0.1:8010; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # Webhooks location /webhook/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # Admin location /admin/ { proxy_pass http://127.0.0.1:8010; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }","title":"1. Criar Configura\u00e7\u00e3o"},{"location":"installation/production/#2-ativar-site","text":"sudo ln -s /etc/nginx/sites-available/niochat /etc/nginx/sites-enabled/ sudo nginx -t sudo systemctl reload nginx","title":"2. Ativar Site"},{"location":"installation/production/#configuracao-do-ssl","text":"","title":"Configura\u00e7\u00e3o do SSL"},{"location":"installation/production/#1-instalar-certbot","text":"sudo apt install certbot python3-certbot-nginx","title":"1. Instalar Certbot"},{"location":"installation/production/#2-obter-certificado","text":"sudo certbot --nginx -d seu-dominio.com -d www.seu-dominio.com","title":"2. Obter Certificado"},{"location":"installation/production/#3-renovacao-automatica","text":"sudo crontab -e 0 12 * * * /usr/bin/certbot renew --quiet","title":"3. Renova\u00e7\u00e3o Autom\u00e1tica"},{"location":"installation/production/#configuracao-do-systemd","text":"","title":"Configura\u00e7\u00e3o do Systemd"},{"location":"installation/production/#1-servico-backend","text":"sudo nano /etc/systemd/system/niochat-backend.service [Unit] Description=NioChat Backend After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/python manage.py runserver 0.0.0.0:8010 Restart=always RestartSec=10 [Install] WantedBy=multi-user.target","title":"1. Servi\u00e7o Backend"},{"location":"installation/production/#2-servico-celery","text":"sudo nano /etc/systemd/system/niochat-celery.service [Unit] Description=NioChat Celery Worker After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/celery -A niochat worker -l info Restart=always RestartSec=10 [Install] WantedBy=multi-user.target","title":"2. Servi\u00e7o Celery"},{"location":"installation/production/#3-servico-celery-beat","text":"sudo nano /etc/systemd/system/niochat-celery-beat.service [Unit] Description=NioChat Celery Beat After=network.target [Service] Type=exec User=www-data Group=www-data WorkingDirectory=/opt/niochat/backend Environment=PATH=/opt/niochat/backend/venv/bin ExecStart=/opt/niochat/backend/venv/bin/celery -A niochat beat -l info Restart=always RestartSec=10 [Install] WantedBy=multi-user.target","title":"3. Servi\u00e7o Celery Beat"},{"location":"installation/production/#4-ativar-servicos","text":"sudo systemctl daemon-reload sudo systemctl enable niochat-backend sudo systemctl enable niochat-celery sudo systemctl enable niochat-celery-beat sudo systemctl start niochat-backend sudo systemctl start niochat-celery sudo systemctl start niochat-celery-beat","title":"4. Ativar Servi\u00e7os"},{"location":"installation/production/#configuracao-do-firewall","text":"","title":"Configura\u00e7\u00e3o do Firewall"},{"location":"installation/production/#1-ufw","text":"sudo ufw allow 22 sudo ufw allow 80 sudo ufw allow 443 sudo ufw enable","title":"1. UFW"},{"location":"installation/production/#2-verificar-status","text":"sudo ufw status","title":"2. Verificar Status"},{"location":"installation/production/#monitoramento","text":"","title":"Monitoramento"},{"location":"installation/production/#1-logs-do-sistema","text":"sudo journalctl -u niochat-backend -f sudo journalctl -u niochat-celery -f sudo journalctl -u niochat-celery-beat -f","title":"1. Logs do Sistema"},{"location":"installation/production/#2-logs-do-nginx","text":"sudo tail -f /var/log/nginx/access.log sudo tail -f /var/log/nginx/error.log","title":"2. Logs do Nginx"},{"location":"installation/production/#3-logs-da-aplicacao","text":"sudo tail -f /opt/niochat/backend/logs/django.log sudo tail -f /opt/niochat/backend/logs/celery.log","title":"3. Logs da Aplica\u00e7\u00e3o"},{"location":"installation/production/#backup","text":"","title":"Backup"},{"location":"installation/production/#1-script-de-backup","text":"sudo nano /opt/niochat/backup.sh #!/bin/bash DATE=$(date +%Y%m%d_%H%M%S) BACKUP_DIR=\"/opt/backups\" DB_NAME=\"niochat\" DB_USER=\"niochat\" DB_PASS=\"senha_segura\" # Criar diret\u00f3rio de backup mkdir -p $BACKUP_DIR # Backup do banco de dados pg_dump -h localhost -U $DB_USER -d $DB_NAME > $BACKUP_DIR/db_$DATE.sql # Backup dos arquivos tar -czf $BACKUP_DIR/files_$DATE.tar.gz /opt/niochat # Remover backups antigos (manter 7 dias) find $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete find $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete echo \"Backup conclu\u00eddo: $DATE\"","title":"1. Script de Backup"},{"location":"installation/production/#2-tornar-executavel","text":"sudo chmod +x /opt/niochat/backup.sh","title":"2. Tornar Execut\u00e1vel"},{"location":"installation/production/#3-agendar-backup","text":"sudo crontab -e 0 2 * * * /opt/niochat/backup.sh","title":"3. Agendar Backup"},{"location":"installation/production/#atualizacoes","text":"","title":"Atualiza\u00e7\u00f5es"},{"location":"installation/production/#1-script-de-atualizacao","text":"sudo nano /opt/niochat/update.sh #!/bin/bash cd /opt/niochat # Backup antes da atualiza\u00e7\u00e3o ./backup.sh # Parar servi\u00e7os sudo systemctl stop niochat-backend sudo systemctl stop niochat-celery sudo systemctl stop niochat-celery-beat # Atualizar c\u00f3digo git pull origin main # Atualizar depend\u00eancias cd backend source venv/bin/activate pip install -r requirements.txt # Migra\u00e7\u00f5es python manage.py migrate python manage.py collectstatic --noinput # Rebuild frontend cd ../frontend/frontend npm install npm run build # Reiniciar servi\u00e7os sudo systemctl start niochat-backend sudo systemctl start niochat-celery sudo systemctl start niochat-celery-beat echo \"Atualiza\u00e7\u00e3o conclu\u00edda\"","title":"1. Script de Atualiza\u00e7\u00e3o"},{"location":"installation/production/#2-tornar-executavel_1","text":"sudo chmod +x /opt/niochat/update.sh","title":"2. Tornar Execut\u00e1vel"},{"location":"installation/production/#verificacao","text":"","title":"Verifica\u00e7\u00e3o"},{"location":"installation/production/#1-status-dos-servicos","text":"sudo systemctl status niochat-backend sudo systemctl status niochat-celery sudo systemctl status niochat-celery-beat","title":"1. Status dos Servi\u00e7os"},{"location":"installation/production/#2-teste-de-conectividade","text":"curl -I https://seu-dominio.com curl -I https://seu-dominio.com/api/health/","title":"2. Teste de Conectividade"},{"location":"installation/production/#3-teste-de-websocket","text":"const ws = new WebSocket('wss://seu-dominio.com/ws/dashboard/'); ws.onopen = () => console.log('WebSocket conectado');","title":"3. Teste de WebSocket"},{"location":"installation/production/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/production/#problemas-comuns","text":"","title":"Problemas Comuns"},{"location":"installation/production/#1-servico-nao-inicia","text":"sudo journalctl -u niochat-backend --no-pager","title":"1. Servi\u00e7o n\u00e3o inicia"},{"location":"installation/production/#2-erro-de-permissao","text":"sudo chown -R www-data:www-data /opt/niochat","title":"2. Erro de permiss\u00e3o"},{"location":"installation/production/#3-erro-de-banco-de-dados","text":"sudo -u postgres psql -d niochat -c \"SELECT * FROM django_migrations;\"","title":"3. Erro de banco de dados"},{"location":"installation/production/#4-erro-de-redis","text":"redis-cli -h 49.12.9.11 -p 6380 -a SUA_SENHA_REDIS ping","title":"4. Erro de Redis"},{"location":"installation/production/#5-erro-de-rabbitmq","text":"sudo systemctl status rabbitmq-server rabbitmqctl status","title":"5. Erro de RabbitMQ"},{"location":"installation/production/#6-erro-de-nginx","text":"sudo nginx -t sudo systemctl reload nginx","title":"6. Erro de Nginx"},{"location":"installation/production/#logs-importantes","text":"# Django tail -f /opt/niochat/backend/logs/django.log # Celery tail -f /opt/niochat/backend/logs/celery.log # Nginx tail -f /var/log/nginx/error.log # Sistema journalctl -u niochat-backend -f","title":"Logs Importantes"},{"location":"installation/production/#proximos-passos","text":"Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API Troubleshooting - Resolva problemas","title":"Pr\u00f3ximos Passos"},{"location":"overview/architecture/","text":"Arquitetura do Sistema O NioChat foi projetado com uma arquitetura moderna e escal\u00e1vel, utilizando as melhores pr\u00e1ticas de desenvolvimento. Vis\u00e3o Geral da Arquitetura graph TB subgraph \"Frontend\" A[React App] B[Dashboard] C[Chat Interface] D[Admin Panel] end subgraph \"Backend\" E[Django API] F[WebSocket] G[Celery Tasks] H[Redis Cache] end subgraph \"Integra\u00e7\u00f5es\" I[WhatsApp Uazapi] J[OpenAI ChatGPT] K[SGP System] L[Supabase] end subgraph \"Banco de Dados\" M[PostgreSQL] N[Redis] O[Supabase] end A --> E B --> E C --> F D --> E E --> G E --> H F --> H E --> I E --> J E --> K E --> L E --> M G --> N L --> O Componentes Principais 1. Frontend (React) Responsabilidade : Interface do usu\u00e1rio Tecnologia : React 18 + Vite Caracter\u00edsticas : SPA, tempo real, responsivo Comunica\u00e7\u00e3o : REST API + WebSocket 2. Backend (Django) Responsabilidade : L\u00f3gica de neg\u00f3cio e API Tecnologia : Django 5.2 + DRF Caracter\u00edsticas : RESTful, WebSocket, autentica\u00e7\u00e3o Comunica\u00e7\u00e3o : HTTP/WebSocket 3. Processamento Ass\u00edncrono (Celery) Responsabilidade : Tarefas em background Tecnologia : Celery + Redis Caracter\u00edsticas : Escal\u00e1vel, confi\u00e1vel Uso : CSAT, notifica\u00e7\u00f5es, processamento 4. Cache (Redis) Responsabilidade : Cache e sess\u00f5es Tecnologia : Redis Caracter\u00edsticas : Alta performance, persistente Uso : Sess\u00f5es, cache, filas 5. Banco de Dados (PostgreSQL) Responsabilidade : Dados principais Tecnologia : PostgreSQL Caracter\u00edsticas : ACID, escal\u00e1vel Uso : Dados transacionais 6. Dashboard (Supabase) Responsabilidade : M\u00e9tricas e relat\u00f3rios Tecnologia : Supabase Caracter\u00edsticas : Tempo real, isolamento Uso : Dashboard, auditoria, CSAT Fluxo de Dados 1. Recebimento de Mensagem WhatsApp \u2192 Uazapi \u2192 Webhook \u2192 Django \u2192 IA \u2192 Resposta 2. Processamento com IA Mensagem \u2192 OpenAI \u2192 Function Calls \u2192 SGP \u2192 Dados \u2192 Resposta 3. Dashboard em Tempo Real Evento \u2192 Supabase \u2192 WebSocket \u2192 Frontend \u2192 Atualiza\u00e7\u00e3o 4. Sistema CSAT Fechamento \u2192 Celery \u2192 1.5min \u2192 Envio \u2192 Feedback \u2192 IA \u2192 An\u00e1lise Padr\u00f5es Arquiteturais 1. Multi-Tenant Isolamento : Cada provedor tem seus dados Seguran\u00e7a : Row Level Security (RLS) Escalabilidade : Horizontal e vertical Manuten\u00e7\u00e3o : Independente por provedor 2. Event-Driven Eventos : Mensagens, conversas, CSAT Processamento : Ass\u00edncrono com Celery Notifica\u00e7\u00f5es : Tempo real via WebSocket Auditoria : Log de todos os eventos 3. Microservi\u00e7os Separa\u00e7\u00e3o : Frontend, Backend, IA, SGP Comunica\u00e7\u00e3o : APIs REST e WebSocket Deploy : Independente Escalabilidade : Por componente 4. CQRS (Command Query Responsibility Segregation) Commands : Opera\u00e7\u00f5es de escrita Queries : Consultas de leitura Separa\u00e7\u00e3o : Dados transacionais vs. anal\u00edticos Performance : Otimizada para cada tipo Seguran\u00e7a 1. Autentica\u00e7\u00e3o M\u00e9todo : Token-based authentication Seguran\u00e7a : JWT com expira\u00e7\u00e3o Renova\u00e7\u00e3o : Autom\u00e1tica Logout : Invalida\u00e7\u00e3o de token 2. Autoriza\u00e7\u00e3o N\u00edveis : Superuser, Admin, Agent, Viewer Permiss\u00f5es : Granulares por recurso Contexto : Por provedor Auditoria : Log de todas as a\u00e7\u00f5es 3. Isolamento de Dados RLS : Row Level Security no Supabase Filtros : Autom\u00e1ticos por provedor Vazamento : Imposs\u00edvel entre provedores Compliance : LGPD e GDPR 4. Criptografia Transmiss\u00e3o : HTTPS/TLS Armazenamento : Dados sens\u00edveis criptografados Chaves : Rota\u00e7\u00e3o autom\u00e1tica Backup : Criptografado Performance 1. Cache Strategy Redis : Sess\u00f5es e cache CDN : Arquivos est\u00e1ticos Database : \u00cdndices otimizados API : Rate limiting 2. Escalabilidade Horizontal : M\u00faltiplas inst\u00e2ncias Vertical : Recursos adicionais Load Balancing : Distribui\u00e7\u00e3o de carga Auto-scaling : Baseado em m\u00e9tricas 3. Monitoramento M\u00e9tricas : Performance em tempo real Alertas : Notifica\u00e7\u00f5es autom\u00e1ticas Logs : Centralizados Dashboards : Visualiza\u00e7\u00e3o Integra\u00e7\u00f5es 1. WhatsApp (Uazapi) Protocolo : Webhook Formato : JSON Seguran\u00e7a : Assinatura digital Retry : Autom\u00e1tico 2. OpenAI Protocolo : HTTPS Formato : JSON Rate Limiting : Configur\u00e1vel Fallback : Resposta padr\u00e3o 3. SGP Protocolo : HTTPS Formato : JSON/XML Cache : Dados tempor\u00e1rios Timeout : Configur\u00e1vel 4. Supabase Protocolo : HTTPS Formato : JSON Real-time : WebSocket RLS : Row Level Security Deploy e Infraestrutura 1. Desenvolvimento Local : Docker Compose Hot Reload : Autom\u00e1tico Debug : Logs detalhados Testing : Unit e integration 2. Produ\u00e7\u00e3o Servidor : Ubuntu/CentOS Proxy : Nginx SSL : Let's Encrypt Monitoring : Systemd 3. CI/CD GitHub Actions : Autom\u00e1tico Testing : Autom\u00e1tico Deploy : Autom\u00e1tico Rollback : Autom\u00e1tico Monitoramento e Observabilidade 1. M\u00e9tricas Sistema : CPU, RAM, Disco Aplica\u00e7\u00e3o : Requests, erros, lat\u00eancia Neg\u00f3cio : Conversas, CSAT, resolu\u00e7\u00e3o Custom : M\u00e9tricas espec\u00edficas 2. Logs Aplica\u00e7\u00e3o : Django, Celery Sistema : Nginx, PostgreSQL Integra\u00e7\u00f5es : APIs externas Auditoria : Todas as a\u00e7\u00f5es 3. Alertas Sistema : Recursos baixos Aplica\u00e7\u00e3o : Erros altos Neg\u00f3cio : CSAT baixo Integra\u00e7\u00e3o : APIs fora Pr\u00f3ximos Passos Funcionalidades - Explore todas as funcionalidades Instala\u00e7\u00e3o - Configure o ambiente API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Arquitetura do Sistema"},{"location":"overview/architecture/#arquitetura-do-sistema","text":"O NioChat foi projetado com uma arquitetura moderna e escal\u00e1vel, utilizando as melhores pr\u00e1ticas de desenvolvimento.","title":"Arquitetura do Sistema"},{"location":"overview/architecture/#visao-geral-da-arquitetura","text":"graph TB subgraph \"Frontend\" A[React App] B[Dashboard] C[Chat Interface] D[Admin Panel] end subgraph \"Backend\" E[Django API] F[WebSocket] G[Celery Tasks] H[Redis Cache] end subgraph \"Integra\u00e7\u00f5es\" I[WhatsApp Uazapi] J[OpenAI ChatGPT] K[SGP System] L[Supabase] end subgraph \"Banco de Dados\" M[PostgreSQL] N[Redis] O[Supabase] end A --> E B --> E C --> F D --> E E --> G E --> H F --> H E --> I E --> J E --> K E --> L E --> M G --> N L --> O","title":"Vis\u00e3o Geral da Arquitetura"},{"location":"overview/architecture/#componentes-principais","text":"","title":"Componentes Principais"},{"location":"overview/architecture/#1-frontend-react","text":"Responsabilidade : Interface do usu\u00e1rio Tecnologia : React 18 + Vite Caracter\u00edsticas : SPA, tempo real, responsivo Comunica\u00e7\u00e3o : REST API + WebSocket","title":"1. Frontend (React)"},{"location":"overview/architecture/#2-backend-django","text":"Responsabilidade : L\u00f3gica de neg\u00f3cio e API Tecnologia : Django 5.2 + DRF Caracter\u00edsticas : RESTful, WebSocket, autentica\u00e7\u00e3o Comunica\u00e7\u00e3o : HTTP/WebSocket","title":"2. Backend (Django)"},{"location":"overview/architecture/#3-processamento-assincrono-celery","text":"Responsabilidade : Tarefas em background Tecnologia : Celery + Redis Caracter\u00edsticas : Escal\u00e1vel, confi\u00e1vel Uso : CSAT, notifica\u00e7\u00f5es, processamento","title":"3. Processamento Ass\u00edncrono (Celery)"},{"location":"overview/architecture/#4-cache-redis","text":"Responsabilidade : Cache e sess\u00f5es Tecnologia : Redis Caracter\u00edsticas : Alta performance, persistente Uso : Sess\u00f5es, cache, filas","title":"4. Cache (Redis)"},{"location":"overview/architecture/#5-banco-de-dados-postgresql","text":"Responsabilidade : Dados principais Tecnologia : PostgreSQL Caracter\u00edsticas : ACID, escal\u00e1vel Uso : Dados transacionais","title":"5. Banco de Dados (PostgreSQL)"},{"location":"overview/architecture/#6-dashboard-supabase","text":"Responsabilidade : M\u00e9tricas e relat\u00f3rios Tecnologia : Supabase Caracter\u00edsticas : Tempo real, isolamento Uso : Dashboard, auditoria, CSAT","title":"6. Dashboard (Supabase)"},{"location":"overview/architecture/#fluxo-de-dados","text":"","title":"Fluxo de Dados"},{"location":"overview/architecture/#1-recebimento-de-mensagem","text":"WhatsApp \u2192 Uazapi \u2192 Webhook \u2192 Django \u2192 IA \u2192 Resposta","title":"1. Recebimento de Mensagem"},{"location":"overview/architecture/#2-processamento-com-ia","text":"Mensagem \u2192 OpenAI \u2192 Function Calls \u2192 SGP \u2192 Dados \u2192 Resposta","title":"2. Processamento com IA"},{"location":"overview/architecture/#3-dashboard-em-tempo-real","text":"Evento \u2192 Supabase \u2192 WebSocket \u2192 Frontend \u2192 Atualiza\u00e7\u00e3o","title":"3. Dashboard em Tempo Real"},{"location":"overview/architecture/#4-sistema-csat","text":"Fechamento \u2192 Celery \u2192 1.5min \u2192 Envio \u2192 Feedback \u2192 IA \u2192 An\u00e1lise","title":"4. Sistema CSAT"},{"location":"overview/architecture/#padroes-arquiteturais","text":"","title":"Padr\u00f5es Arquiteturais"},{"location":"overview/architecture/#1-multi-tenant","text":"Isolamento : Cada provedor tem seus dados Seguran\u00e7a : Row Level Security (RLS) Escalabilidade : Horizontal e vertical Manuten\u00e7\u00e3o : Independente por provedor","title":"1. Multi-Tenant"},{"location":"overview/architecture/#2-event-driven","text":"Eventos : Mensagens, conversas, CSAT Processamento : Ass\u00edncrono com Celery Notifica\u00e7\u00f5es : Tempo real via WebSocket Auditoria : Log de todos os eventos","title":"2. Event-Driven"},{"location":"overview/architecture/#3-microservicos","text":"Separa\u00e7\u00e3o : Frontend, Backend, IA, SGP Comunica\u00e7\u00e3o : APIs REST e WebSocket Deploy : Independente Escalabilidade : Por componente","title":"3. Microservi\u00e7os"},{"location":"overview/architecture/#4-cqrs-command-query-responsibility-segregation","text":"Commands : Opera\u00e7\u00f5es de escrita Queries : Consultas de leitura Separa\u00e7\u00e3o : Dados transacionais vs. anal\u00edticos Performance : Otimizada para cada tipo","title":"4. CQRS (Command Query Responsibility Segregation)"},{"location":"overview/architecture/#seguranca","text":"","title":"Seguran\u00e7a"},{"location":"overview/architecture/#1-autenticacao","text":"M\u00e9todo : Token-based authentication Seguran\u00e7a : JWT com expira\u00e7\u00e3o Renova\u00e7\u00e3o : Autom\u00e1tica Logout : Invalida\u00e7\u00e3o de token","title":"1. Autentica\u00e7\u00e3o"},{"location":"overview/architecture/#2-autorizacao","text":"N\u00edveis : Superuser, Admin, Agent, Viewer Permiss\u00f5es : Granulares por recurso Contexto : Por provedor Auditoria : Log de todas as a\u00e7\u00f5es","title":"2. Autoriza\u00e7\u00e3o"},{"location":"overview/architecture/#3-isolamento-de-dados","text":"RLS : Row Level Security no Supabase Filtros : Autom\u00e1ticos por provedor Vazamento : Imposs\u00edvel entre provedores Compliance : LGPD e GDPR","title":"3. Isolamento de Dados"},{"location":"overview/architecture/#4-criptografia","text":"Transmiss\u00e3o : HTTPS/TLS Armazenamento : Dados sens\u00edveis criptografados Chaves : Rota\u00e7\u00e3o autom\u00e1tica Backup : Criptografado","title":"4. Criptografia"},{"location":"overview/architecture/#performance","text":"","title":"Performance"},{"location":"overview/architecture/#1-cache-strategy","text":"Redis : Sess\u00f5es e cache CDN : Arquivos est\u00e1ticos Database : \u00cdndices otimizados API : Rate limiting","title":"1. Cache Strategy"},{"location":"overview/architecture/#2-escalabilidade","text":"Horizontal : M\u00faltiplas inst\u00e2ncias Vertical : Recursos adicionais Load Balancing : Distribui\u00e7\u00e3o de carga Auto-scaling : Baseado em m\u00e9tricas","title":"2. Escalabilidade"},{"location":"overview/architecture/#3-monitoramento","text":"M\u00e9tricas : Performance em tempo real Alertas : Notifica\u00e7\u00f5es autom\u00e1ticas Logs : Centralizados Dashboards : Visualiza\u00e7\u00e3o","title":"3. Monitoramento"},{"location":"overview/architecture/#integracoes","text":"","title":"Integra\u00e7\u00f5es"},{"location":"overview/architecture/#1-whatsapp-uazapi","text":"Protocolo : Webhook Formato : JSON Seguran\u00e7a : Assinatura digital Retry : Autom\u00e1tico","title":"1. WhatsApp (Uazapi)"},{"location":"overview/architecture/#2-openai","text":"Protocolo : HTTPS Formato : JSON Rate Limiting : Configur\u00e1vel Fallback : Resposta padr\u00e3o","title":"2. OpenAI"},{"location":"overview/architecture/#3-sgp","text":"Protocolo : HTTPS Formato : JSON/XML Cache : Dados tempor\u00e1rios Timeout : Configur\u00e1vel","title":"3. SGP"},{"location":"overview/architecture/#4-supabase","text":"Protocolo : HTTPS Formato : JSON Real-time : WebSocket RLS : Row Level Security","title":"4. Supabase"},{"location":"overview/architecture/#deploy-e-infraestrutura","text":"","title":"Deploy e Infraestrutura"},{"location":"overview/architecture/#1-desenvolvimento","text":"Local : Docker Compose Hot Reload : Autom\u00e1tico Debug : Logs detalhados Testing : Unit e integration","title":"1. Desenvolvimento"},{"location":"overview/architecture/#2-producao","text":"Servidor : Ubuntu/CentOS Proxy : Nginx SSL : Let's Encrypt Monitoring : Systemd","title":"2. Produ\u00e7\u00e3o"},{"location":"overview/architecture/#3-cicd","text":"GitHub Actions : Autom\u00e1tico Testing : Autom\u00e1tico Deploy : Autom\u00e1tico Rollback : Autom\u00e1tico","title":"3. CI/CD"},{"location":"overview/architecture/#monitoramento-e-observabilidade","text":"","title":"Monitoramento e Observabilidade"},{"location":"overview/architecture/#1-metricas","text":"Sistema : CPU, RAM, Disco Aplica\u00e7\u00e3o : Requests, erros, lat\u00eancia Neg\u00f3cio : Conversas, CSAT, resolu\u00e7\u00e3o Custom : M\u00e9tricas espec\u00edficas","title":"1. M\u00e9tricas"},{"location":"overview/architecture/#2-logs","text":"Aplica\u00e7\u00e3o : Django, Celery Sistema : Nginx, PostgreSQL Integra\u00e7\u00f5es : APIs externas Auditoria : Todas as a\u00e7\u00f5es","title":"2. Logs"},{"location":"overview/architecture/#3-alertas","text":"Sistema : Recursos baixos Aplica\u00e7\u00e3o : Erros altos Neg\u00f3cio : CSAT baixo Integra\u00e7\u00e3o : APIs fora","title":"3. Alertas"},{"location":"overview/architecture/#proximos-passos","text":"Funcionalidades - Explore todas as funcionalidades Instala\u00e7\u00e3o - Configure o ambiente API - Explore a API Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Pr\u00f3ximos Passos"},{"location":"overview/features/","text":"Funcionalidades O NioChat oferece um conjunto completo de funcionalidades para atendimento via WhatsApp com IA inteligente. IA Inteligente ChatGPT Integrado Atendimento Automatizado : IA responde perguntas comuns automaticamente Contexto Conversacional : Mant\u00e9m contexto da conversa Personaliza\u00e7\u00e3o : IA \u00fanica para cada provedor Aprendizado Cont\u00ednuo : Melhora com o tempo Transcri\u00e7\u00e3o de \u00c1udio Convers\u00e3o Autom\u00e1tica : Mensagens de voz convertidas para texto Suporte a M\u00faltiplos Idiomas : Portugu\u00eas, ingl\u00eas, espanhol Alta Precis\u00e3o : 95%+ de precis\u00e3o na transcri\u00e7\u00e3o Processamento em Tempo Real : Transcri\u00e7\u00e3o instant\u00e2nea Consulta SGP Autom\u00e1tica Dados Reais : IA consulta informa\u00e7\u00f5es reais do cliente Function Calls : Execu\u00e7\u00e3o autom\u00e1tica de fun\u00e7\u00f5es do SGP Integra\u00e7\u00e3o Transparente : Cliente n\u00e3o percebe a consulta Dados Atualizados : Informa\u00e7\u00f5es sempre atualizadas WhatsApp Completo Uazapi/Evolution API Integra\u00e7\u00e3o Nativa : Conecta diretamente com WhatsApp Business Webhooks em Tempo Real : Recebimento instant\u00e2neo de mensagens Status de Entrega : Confirma\u00e7\u00e3o de recebimento M\u00faltiplas Inst\u00e2ncias : Suporte a v\u00e1rios n\u00fameros M\u00eddia Completa Imagens : Suporte a JPG, PNG, GIF V\u00eddeos : MP4, AVI, MOV \u00c1udios : OGG, MP3, WAV Documentos : PDF, DOC, XLS, PPT Stickers : Suporte completo a stickers Intera\u00e7\u00f5es Avan\u00e7adas Rea\u00e7\u00f5es : Emojis e rea\u00e7\u00f5es personalizadas Exclus\u00e3o de Mensagens : Deletar mensagens enviadas Status de Leitura : Confirma\u00e7\u00e3o de visualiza\u00e7\u00e3o Respostas R\u00e1pidas : Templates de mensagens Dashboard e M\u00e9tricas M\u00e9tricas em Tempo Real Total de Conversas : Contador em tempo real Conversas Abertas : Fechadas e pendentes Taxa de Resolu\u00e7\u00e3o : Percentual de problemas resolvidos Tempo de Resposta : M\u00e9dia de tempo de resposta Satisfa\u00e7\u00e3o do Cliente : CSAT autom\u00e1tico Gr\u00e1ficos Interativos Evolu\u00e7\u00e3o Temporal : Gr\u00e1ficos de linha Distribui\u00e7\u00e3o por Equipe : Gr\u00e1ficos de pizza Performance por Agente : Gr\u00e1ficos de barras Tend\u00eancias : An\u00e1lise de tend\u00eancias Filtros Avan\u00e7ados Por Data : Filtros por per\u00edodo Por Usu\u00e1rio : Performance individual Por Equipe : M\u00e9tricas por equipe Por Provedor : Isolamento de dados Sistema CSAT Coleta Autom\u00e1tica Envio Autom\u00e1tico : 1.5 minutos ap\u00f3s fechamento Mensagem Personalizada : Texto personalizado por provedor M\u00faltiplos Canais : WhatsApp, SMS, Email Agendamento : Envio em hor\u00e1rios espec\u00edficos An\u00e1lise IA Interpreta\u00e7\u00e3o Autom\u00e1tica : IA analisa feedback textual Mapeamento de Emojis : \ud83d\ude21 (1) a \ud83e\udd29 (5) Palavras-chave : Identifica sentimentos Corre\u00e7\u00e3o Autom\u00e1tica : Corrige mapeamentos incorretos Dashboard CSAT M\u00e9tricas Visuais : Gr\u00e1ficos de satisfa\u00e7\u00e3o Hist\u00f3rico Detalhado : \u00daltimos feedbacks Fotos de Perfil : Avatars dos clientes Mensagens Originais : Feedback completo Sistema Multi-Tenant Isolamento Total Dados Separados : Cada provedor tem seus dados RLS (Row Level Security) : Isolamento no Supabase Permiss\u00f5es Granulares : Controle fino de acesso Auditoria Completa : Log de todas as a\u00e7\u00f5es Equipes Organiza\u00e7\u00e3o : Estrutura hier\u00e1rquica Permiss\u00f5es : Controle de acesso por equipe Transfer\u00eancia : Entre agentes e equipes Visibilidade : Controle de visibilidade Usu\u00e1rios Perfis : Diferentes tipos de usu\u00e1rio Permiss\u00f5es : Controle granular Sess\u00f5es : Gerenciamento de sess\u00f5es Seguran\u00e7a : Autentica\u00e7\u00e3o robusta Integra\u00e7\u00f5es SGP (Sistema de Gest\u00e3o de Provedores) Consulta de Clientes : Busca por CPF/CNPJ Verifica\u00e7\u00e3o de Acesso : Status da conex\u00e3o Gera\u00e7\u00e3o de Faturas : PIX e boleto autom\u00e1tico Chamados T\u00e9cnicos : Cria\u00e7\u00e3o autom\u00e1tica Hist\u00f3rico : Consulta de hist\u00f3rico Supabase Dashboard : M\u00e9tricas em tempo real Auditoria : Log de todas as a\u00e7\u00f5es CSAT : Sistema de satisfa\u00e7\u00e3o Dados : Armazenamento de dados Uazapi/Evolution WhatsApp Business : Integra\u00e7\u00e3o nativa M\u00faltiplas Inst\u00e2ncias : V\u00e1rios n\u00fameros Webhooks : Eventos em tempo real M\u00eddia : Suporte completo Chat Interno Salas de Chat Cria\u00e7\u00e3o : Salas por equipe ou projeto Participantes : Adi\u00e7\u00e3o/remo\u00e7\u00e3o de membros Mensagens : Chat em tempo real Hist\u00f3rico : Mensagens salvas Chat Privado Mensagens Diretas : Entre usu\u00e1rios Notifica\u00e7\u00f5es : Alertas de mensagens Status : Online/offline Hist\u00f3rico : Mensagens salvas Auditoria Logs Detalhados A\u00e7\u00f5es : Todas as a\u00e7\u00f5es do sistema Usu\u00e1rios : Quem fez o qu\u00ea Timestamps : Quando aconteceu Detalhes : Informa\u00e7\u00f5es completas Filtros Por A\u00e7\u00e3o : Tipo de a\u00e7\u00e3o Por Usu\u00e1rio : A\u00e7\u00f5es de usu\u00e1rio espec\u00edfico Por Data : Per\u00edodo espec\u00edfico Por Provedor : Isolamento de dados Exporta\u00e7\u00e3o PDF : Relat\u00f3rios em PDF Excel : Dados em planilha CSV : Dados estruturados JSON : Dados brutos Seguran\u00e7a Autentica\u00e7\u00e3o Tokens : Autentica\u00e7\u00e3o por token Sess\u00f5es : Gerenciamento de sess\u00f5es Timeout : Expira\u00e7\u00e3o autom\u00e1tica Refresh : Renova\u00e7\u00e3o de tokens Autoriza\u00e7\u00e3o Permiss\u00f5es : Controle granular Roles : Pap\u00e9is de usu\u00e1rio Equipes : Permiss\u00f5es por equipe Provedores : Isolamento de dados Dados Criptografia : Dados sens\u00edveis protegidos Backup : Backup autom\u00e1tico SSL/TLS : Comunica\u00e7\u00e3o segura Monitoramento : Logs de seguran\u00e7a Performance Otimiza\u00e7\u00f5es Cache : Redis para cache Consultas : Otimiza\u00e7\u00e3o de queries \u00cdndices : \u00cdndices de banco de dados CDN : Entrega de conte\u00fado Escalabilidade Horizontal : M\u00faltiplos servidores Vertical : Recursos adicionais Load Balancing : Distribui\u00e7\u00e3o de carga Microservi\u00e7os : Arquitetura modular Monitoramento M\u00e9tricas : Performance em tempo real Alertas : Notifica\u00e7\u00f5es de problemas Logs : Logs detalhados Dashboards : Visualiza\u00e7\u00e3o de m\u00e9tricas Pr\u00f3ximos Passos Instala\u00e7\u00e3o - Configure o ambiente Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API","title":"Funcionalidades"},{"location":"overview/features/#funcionalidades","text":"O NioChat oferece um conjunto completo de funcionalidades para atendimento via WhatsApp com IA inteligente.","title":"Funcionalidades"},{"location":"overview/features/#ia-inteligente","text":"","title":"IA Inteligente"},{"location":"overview/features/#chatgpt-integrado","text":"Atendimento Automatizado : IA responde perguntas comuns automaticamente Contexto Conversacional : Mant\u00e9m contexto da conversa Personaliza\u00e7\u00e3o : IA \u00fanica para cada provedor Aprendizado Cont\u00ednuo : Melhora com o tempo","title":"ChatGPT Integrado"},{"location":"overview/features/#transcricao-de-audio","text":"Convers\u00e3o Autom\u00e1tica : Mensagens de voz convertidas para texto Suporte a M\u00faltiplos Idiomas : Portugu\u00eas, ingl\u00eas, espanhol Alta Precis\u00e3o : 95%+ de precis\u00e3o na transcri\u00e7\u00e3o Processamento em Tempo Real : Transcri\u00e7\u00e3o instant\u00e2nea","title":"Transcri\u00e7\u00e3o de \u00c1udio"},{"location":"overview/features/#consulta-sgp-automatica","text":"Dados Reais : IA consulta informa\u00e7\u00f5es reais do cliente Function Calls : Execu\u00e7\u00e3o autom\u00e1tica de fun\u00e7\u00f5es do SGP Integra\u00e7\u00e3o Transparente : Cliente n\u00e3o percebe a consulta Dados Atualizados : Informa\u00e7\u00f5es sempre atualizadas","title":"Consulta SGP Autom\u00e1tica"},{"location":"overview/features/#whatsapp-completo","text":"","title":"WhatsApp Completo"},{"location":"overview/features/#uazapievolution-api","text":"Integra\u00e7\u00e3o Nativa : Conecta diretamente com WhatsApp Business Webhooks em Tempo Real : Recebimento instant\u00e2neo de mensagens Status de Entrega : Confirma\u00e7\u00e3o de recebimento M\u00faltiplas Inst\u00e2ncias : Suporte a v\u00e1rios n\u00fameros","title":"Uazapi/Evolution API"},{"location":"overview/features/#midia-completa","text":"Imagens : Suporte a JPG, PNG, GIF V\u00eddeos : MP4, AVI, MOV \u00c1udios : OGG, MP3, WAV Documentos : PDF, DOC, XLS, PPT Stickers : Suporte completo a stickers","title":"M\u00eddia Completa"},{"location":"overview/features/#interacoes-avancadas","text":"Rea\u00e7\u00f5es : Emojis e rea\u00e7\u00f5es personalizadas Exclus\u00e3o de Mensagens : Deletar mensagens enviadas Status de Leitura : Confirma\u00e7\u00e3o de visualiza\u00e7\u00e3o Respostas R\u00e1pidas : Templates de mensagens","title":"Intera\u00e7\u00f5es Avan\u00e7adas"},{"location":"overview/features/#dashboard-e-metricas","text":"","title":"Dashboard e M\u00e9tricas"},{"location":"overview/features/#metricas-em-tempo-real","text":"Total de Conversas : Contador em tempo real Conversas Abertas : Fechadas e pendentes Taxa de Resolu\u00e7\u00e3o : Percentual de problemas resolvidos Tempo de Resposta : M\u00e9dia de tempo de resposta Satisfa\u00e7\u00e3o do Cliente : CSAT autom\u00e1tico","title":"M\u00e9tricas em Tempo Real"},{"location":"overview/features/#graficos-interativos","text":"Evolu\u00e7\u00e3o Temporal : Gr\u00e1ficos de linha Distribui\u00e7\u00e3o por Equipe : Gr\u00e1ficos de pizza Performance por Agente : Gr\u00e1ficos de barras Tend\u00eancias : An\u00e1lise de tend\u00eancias","title":"Gr\u00e1ficos Interativos"},{"location":"overview/features/#filtros-avancados","text":"Por Data : Filtros por per\u00edodo Por Usu\u00e1rio : Performance individual Por Equipe : M\u00e9tricas por equipe Por Provedor : Isolamento de dados","title":"Filtros Avan\u00e7ados"},{"location":"overview/features/#sistema-csat","text":"","title":"Sistema CSAT"},{"location":"overview/features/#coleta-automatica","text":"Envio Autom\u00e1tico : 1.5 minutos ap\u00f3s fechamento Mensagem Personalizada : Texto personalizado por provedor M\u00faltiplos Canais : WhatsApp, SMS, Email Agendamento : Envio em hor\u00e1rios espec\u00edficos","title":"Coleta Autom\u00e1tica"},{"location":"overview/features/#analise-ia","text":"Interpreta\u00e7\u00e3o Autom\u00e1tica : IA analisa feedback textual Mapeamento de Emojis : \ud83d\ude21 (1) a \ud83e\udd29 (5) Palavras-chave : Identifica sentimentos Corre\u00e7\u00e3o Autom\u00e1tica : Corrige mapeamentos incorretos","title":"An\u00e1lise IA"},{"location":"overview/features/#dashboard-csat","text":"M\u00e9tricas Visuais : Gr\u00e1ficos de satisfa\u00e7\u00e3o Hist\u00f3rico Detalhado : \u00daltimos feedbacks Fotos de Perfil : Avatars dos clientes Mensagens Originais : Feedback completo","title":"Dashboard CSAT"},{"location":"overview/features/#sistema-multi-tenant","text":"","title":"Sistema Multi-Tenant"},{"location":"overview/features/#isolamento-total","text":"Dados Separados : Cada provedor tem seus dados RLS (Row Level Security) : Isolamento no Supabase Permiss\u00f5es Granulares : Controle fino de acesso Auditoria Completa : Log de todas as a\u00e7\u00f5es","title":"Isolamento Total"},{"location":"overview/features/#equipes","text":"Organiza\u00e7\u00e3o : Estrutura hier\u00e1rquica Permiss\u00f5es : Controle de acesso por equipe Transfer\u00eancia : Entre agentes e equipes Visibilidade : Controle de visibilidade","title":"Equipes"},{"location":"overview/features/#usuarios","text":"Perfis : Diferentes tipos de usu\u00e1rio Permiss\u00f5es : Controle granular Sess\u00f5es : Gerenciamento de sess\u00f5es Seguran\u00e7a : Autentica\u00e7\u00e3o robusta","title":"Usu\u00e1rios"},{"location":"overview/features/#integracoes","text":"","title":"Integra\u00e7\u00f5es"},{"location":"overview/features/#sgp-sistema-de-gestao-de-provedores","text":"Consulta de Clientes : Busca por CPF/CNPJ Verifica\u00e7\u00e3o de Acesso : Status da conex\u00e3o Gera\u00e7\u00e3o de Faturas : PIX e boleto autom\u00e1tico Chamados T\u00e9cnicos : Cria\u00e7\u00e3o autom\u00e1tica Hist\u00f3rico : Consulta de hist\u00f3rico","title":"SGP (Sistema de Gest\u00e3o de Provedores)"},{"location":"overview/features/#supabase","text":"Dashboard : M\u00e9tricas em tempo real Auditoria : Log de todas as a\u00e7\u00f5es CSAT : Sistema de satisfa\u00e7\u00e3o Dados : Armazenamento de dados","title":"Supabase"},{"location":"overview/features/#uazapievolution","text":"WhatsApp Business : Integra\u00e7\u00e3o nativa M\u00faltiplas Inst\u00e2ncias : V\u00e1rios n\u00fameros Webhooks : Eventos em tempo real M\u00eddia : Suporte completo","title":"Uazapi/Evolution"},{"location":"overview/features/#chat-interno","text":"","title":"Chat Interno"},{"location":"overview/features/#salas-de-chat","text":"Cria\u00e7\u00e3o : Salas por equipe ou projeto Participantes : Adi\u00e7\u00e3o/remo\u00e7\u00e3o de membros Mensagens : Chat em tempo real Hist\u00f3rico : Mensagens salvas","title":"Salas de Chat"},{"location":"overview/features/#chat-privado","text":"Mensagens Diretas : Entre usu\u00e1rios Notifica\u00e7\u00f5es : Alertas de mensagens Status : Online/offline Hist\u00f3rico : Mensagens salvas","title":"Chat Privado"},{"location":"overview/features/#auditoria","text":"","title":"Auditoria"},{"location":"overview/features/#logs-detalhados","text":"A\u00e7\u00f5es : Todas as a\u00e7\u00f5es do sistema Usu\u00e1rios : Quem fez o qu\u00ea Timestamps : Quando aconteceu Detalhes : Informa\u00e7\u00f5es completas","title":"Logs Detalhados"},{"location":"overview/features/#filtros","text":"Por A\u00e7\u00e3o : Tipo de a\u00e7\u00e3o Por Usu\u00e1rio : A\u00e7\u00f5es de usu\u00e1rio espec\u00edfico Por Data : Per\u00edodo espec\u00edfico Por Provedor : Isolamento de dados","title":"Filtros"},{"location":"overview/features/#exportacao","text":"PDF : Relat\u00f3rios em PDF Excel : Dados em planilha CSV : Dados estruturados JSON : Dados brutos","title":"Exporta\u00e7\u00e3o"},{"location":"overview/features/#seguranca","text":"","title":"Seguran\u00e7a"},{"location":"overview/features/#autenticacao","text":"Tokens : Autentica\u00e7\u00e3o por token Sess\u00f5es : Gerenciamento de sess\u00f5es Timeout : Expira\u00e7\u00e3o autom\u00e1tica Refresh : Renova\u00e7\u00e3o de tokens","title":"Autentica\u00e7\u00e3o"},{"location":"overview/features/#autorizacao","text":"Permiss\u00f5es : Controle granular Roles : Pap\u00e9is de usu\u00e1rio Equipes : Permiss\u00f5es por equipe Provedores : Isolamento de dados","title":"Autoriza\u00e7\u00e3o"},{"location":"overview/features/#dados","text":"Criptografia : Dados sens\u00edveis protegidos Backup : Backup autom\u00e1tico SSL/TLS : Comunica\u00e7\u00e3o segura Monitoramento : Logs de seguran\u00e7a","title":"Dados"},{"location":"overview/features/#performance","text":"","title":"Performance"},{"location":"overview/features/#otimizacoes","text":"Cache : Redis para cache Consultas : Otimiza\u00e7\u00e3o de queries \u00cdndices : \u00cdndices de banco de dados CDN : Entrega de conte\u00fado","title":"Otimiza\u00e7\u00f5es"},{"location":"overview/features/#escalabilidade","text":"Horizontal : M\u00faltiplos servidores Vertical : Recursos adicionais Load Balancing : Distribui\u00e7\u00e3o de carga Microservi\u00e7os : Arquitetura modular","title":"Escalabilidade"},{"location":"overview/features/#monitoramento","text":"M\u00e9tricas : Performance em tempo real Alertas : Notifica\u00e7\u00f5es de problemas Logs : Logs detalhados Dashboards : Visualiza\u00e7\u00e3o de m\u00e9tricas","title":"Monitoramento"},{"location":"overview/features/#proximos-passos","text":"Instala\u00e7\u00e3o - Configure o ambiente Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es Uso - Aprenda a usar o sistema API - Explore a API","title":"Pr\u00f3ximos Passos"},{"location":"overview/introduction/","text":"Introdu\u00e7\u00e3o ao NioChat O NioChat \u00e9 um sistema completo de atendimento via WhatsApp com intelig\u00eancia artificial, desenvolvido para revolucionar o atendimento ao cliente. O que \u00e9 o NioChat? O NioChat \u00e9 uma plataforma de atendimento inteligente que combina: Intelig\u00eancia Artificial Avan\u00e7ada : ChatGPT integrado para respostas autom\u00e1ticas Integra\u00e7\u00e3o WhatsApp : Conex\u00e3o nativa com WhatsApp Business Sistema SGP : Consulta autom\u00e1tica de dados do cliente Dashboard em Tempo Real : M\u00e9tricas e an\u00e1lises instant\u00e2neas Sistema CSAT : Coleta autom\u00e1tica de satisfa\u00e7\u00e3o do cliente Principais Benef\u00edcios Para Empresas Redu\u00e7\u00e3o de Custos : Atendimento automatizado 24/7 Aumento de Produtividade : IA resolve 80% das consultas Melhoria na Satisfa\u00e7\u00e3o : Respostas r\u00e1pidas e precisas Insights Valiosos : M\u00e9tricas detalhadas de atendimento Para Clientes Atendimento Instant\u00e2neo : Respostas imediatas Disponibilidade 24/7 : Sempre dispon\u00edvel Respostas Precisas : Baseadas em dados reais Experi\u00eancia Personalizada : Atendimento humanizado Como Funciona 1. Cliente Envia Mensagem O cliente envia uma mensagem via WhatsApp para o n\u00famero da empresa. 2. IA Processa a Mensagem A IA analisa a mensagem e determina a melhor resposta ou a\u00e7\u00e3o. 3. Consulta Dados SGP (se necess\u00e1rio) Se necess\u00e1rio, a IA consulta automaticamente o sistema SGP para obter dados do cliente. 4. Resposta Autom\u00e1tica A IA envia uma resposta personalizada baseada nos dados obtidos. 5. Dashboard Atualizado Todas as intera\u00e7\u00f5es s\u00e3o registradas e exibidas no dashboard em tempo real. Casos de Uso Provedores de Internet Consulta de Faturas : Cliente pede fatura \u2192 IA consulta SGP \u2192 gera PIX/Boleto Suporte T\u00e9cnico : Cliente relata problema \u2192 IA verifica status \u2192 cria chamado Verifica\u00e7\u00e3o de Status : Cliente pergunta sobre conex\u00e3o \u2192 IA consulta status real Empresas de Servi\u00e7os Atendimento Automatizado : IA responde perguntas comuns Agendamento : Integra\u00e7\u00e3o com sistemas de agendamento Feedback : Coleta autom\u00e1tica de satisfa\u00e7\u00e3o Tecnologias Utilizadas Backend Django 5.2 : Framework web robusto Django REST Framework : API REST completa Channels : WebSocket para tempo real Celery : Processamento ass\u00edncrono Redis : Cache e sess\u00f5es PostgreSQL : Banco de dados principal Frontend React 18 : Interface moderna Vite : Build tool r\u00e1pido Tailwind CSS : Estiliza\u00e7\u00e3o Shadcn/ui : Componentes WebSocket : Tempo real Integra\u00e7\u00f5es Uazapi/Evolution : WhatsApp Business OpenAI ChatGPT : IA avan\u00e7ada Supabase : Dashboard e dados SGP : Sistema de gest\u00e3o Arquitetura Frontend (React) \u2192 Backend (Django) \u2192 Integra\u00e7\u00f5es \u2193 \u2193 \u2193 Dashboard \u2190\u2192 API REST \u2190\u2192 WhatsApp (Uazapi) \u2193 \u2193 \u2193 Supabase \u2190\u2192 WebSocket \u2190\u2192 IA (OpenAI) \u2193 \u2193 \u2193 Auditoria \u2190\u2192 Celery \u2190\u2192 SGP System Fluxo de Dados Cliente envia mensagem \u2192 WhatsApp \u2192 Uazapi \u2192 Django IA processa \u2192 OpenAI \u2192 SGP (se necess\u00e1rio) \u2192 Resposta Dados salvos \u2192 Supabase (conversas, contatos, mensagens, CSAT) Dashboard atualiza \u2192 Frontend via API REST CSAT autom\u00e1tico \u2192 1.5min ap\u00f3s fechamento \u2192 IA interpreta feedback Seguran\u00e7a Multi-tenant Isolamento Total : Cada provedor tem seus dados Row Level Security : Supabase com RLS Permiss\u00f5es Granulares : Controle fino de acesso Auditoria Completa : Log de todas as a\u00e7\u00f5es Dados Criptografia : Dados sens\u00edveis protegidos Backup : Backup autom\u00e1tico SSL/TLS : Comunica\u00e7\u00e3o criptografada Monitoramento : Logs e alertas Performance Tempo de Resposta : < 200ms Uptime : 99.9% Escalabilidade : 1000+ usu\u00e1rios simult\u00e2neos Disponibilidade : 24/7 Pr\u00f3ximos Passos Arquitetura - Entenda a arquitetura do sistema Funcionalidades - Explore todas as funcionalidades Instala\u00e7\u00e3o - Configure o ambiente API - Explore a API","title":"Introdu\u00e7\u00e3o ao NioChat"},{"location":"overview/introduction/#introducao-ao-niochat","text":"O NioChat \u00e9 um sistema completo de atendimento via WhatsApp com intelig\u00eancia artificial, desenvolvido para revolucionar o atendimento ao cliente.","title":"Introdu\u00e7\u00e3o ao NioChat"},{"location":"overview/introduction/#o-que-e-o-niochat","text":"O NioChat \u00e9 uma plataforma de atendimento inteligente que combina: Intelig\u00eancia Artificial Avan\u00e7ada : ChatGPT integrado para respostas autom\u00e1ticas Integra\u00e7\u00e3o WhatsApp : Conex\u00e3o nativa com WhatsApp Business Sistema SGP : Consulta autom\u00e1tica de dados do cliente Dashboard em Tempo Real : M\u00e9tricas e an\u00e1lises instant\u00e2neas Sistema CSAT : Coleta autom\u00e1tica de satisfa\u00e7\u00e3o do cliente","title":"O que \u00e9 o NioChat?"},{"location":"overview/introduction/#principais-beneficios","text":"","title":"Principais Benef\u00edcios"},{"location":"overview/introduction/#para-empresas","text":"Redu\u00e7\u00e3o de Custos : Atendimento automatizado 24/7 Aumento de Produtividade : IA resolve 80% das consultas Melhoria na Satisfa\u00e7\u00e3o : Respostas r\u00e1pidas e precisas Insights Valiosos : M\u00e9tricas detalhadas de atendimento","title":"Para Empresas"},{"location":"overview/introduction/#para-clientes","text":"Atendimento Instant\u00e2neo : Respostas imediatas Disponibilidade 24/7 : Sempre dispon\u00edvel Respostas Precisas : Baseadas em dados reais Experi\u00eancia Personalizada : Atendimento humanizado","title":"Para Clientes"},{"location":"overview/introduction/#como-funciona","text":"","title":"Como Funciona"},{"location":"overview/introduction/#1-cliente-envia-mensagem","text":"O cliente envia uma mensagem via WhatsApp para o n\u00famero da empresa.","title":"1. Cliente Envia Mensagem"},{"location":"overview/introduction/#2-ia-processa-a-mensagem","text":"A IA analisa a mensagem e determina a melhor resposta ou a\u00e7\u00e3o.","title":"2. IA Processa a Mensagem"},{"location":"overview/introduction/#3-consulta-dados-sgp-se-necessario","text":"Se necess\u00e1rio, a IA consulta automaticamente o sistema SGP para obter dados do cliente.","title":"3. Consulta Dados SGP (se necess\u00e1rio)"},{"location":"overview/introduction/#4-resposta-automatica","text":"A IA envia uma resposta personalizada baseada nos dados obtidos.","title":"4. Resposta Autom\u00e1tica"},{"location":"overview/introduction/#5-dashboard-atualizado","text":"Todas as intera\u00e7\u00f5es s\u00e3o registradas e exibidas no dashboard em tempo real.","title":"5. Dashboard Atualizado"},{"location":"overview/introduction/#casos-de-uso","text":"","title":"Casos de Uso"},{"location":"overview/introduction/#provedores-de-internet","text":"Consulta de Faturas : Cliente pede fatura \u2192 IA consulta SGP \u2192 gera PIX/Boleto Suporte T\u00e9cnico : Cliente relata problema \u2192 IA verifica status \u2192 cria chamado Verifica\u00e7\u00e3o de Status : Cliente pergunta sobre conex\u00e3o \u2192 IA consulta status real","title":"Provedores de Internet"},{"location":"overview/introduction/#empresas-de-servicos","text":"Atendimento Automatizado : IA responde perguntas comuns Agendamento : Integra\u00e7\u00e3o com sistemas de agendamento Feedback : Coleta autom\u00e1tica de satisfa\u00e7\u00e3o","title":"Empresas de Servi\u00e7os"},{"location":"overview/introduction/#tecnologias-utilizadas","text":"","title":"Tecnologias Utilizadas"},{"location":"overview/introduction/#backend","text":"Django 5.2 : Framework web robusto Django REST Framework : API REST completa Channels : WebSocket para tempo real Celery : Processamento ass\u00edncrono Redis : Cache e sess\u00f5es PostgreSQL : Banco de dados principal","title":"Backend"},{"location":"overview/introduction/#frontend","text":"React 18 : Interface moderna Vite : Build tool r\u00e1pido Tailwind CSS : Estiliza\u00e7\u00e3o Shadcn/ui : Componentes WebSocket : Tempo real","title":"Frontend"},{"location":"overview/introduction/#integracoes","text":"Uazapi/Evolution : WhatsApp Business OpenAI ChatGPT : IA avan\u00e7ada Supabase : Dashboard e dados SGP : Sistema de gest\u00e3o","title":"Integra\u00e7\u00f5es"},{"location":"overview/introduction/#arquitetura","text":"Frontend (React) \u2192 Backend (Django) \u2192 Integra\u00e7\u00f5es \u2193 \u2193 \u2193 Dashboard \u2190\u2192 API REST \u2190\u2192 WhatsApp (Uazapi) \u2193 \u2193 \u2193 Supabase \u2190\u2192 WebSocket \u2190\u2192 IA (OpenAI) \u2193 \u2193 \u2193 Auditoria \u2190\u2192 Celery \u2190\u2192 SGP System","title":"Arquitetura"},{"location":"overview/introduction/#fluxo-de-dados","text":"Cliente envia mensagem \u2192 WhatsApp \u2192 Uazapi \u2192 Django IA processa \u2192 OpenAI \u2192 SGP (se necess\u00e1rio) \u2192 Resposta Dados salvos \u2192 Supabase (conversas, contatos, mensagens, CSAT) Dashboard atualiza \u2192 Frontend via API REST CSAT autom\u00e1tico \u2192 1.5min ap\u00f3s fechamento \u2192 IA interpreta feedback","title":"Fluxo de Dados"},{"location":"overview/introduction/#seguranca","text":"","title":"Seguran\u00e7a"},{"location":"overview/introduction/#multi-tenant","text":"Isolamento Total : Cada provedor tem seus dados Row Level Security : Supabase com RLS Permiss\u00f5es Granulares : Controle fino de acesso Auditoria Completa : Log de todas as a\u00e7\u00f5es","title":"Multi-tenant"},{"location":"overview/introduction/#dados","text":"Criptografia : Dados sens\u00edveis protegidos Backup : Backup autom\u00e1tico SSL/TLS : Comunica\u00e7\u00e3o criptografada Monitoramento : Logs e alertas","title":"Dados"},{"location":"overview/introduction/#performance","text":"Tempo de Resposta : < 200ms Uptime : 99.9% Escalabilidade : 1000+ usu\u00e1rios simult\u00e2neos Disponibilidade : 24/7","title":"Performance"},{"location":"overview/introduction/#proximos-passos","text":"Arquitetura - Entenda a arquitetura do sistema Funcionalidades - Explore todas as funcionalidades Instala\u00e7\u00e3o - Configure o ambiente API - Explore a API","title":"Pr\u00f3ximos Passos"},{"location":"supabase/integration/","text":"Integra\u00e7\u00e3o com Supabase O NioChat utiliza Supabase para dashboard em tempo real, auditoria e sistema CSAT. Este guia explica como implementar e usar a integra\u00e7\u00e3o. Vis\u00e3o Geral Funcionalidades Dashboard em Tempo Real : M\u00e9tricas atualizadas instantaneamente Auditoria Completa : Log de todas as a\u00e7\u00f5es do sistema Sistema CSAT : Coleta e an\u00e1lise de satisfa\u00e7\u00e3o do cliente Isolamento de Dados : Cada provedor tem seus dados separados Real-time Updates : Atualiza\u00e7\u00f5es via WebSocket Arquitetura NioChat Backend \u2192 Supabase \u2192 Dashboard Frontend \u2193 \u2193 \u2193 Django API PostgreSQL React App \u2193 \u2193 \u2193 WebSocket Real-time WebSocket Configura\u00e7\u00e3o Inicial 1. Criar Projeto Supabase # Acessar Supabase https://supabase.com # Criar novo projeto - Nome: NioChat - Database Password: senha_segura - Region: escolher mais pr\u00f3xima 2. Obter Credenciais # Adicionar ao .env SUPABASE_URL=https://seu-projeto.supabase.co SUPABASE_ANON_KEY=sua_chave_anon_aqui SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_aqui 3. Configurar Django # settings.py SUPABASE_URL = os.getenv('SUPABASE_URL') SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY') SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY') Estrutura do Banco 1. Tabelas Principais Conversas CREATE TABLE conversations ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, inbox_id BIGINT, status TEXT DEFAULT 'open', assignee_id BIGINT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), ended_at TIMESTAMPTZ, additional_attributes JSONB ); Contatos CREATE TABLE contacts ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, name TEXT NOT NULL, phone TEXT, email TEXT, avatar TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), additional_attributes JSONB ); Mensagens CREATE TABLE messages ( id BIGINT PRIMARY KEY, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, provedor_id BIGINT NOT NULL, content TEXT, message_type TEXT DEFAULT 'text', is_from_customer BOOLEAN DEFAULT true, file_url TEXT, file_name TEXT, file_size BIGINT, external_id TEXT, additional_attributes JSONB, created_at TIMESTAMPTZ DEFAULT NOW() ); CSAT Feedback CREATE TABLE csat_feedback ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, emoji_rating TEXT, rating_value INTEGER NOT NULL, original_message TEXT, contact_avatar TEXT, feedback_sent_at TIMESTAMPTZ DEFAULT NOW() ); Logs de Auditoria CREATE TABLE audit_logs ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, user_id BIGINT, action TEXT NOT NULL, details JSONB, timestamp TIMESTAMPTZ DEFAULT NOW() ); 2. \u00cdndices para Performance -- Conversas CREATE INDEX idx_conversations_provedor_id ON conversations(provedor_id); CREATE INDEX idx_conversations_status ON conversations(status); CREATE INDEX idx_conversations_assignee_id ON conversations(assignee_id); CREATE INDEX idx_conversations_created_at ON conversations(created_at); -- Contatos CREATE INDEX idx_contacts_provedor_id ON contacts(provedor_id); CREATE INDEX idx_contacts_phone ON contacts(phone); -- Mensagens CREATE INDEX idx_messages_conversation_id ON messages(conversation_id); CREATE INDEX idx_messages_provedor_id ON messages(provedor_id); CREATE INDEX idx_messages_created_at ON messages(created_at); -- CSAT CREATE INDEX idx_csat_provedor_id ON csat_feedback(provedor_id); CREATE INDEX idx_csat_rating_value ON csat_feedback(rating_value); CREATE INDEX idx_csat_feedback_sent_at ON csat_feedback(feedback_sent_at); -- Auditoria CREATE INDEX idx_audit_provedor_id ON audit_logs(provedor_id); CREATE INDEX idx_audit_user_id ON audit_logs(user_id); CREATE INDEX idx_audit_action ON audit_logs(action); CREATE INDEX idx_audit_timestamp ON audit_logs(timestamp); Row Level Security (RLS) 1. Habilitar RLS -- Habilitar RLS em todas as tabelas ALTER TABLE conversations ENABLE ROW LEVEL SECURITY; ALTER TABLE contacts ENABLE ROW LEVEL SECURITY; ALTER TABLE messages ENABLE ROW LEVEL SECURITY; ALTER TABLE csat_feedback ENABLE ROW LEVEL SECURITY; ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY; 2. Pol\u00edticas de Isolamento -- Pol\u00edtica para conversas CREATE POLICY \"Isolate by provedor_id\" ON conversations FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para contatos CREATE POLICY \"Isolate by provedor_id\" ON contacts FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para mensagens CREATE POLICY \"Isolate by provedor_id\" ON messages FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para CSAT CREATE POLICY \"Isolate by provedor_id\" ON csat_feedback FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para auditoria CREATE POLICY \"Isolate by provedor_id\" ON audit_logs FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); Servi\u00e7o Supabase 1. Classe Principal # core/supabase_service.py import requests from django.conf import settings from typing import Dict, Any, Optional class SupabaseService: def __init__(self): self.url = settings.SUPABASE_URL self.headers = { 'apikey': settings.SUPABASE_ANON_KEY, 'Authorization': f'Bearer {settings.SUPABASE_ANON_KEY}', 'Content-Type': 'application/json' } def _post(self, table: str, data: Dict[str, Any], provedor_id: int) -> bool: \"\"\"Enviar dados para Supabase\"\"\" try: # Adicionar provedor_id para RLS data['provedor_id'] = provedor_id response = requests.post( f\"{self.url}/rest/v1/{table}\", json=data, headers=self.headers ) return response.status_code in [200, 201] except Exception as e: print(f\"Erro ao enviar para Supabase: {e}\") return False def save_conversation(self, *, provedor_id: int, conversation_id: int, contact_id: int, inbox_id: Optional[int] = None, status: str = 'open', assignee_id: Optional[int] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar conversa no Supabase\"\"\" payload = { \"id\": conversation_id, \"contact_id\": contact_id, \"inbox_id\": inbox_id, \"status\": status, \"assignee_id\": assignee_id, \"additional_attributes\": additional_attributes or {} } return self._post(\"conversations\", payload, provedor_id) def save_contact(self, *, provedor_id: int, contact_id: int, name: str, phone: Optional[str] = None, email: Optional[str] = None, avatar: Optional[str] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar contato no Supabase\"\"\" payload = { \"id\": contact_id, \"name\": name, \"phone\": phone, \"email\": email, \"avatar\": avatar, \"additional_attributes\": additional_attributes or {} } return self._post(\"contacts\", payload, provedor_id) def save_message(self, *, provedor_id: int, message_id: int, conversation_id: int, contact_id: int, content: str, message_type: str = 'text', is_from_customer: bool = True, file_url: Optional[str] = None, file_name: Optional[str] = None, file_size: Optional[int] = None, external_id: Optional[str] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar mensagem no Supabase\"\"\" payload = { \"id\": message_id, \"conversation_id\": conversation_id, \"contact_id\": contact_id, \"content\": content, \"message_type\": message_type, \"is_from_customer\": is_from_customer, \"file_url\": file_url, \"file_name\": file_name, \"file_size\": file_size, \"external_id\": external_id, \"additional_attributes\": additional_attributes or {} } return self._post(\"messages\", payload, provedor_id) def save_csat(self, *, provedor_id: int, conversation_id: int, contact_id: int, emoji_rating: str, rating_value: int, original_message: Optional[str] = None, contact_avatar: Optional[str] = None, feedback_sent_at_iso: Optional[str] = None) -> bool: \"\"\"Salvar feedback CSAT no Supabase\"\"\" payload = { \"conversation_id\": conversation_id, \"contact_id\": contact_id, \"emoji_rating\": emoji_rating, \"rating_value\": rating_value, \"original_message\": original_message, \"contact_avatar\": contact_avatar, \"feedback_sent_at\": feedback_sent_at_iso } return self._post(\"csat_feedback\", payload, provedor_id) def save_audit_log(self, *, provedor_id: int, user_id: Optional[int], action: str, details: Optional[Dict] = None) -> bool: \"\"\"Salvar log de auditoria no Supabase\"\"\" payload = { \"user_id\": user_id, \"action\": action, \"details\": details or {} } return self._post(\"audit_logs\", payload, provedor_id) 2. Uso no Django # Em views.py from core.supabase_service import SupabaseService def create_conversation(request): # Criar conversa no Django conversation = Conversation.objects.create(...) # Salvar no Supabase supabase_service = SupabaseService() supabase_service.save_conversation( provedor_id=conversation.provedor.id, conversation_id=conversation.id, contact_id=conversation.contact.id, status=conversation.status ) return JsonResponse({'success': True}) Real-time Updates 1. Configurar Real-time -- Habilitar real-time para tabelas ALTER PUBLICATION supabase_realtime ADD TABLE conversations; ALTER PUBLICATION supabase_realtime ADD TABLE messages; ALTER PUBLICATION supabase_realtime ADD TABLE csat_feedback; ALTER PUBLICATION supabase_realtime ADD TABLE audit_logs; 2. Frontend WebSocket // frontend/src/hooks/useSupabase.js import { createClient } from '@supabase/supabase-js' const supabaseUrl = process.env.REACT_APP_SUPABASE_URL const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY const supabase = createClient(supabaseUrl, supabaseKey) export const useSupabaseRealtime = (table, callback) => { useEffect(() => { const subscription = supabase .channel(`${table}_changes`) .on('postgres_changes', { event: '*', schema: 'public', table }, callback ) .subscribe() return () => { subscription.unsubscribe() } }, [table, callback]) } // Uso const handleConversationUpdate = (payload) => { console.log('Conversa atualizada:', payload) // Atualizar estado do React } useSupabaseRealtime('conversations', handleConversationUpdate) 3. Dashboard em Tempo Real // frontend/src/components/Dashboard.jsx import { useSupabaseRealtime } from '../hooks/useSupabase' const Dashboard = () => { const [metrics, setMetrics] = useState({}) // Atualizar m\u00e9tricas em tempo real useSupabaseRealtime('conversations', (payload) => { if (payload.eventType === 'INSERT') { setMetrics(prev => ({ ...prev, total_conversations: prev.total_conversations + 1 })) } }) useSupabaseRealtime('csat_feedback', (payload) => { if (payload.eventType === 'INSERT') { setMetrics(prev => ({ ...prev, total_feedbacks: prev.total_feedbacks + 1 })) } }) return ( <div> <h1>Dashboard</h1> <p>Total de Conversas: {metrics.total_conversations}</p> <p>Total de Feedbacks: {metrics.total_feedbacks}</p> </div> ) } Sistema CSAT 1. Coleta Autom\u00e1tica # conversations/csat_automation.py from core.supabase_service import SupabaseService class CSATAutomationService: @classmethod def process_csat_response(cls, message_text: str, conversation, contact): # Processar feedback com IA ai_analysis = openai_service.analyze_csat_sentiment(message_text) # Salvar no Supabase supabase_service = SupabaseService() supabase_service.save_csat( provedor_id=conversation.provedor.id, conversation_id=conversation.id, contact_id=contact.id, emoji_rating=ai_analysis['emoji'], rating_value=ai_analysis['rating'], original_message=message_text, contact_avatar=contact.avatar ) return True 2. Dashboard CSAT // frontend/src/components/CSATDashboard.jsx import { useSupabaseRealtime } from '../hooks/useSupabase' const CSATDashboard = () => { const [csatData, setCsatData] = useState([]) // Atualizar em tempo real useSupabaseRealtime('csat_feedback', (payload) => { if (payload.eventType === 'INSERT') { setCsatData(prev => [payload.new, ...prev]) } }) return ( <div> <h2>Feedbacks CSAT</h2> {csatData.map(feedback => ( <div key={feedback.id}> <p>Rating: {feedback.emoji_rating} ({feedback.rating_value})</p> <p>Mensagem: {feedback.original_message}</p> </div> ))} </div> ) } Auditoria 1. Log Autom\u00e1tico # core/middleware.py class AuditMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): response = self.get_response(request) # Log de auditoria if request.user.is_authenticated: supabase_service = SupabaseService() supabase_service.save_audit_log( provedor_id=request.user.provedor.id, user_id=request.user.id, action=f\"{request.method} {request.path}\", details={ 'ip': request.META.get('REMOTE_ADDR'), 'user_agent': request.META.get('HTTP_USER_AGENT'), 'status_code': response.status_code } ) return response 2. Visualiza\u00e7\u00e3o de Logs // frontend/src/components/AuditLogs.jsx const AuditLogs = () => { const [logs, setLogs] = useState([]) // Atualizar em tempo real useSupabaseRealtime('audit_logs', (payload) => { if (payload.eventType === 'INSERT') { setLogs(prev => [payload.new, ...prev]) } }) return ( <div> <h2>Logs de Auditoria</h2> {logs.map(log => ( <div key={log.id}> <p>A\u00e7\u00e3o: {log.action}</p> <p>Usu\u00e1rio: {log.user_id}</p> <p>Data: {log.timestamp}</p> </div> ))} </div> ) } Monitoramento 1. M\u00e9tricas em Tempo Real -- View para m\u00e9tricas CREATE VIEW dashboard_metrics AS SELECT provedor_id, COUNT(*) as total_conversations, COUNT(CASE WHEN status = 'open' THEN 1 END) as open_conversations, COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_conversations, AVG(CASE WHEN status = 'closed' THEN EXTRACT(EPOCH FROM (ended_at - created_at))/3600 END) as avg_resolution_time_hours FROM conversations WHERE created_at >= NOW() - INTERVAL '24 hours' GROUP BY provedor_id; 2. Alertas Autom\u00e1ticos -- Fun\u00e7\u00e3o para alertas CREATE OR REPLACE FUNCTION check_conversation_alerts() RETURNS TRIGGER AS $$ BEGIN -- Alertar se conversa aberta h\u00e1 mais de 1 hora IF NEW.status = 'open' AND EXTRACT(EPOCH FROM (NOW() - NEW.created_at))/3600 > 1 THEN -- Enviar notifica\u00e7\u00e3o PERFORM pg_notify('conversation_alert', json_build_object( 'conversation_id', NEW.id, 'provedor_id', NEW.provedor_id, 'alert_type', 'long_open_conversation' )::text ); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; -- Trigger para alertas CREATE TRIGGER conversation_alert_trigger AFTER UPDATE ON conversations FOR EACH ROW EXECUTE FUNCTION check_conversation_alerts(); Troubleshooting 1. Problemas Comuns # Verificar conex\u00e3o curl -I https://seu-projeto.supabase.co # Verificar chave curl -H \"apikey: sua_chave\" https://seu-projeto.supabase.co/rest/v1/ 2. Logs de Debug # Testar conex\u00e3o from core.supabase_service import SupabaseService supabase = SupabaseService() print(supabase.test_connection()) 3. Verificar RLS -- Verificar pol\u00edticas SELECT * FROM pg_policies WHERE tablename = 'conversations'; -- Testar acesso SELECT * FROM conversations WHERE provedor_id = 1; Pr\u00f3ximos Passos Dashboard - Configure o dashboard CSAT - Configure o sistema CSAT Auditoria - Configure a auditoria","title":"Integra\u00e7\u00e3o com Supabase"},{"location":"supabase/integration/#integracao-com-supabase","text":"O NioChat utiliza Supabase para dashboard em tempo real, auditoria e sistema CSAT. Este guia explica como implementar e usar a integra\u00e7\u00e3o.","title":"Integra\u00e7\u00e3o com Supabase"},{"location":"supabase/integration/#visao-geral","text":"","title":"Vis\u00e3o Geral"},{"location":"supabase/integration/#funcionalidades","text":"Dashboard em Tempo Real : M\u00e9tricas atualizadas instantaneamente Auditoria Completa : Log de todas as a\u00e7\u00f5es do sistema Sistema CSAT : Coleta e an\u00e1lise de satisfa\u00e7\u00e3o do cliente Isolamento de Dados : Cada provedor tem seus dados separados Real-time Updates : Atualiza\u00e7\u00f5es via WebSocket","title":"Funcionalidades"},{"location":"supabase/integration/#arquitetura","text":"NioChat Backend \u2192 Supabase \u2192 Dashboard Frontend \u2193 \u2193 \u2193 Django API PostgreSQL React App \u2193 \u2193 \u2193 WebSocket Real-time WebSocket","title":"Arquitetura"},{"location":"supabase/integration/#configuracao-inicial","text":"","title":"Configura\u00e7\u00e3o Inicial"},{"location":"supabase/integration/#1-criar-projeto-supabase","text":"# Acessar Supabase https://supabase.com # Criar novo projeto - Nome: NioChat - Database Password: senha_segura - Region: escolher mais pr\u00f3xima","title":"1. Criar Projeto Supabase"},{"location":"supabase/integration/#2-obter-credenciais","text":"# Adicionar ao .env SUPABASE_URL=https://seu-projeto.supabase.co SUPABASE_ANON_KEY=sua_chave_anon_aqui SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_aqui","title":"2. Obter Credenciais"},{"location":"supabase/integration/#3-configurar-django","text":"# settings.py SUPABASE_URL = os.getenv('SUPABASE_URL') SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY') SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')","title":"3. Configurar Django"},{"location":"supabase/integration/#estrutura-do-banco","text":"","title":"Estrutura do Banco"},{"location":"supabase/integration/#1-tabelas-principais","text":"","title":"1. Tabelas Principais"},{"location":"supabase/integration/#conversas","text":"CREATE TABLE conversations ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, inbox_id BIGINT, status TEXT DEFAULT 'open', assignee_id BIGINT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), ended_at TIMESTAMPTZ, additional_attributes JSONB );","title":"Conversas"},{"location":"supabase/integration/#contatos","text":"CREATE TABLE contacts ( id BIGINT PRIMARY KEY, provedor_id BIGINT NOT NULL, name TEXT NOT NULL, phone TEXT, email TEXT, avatar TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW(), additional_attributes JSONB );","title":"Contatos"},{"location":"supabase/integration/#mensagens","text":"CREATE TABLE messages ( id BIGINT PRIMARY KEY, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, provedor_id BIGINT NOT NULL, content TEXT, message_type TEXT DEFAULT 'text', is_from_customer BOOLEAN DEFAULT true, file_url TEXT, file_name TEXT, file_size BIGINT, external_id TEXT, additional_attributes JSONB, created_at TIMESTAMPTZ DEFAULT NOW() );","title":"Mensagens"},{"location":"supabase/integration/#csat-feedback","text":"CREATE TABLE csat_feedback ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, conversation_id BIGINT NOT NULL, contact_id BIGINT NOT NULL, emoji_rating TEXT, rating_value INTEGER NOT NULL, original_message TEXT, contact_avatar TEXT, feedback_sent_at TIMESTAMPTZ DEFAULT NOW() );","title":"CSAT Feedback"},{"location":"supabase/integration/#logs-de-auditoria","text":"CREATE TABLE audit_logs ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), provedor_id BIGINT NOT NULL, user_id BIGINT, action TEXT NOT NULL, details JSONB, timestamp TIMESTAMPTZ DEFAULT NOW() );","title":"Logs de Auditoria"},{"location":"supabase/integration/#2-indices-para-performance","text":"-- Conversas CREATE INDEX idx_conversations_provedor_id ON conversations(provedor_id); CREATE INDEX idx_conversations_status ON conversations(status); CREATE INDEX idx_conversations_assignee_id ON conversations(assignee_id); CREATE INDEX idx_conversations_created_at ON conversations(created_at); -- Contatos CREATE INDEX idx_contacts_provedor_id ON contacts(provedor_id); CREATE INDEX idx_contacts_phone ON contacts(phone); -- Mensagens CREATE INDEX idx_messages_conversation_id ON messages(conversation_id); CREATE INDEX idx_messages_provedor_id ON messages(provedor_id); CREATE INDEX idx_messages_created_at ON messages(created_at); -- CSAT CREATE INDEX idx_csat_provedor_id ON csat_feedback(provedor_id); CREATE INDEX idx_csat_rating_value ON csat_feedback(rating_value); CREATE INDEX idx_csat_feedback_sent_at ON csat_feedback(feedback_sent_at); -- Auditoria CREATE INDEX idx_audit_provedor_id ON audit_logs(provedor_id); CREATE INDEX idx_audit_user_id ON audit_logs(user_id); CREATE INDEX idx_audit_action ON audit_logs(action); CREATE INDEX idx_audit_timestamp ON audit_logs(timestamp);","title":"2. \u00cdndices para Performance"},{"location":"supabase/integration/#row-level-security-rls","text":"","title":"Row Level Security (RLS)"},{"location":"supabase/integration/#1-habilitar-rls","text":"-- Habilitar RLS em todas as tabelas ALTER TABLE conversations ENABLE ROW LEVEL SECURITY; ALTER TABLE contacts ENABLE ROW LEVEL SECURITY; ALTER TABLE messages ENABLE ROW LEVEL SECURITY; ALTER TABLE csat_feedback ENABLE ROW LEVEL SECURITY; ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;","title":"1. Habilitar RLS"},{"location":"supabase/integration/#2-politicas-de-isolamento","text":"-- Pol\u00edtica para conversas CREATE POLICY \"Isolate by provedor_id\" ON conversations FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para contatos CREATE POLICY \"Isolate by provedor_id\" ON contacts FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para mensagens CREATE POLICY \"Isolate by provedor_id\" ON messages FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para CSAT CREATE POLICY \"Isolate by provedor_id\" ON csat_feedback FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint); -- Pol\u00edtica para auditoria CREATE POLICY \"Isolate by provedor_id\" ON audit_logs FOR ALL USING (provedor_id = current_setting('request.jwt.claims', true)::json->>'provedor_id'::bigint);","title":"2. Pol\u00edticas de Isolamento"},{"location":"supabase/integration/#servico-supabase","text":"","title":"Servi\u00e7o Supabase"},{"location":"supabase/integration/#1-classe-principal","text":"# core/supabase_service.py import requests from django.conf import settings from typing import Dict, Any, Optional class SupabaseService: def __init__(self): self.url = settings.SUPABASE_URL self.headers = { 'apikey': settings.SUPABASE_ANON_KEY, 'Authorization': f'Bearer {settings.SUPABASE_ANON_KEY}', 'Content-Type': 'application/json' } def _post(self, table: str, data: Dict[str, Any], provedor_id: int) -> bool: \"\"\"Enviar dados para Supabase\"\"\" try: # Adicionar provedor_id para RLS data['provedor_id'] = provedor_id response = requests.post( f\"{self.url}/rest/v1/{table}\", json=data, headers=self.headers ) return response.status_code in [200, 201] except Exception as e: print(f\"Erro ao enviar para Supabase: {e}\") return False def save_conversation(self, *, provedor_id: int, conversation_id: int, contact_id: int, inbox_id: Optional[int] = None, status: str = 'open', assignee_id: Optional[int] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar conversa no Supabase\"\"\" payload = { \"id\": conversation_id, \"contact_id\": contact_id, \"inbox_id\": inbox_id, \"status\": status, \"assignee_id\": assignee_id, \"additional_attributes\": additional_attributes or {} } return self._post(\"conversations\", payload, provedor_id) def save_contact(self, *, provedor_id: int, contact_id: int, name: str, phone: Optional[str] = None, email: Optional[str] = None, avatar: Optional[str] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar contato no Supabase\"\"\" payload = { \"id\": contact_id, \"name\": name, \"phone\": phone, \"email\": email, \"avatar\": avatar, \"additional_attributes\": additional_attributes or {} } return self._post(\"contacts\", payload, provedor_id) def save_message(self, *, provedor_id: int, message_id: int, conversation_id: int, contact_id: int, content: str, message_type: str = 'text', is_from_customer: bool = True, file_url: Optional[str] = None, file_name: Optional[str] = None, file_size: Optional[int] = None, external_id: Optional[str] = None, additional_attributes: Optional[Dict] = None) -> bool: \"\"\"Salvar mensagem no Supabase\"\"\" payload = { \"id\": message_id, \"conversation_id\": conversation_id, \"contact_id\": contact_id, \"content\": content, \"message_type\": message_type, \"is_from_customer\": is_from_customer, \"file_url\": file_url, \"file_name\": file_name, \"file_size\": file_size, \"external_id\": external_id, \"additional_attributes\": additional_attributes or {} } return self._post(\"messages\", payload, provedor_id) def save_csat(self, *, provedor_id: int, conversation_id: int, contact_id: int, emoji_rating: str, rating_value: int, original_message: Optional[str] = None, contact_avatar: Optional[str] = None, feedback_sent_at_iso: Optional[str] = None) -> bool: \"\"\"Salvar feedback CSAT no Supabase\"\"\" payload = { \"conversation_id\": conversation_id, \"contact_id\": contact_id, \"emoji_rating\": emoji_rating, \"rating_value\": rating_value, \"original_message\": original_message, \"contact_avatar\": contact_avatar, \"feedback_sent_at\": feedback_sent_at_iso } return self._post(\"csat_feedback\", payload, provedor_id) def save_audit_log(self, *, provedor_id: int, user_id: Optional[int], action: str, details: Optional[Dict] = None) -> bool: \"\"\"Salvar log de auditoria no Supabase\"\"\" payload = { \"user_id\": user_id, \"action\": action, \"details\": details or {} } return self._post(\"audit_logs\", payload, provedor_id)","title":"1. Classe Principal"},{"location":"supabase/integration/#2-uso-no-django","text":"# Em views.py from core.supabase_service import SupabaseService def create_conversation(request): # Criar conversa no Django conversation = Conversation.objects.create(...) # Salvar no Supabase supabase_service = SupabaseService() supabase_service.save_conversation( provedor_id=conversation.provedor.id, conversation_id=conversation.id, contact_id=conversation.contact.id, status=conversation.status ) return JsonResponse({'success': True})","title":"2. Uso no Django"},{"location":"supabase/integration/#real-time-updates","text":"","title":"Real-time Updates"},{"location":"supabase/integration/#1-configurar-real-time","text":"-- Habilitar real-time para tabelas ALTER PUBLICATION supabase_realtime ADD TABLE conversations; ALTER PUBLICATION supabase_realtime ADD TABLE messages; ALTER PUBLICATION supabase_realtime ADD TABLE csat_feedback; ALTER PUBLICATION supabase_realtime ADD TABLE audit_logs;","title":"1. Configurar Real-time"},{"location":"supabase/integration/#2-frontend-websocket","text":"// frontend/src/hooks/useSupabase.js import { createClient } from '@supabase/supabase-js' const supabaseUrl = process.env.REACT_APP_SUPABASE_URL const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY const supabase = createClient(supabaseUrl, supabaseKey) export const useSupabaseRealtime = (table, callback) => { useEffect(() => { const subscription = supabase .channel(`${table}_changes`) .on('postgres_changes', { event: '*', schema: 'public', table }, callback ) .subscribe() return () => { subscription.unsubscribe() } }, [table, callback]) } // Uso const handleConversationUpdate = (payload) => { console.log('Conversa atualizada:', payload) // Atualizar estado do React } useSupabaseRealtime('conversations', handleConversationUpdate)","title":"2. Frontend WebSocket"},{"location":"supabase/integration/#3-dashboard-em-tempo-real","text":"// frontend/src/components/Dashboard.jsx import { useSupabaseRealtime } from '../hooks/useSupabase' const Dashboard = () => { const [metrics, setMetrics] = useState({}) // Atualizar m\u00e9tricas em tempo real useSupabaseRealtime('conversations', (payload) => { if (payload.eventType === 'INSERT') { setMetrics(prev => ({ ...prev, total_conversations: prev.total_conversations + 1 })) } }) useSupabaseRealtime('csat_feedback', (payload) => { if (payload.eventType === 'INSERT') { setMetrics(prev => ({ ...prev, total_feedbacks: prev.total_feedbacks + 1 })) } }) return ( <div> <h1>Dashboard</h1> <p>Total de Conversas: {metrics.total_conversations}</p> <p>Total de Feedbacks: {metrics.total_feedbacks}</p> </div> ) }","title":"3. Dashboard em Tempo Real"},{"location":"supabase/integration/#sistema-csat","text":"","title":"Sistema CSAT"},{"location":"supabase/integration/#1-coleta-automatica","text":"# conversations/csat_automation.py from core.supabase_service import SupabaseService class CSATAutomationService: @classmethod def process_csat_response(cls, message_text: str, conversation, contact): # Processar feedback com IA ai_analysis = openai_service.analyze_csat_sentiment(message_text) # Salvar no Supabase supabase_service = SupabaseService() supabase_service.save_csat( provedor_id=conversation.provedor.id, conversation_id=conversation.id, contact_id=contact.id, emoji_rating=ai_analysis['emoji'], rating_value=ai_analysis['rating'], original_message=message_text, contact_avatar=contact.avatar ) return True","title":"1. Coleta Autom\u00e1tica"},{"location":"supabase/integration/#2-dashboard-csat","text":"// frontend/src/components/CSATDashboard.jsx import { useSupabaseRealtime } from '../hooks/useSupabase' const CSATDashboard = () => { const [csatData, setCsatData] = useState([]) // Atualizar em tempo real useSupabaseRealtime('csat_feedback', (payload) => { if (payload.eventType === 'INSERT') { setCsatData(prev => [payload.new, ...prev]) } }) return ( <div> <h2>Feedbacks CSAT</h2> {csatData.map(feedback => ( <div key={feedback.id}> <p>Rating: {feedback.emoji_rating} ({feedback.rating_value})</p> <p>Mensagem: {feedback.original_message}</p> </div> ))} </div> ) }","title":"2. Dashboard CSAT"},{"location":"supabase/integration/#auditoria","text":"","title":"Auditoria"},{"location":"supabase/integration/#1-log-automatico","text":"# core/middleware.py class AuditMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): response = self.get_response(request) # Log de auditoria if request.user.is_authenticated: supabase_service = SupabaseService() supabase_service.save_audit_log( provedor_id=request.user.provedor.id, user_id=request.user.id, action=f\"{request.method} {request.path}\", details={ 'ip': request.META.get('REMOTE_ADDR'), 'user_agent': request.META.get('HTTP_USER_AGENT'), 'status_code': response.status_code } ) return response","title":"1. Log Autom\u00e1tico"},{"location":"supabase/integration/#2-visualizacao-de-logs","text":"// frontend/src/components/AuditLogs.jsx const AuditLogs = () => { const [logs, setLogs] = useState([]) // Atualizar em tempo real useSupabaseRealtime('audit_logs', (payload) => { if (payload.eventType === 'INSERT') { setLogs(prev => [payload.new, ...prev]) } }) return ( <div> <h2>Logs de Auditoria</h2> {logs.map(log => ( <div key={log.id}> <p>A\u00e7\u00e3o: {log.action}</p> <p>Usu\u00e1rio: {log.user_id}</p> <p>Data: {log.timestamp}</p> </div> ))} </div> ) }","title":"2. Visualiza\u00e7\u00e3o de Logs"},{"location":"supabase/integration/#monitoramento","text":"","title":"Monitoramento"},{"location":"supabase/integration/#1-metricas-em-tempo-real","text":"-- View para m\u00e9tricas CREATE VIEW dashboard_metrics AS SELECT provedor_id, COUNT(*) as total_conversations, COUNT(CASE WHEN status = 'open' THEN 1 END) as open_conversations, COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_conversations, AVG(CASE WHEN status = 'closed' THEN EXTRACT(EPOCH FROM (ended_at - created_at))/3600 END) as avg_resolution_time_hours FROM conversations WHERE created_at >= NOW() - INTERVAL '24 hours' GROUP BY provedor_id;","title":"1. M\u00e9tricas em Tempo Real"},{"location":"supabase/integration/#2-alertas-automaticos","text":"-- Fun\u00e7\u00e3o para alertas CREATE OR REPLACE FUNCTION check_conversation_alerts() RETURNS TRIGGER AS $$ BEGIN -- Alertar se conversa aberta h\u00e1 mais de 1 hora IF NEW.status = 'open' AND EXTRACT(EPOCH FROM (NOW() - NEW.created_at))/3600 > 1 THEN -- Enviar notifica\u00e7\u00e3o PERFORM pg_notify('conversation_alert', json_build_object( 'conversation_id', NEW.id, 'provedor_id', NEW.provedor_id, 'alert_type', 'long_open_conversation' )::text ); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; -- Trigger para alertas CREATE TRIGGER conversation_alert_trigger AFTER UPDATE ON conversations FOR EACH ROW EXECUTE FUNCTION check_conversation_alerts();","title":"2. Alertas Autom\u00e1ticos"},{"location":"supabase/integration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"supabase/integration/#1-problemas-comuns","text":"# Verificar conex\u00e3o curl -I https://seu-projeto.supabase.co # Verificar chave curl -H \"apikey: sua_chave\" https://seu-projeto.supabase.co/rest/v1/","title":"1. Problemas Comuns"},{"location":"supabase/integration/#2-logs-de-debug","text":"# Testar conex\u00e3o from core.supabase_service import SupabaseService supabase = SupabaseService() print(supabase.test_connection())","title":"2. Logs de Debug"},{"location":"supabase/integration/#3-verificar-rls","text":"-- Verificar pol\u00edticas SELECT * FROM pg_policies WHERE tablename = 'conversations'; -- Testar acesso SELECT * FROM conversations WHERE provedor_id = 1;","title":"3. Verificar RLS"},{"location":"supabase/integration/#proximos-passos","text":"Dashboard - Configure o dashboard CSAT - Configure o sistema CSAT Auditoria - Configure a auditoria","title":"Pr\u00f3ximos Passos"},{"location":"usage/interface/","text":"Interface do Usu\u00e1rio Este guia explica como usar a interface do NioChat para gerenciar conversas, visualizar m\u00e9tricas e administrar o sistema. Acesso ao Sistema 1. Login Acesse a URL do sistema: http://localhost:5173 Digite seu usu\u00e1rio e senha Clique em \"Entrar\" 2. Primeiro Acesso Usu\u00e1rio : admin Senha : A senha definida durante a instala\u00e7\u00e3o Alterar Senha : Recomendado no primeiro acesso Dashboard Principal 1. Vis\u00e3o Geral O dashboard principal exibe: - Total de Conversas : N\u00famero total de conversas - Conversas Abertas : Conversas em andamento - Taxa de Resolu\u00e7\u00e3o : Percentual de conversas resolvidas - Satisfa\u00e7\u00e3o M\u00e9dia : M\u00e9dia das avalia\u00e7\u00f5es CSAT - Tempo de Resposta : Tempo m\u00e9dio de resposta 2. Gr\u00e1ficos Interativos Evolu\u00e7\u00e3o Temporal : Gr\u00e1fico de linha mostrando conversas ao longo do tempo Distribui\u00e7\u00e3o por Status : Gr\u00e1fico de pizza com status das conversas Performance por Agente : Gr\u00e1fico de barras com m\u00e9tricas individuais Tend\u00eancias CSAT : Evolu\u00e7\u00e3o da satisfa\u00e7\u00e3o do cliente 3. Filtros Por Data : Selecione per\u00edodo espec\u00edfico Por Agente : Filtre por agente respons\u00e1vel Por Equipe : Filtre por equipe Por Status : Apenas conversas abertas, fechadas, etc. Gerenciamento de Conversas 1. Lista de Conversas A lista de conversas mostra: - Cliente : Nome e foto do contato - \u00daltima Mensagem : Preview da \u00faltima mensagem - Status : Aberta, fechada, pendente - Agente : Quem est\u00e1 atendendo - Tempo : H\u00e1 quanto tempo a conversa est\u00e1 ativa - Prioridade : Indicador visual de urg\u00eancia 2. A\u00e7\u00f5es Dispon\u00edveis Abrir Conversa : Clique para abrir o chat Atribuir : Transferir para outro agente Fechar : Encerrar conversa Marcar como Pendente : Pausar atendimento Transferir para Equipe : Enviar para equipe espec\u00edfica 3. Busca e Filtros Busca por Texto : Digite para buscar em mensagens Filtro por Status : Dropdown com op\u00e7\u00f5es Filtro por Agente : Selecione agente espec\u00edfico Ordena\u00e7\u00e3o : Por data, prioridade, status Chat Interface 1. \u00c1rea de Mensagens Hist\u00f3rico : Todas as mensagens da conversa Tipos de M\u00eddia : Imagens, v\u00eddeos, \u00e1udios, documentos Rea\u00e7\u00f5es : Emojis e rea\u00e7\u00f5es personalizadas Status de Entrega : Confirma\u00e7\u00e3o de recebimento Timestamp : Hora de cada mensagem 2. Envio de Mensagens Texto : Digite e pressione Enter M\u00eddia : Clique no \u00edcone de anexo Respostas R\u00e1pidas : Templates pr\u00e9-definidos Emojis : Seletor de emojis Formata\u00e7\u00e3o : Negrito, it\u00e1lico, c\u00f3digo 3. Funcionalidades Avan\u00e7adas IA Assistente : Sugest\u00f5es autom\u00e1ticas Consulta SGP : Bot\u00e3o para consultar dados do cliente Hist\u00f3rico : Ver conversas anteriores do cliente Notas : Adicionar notas internas Tags : Marcar conversa com tags Sistema CSAT 1. Configura\u00e7\u00e3o Tempo de Envio : 1.5 minutos ap\u00f3s fechamento Mensagem Personalizada : Texto customizado por provedor Canais : WhatsApp, SMS, Email Agendamento : Hor\u00e1rios espec\u00edficos 2. Dashboard CSAT M\u00e9tricas Visuais : Gr\u00e1ficos de satisfa\u00e7\u00e3o Distribui\u00e7\u00e3o de Ratings : 1 a 5 estrelas Evolu\u00e7\u00e3o Temporal : Tend\u00eancias ao longo do tempo Compara\u00e7\u00e3o : Per\u00edodos diferentes 3. \u00daltimos Feedbacks Avatar do Cliente : Foto de perfil Rating Visual : Emoji correspondente Mensagem Original : Feedback textual do cliente Data/Hora : Quando foi enviado An\u00e1lise IA : Interpreta\u00e7\u00e3o autom\u00e1tica Administra\u00e7\u00e3o 1. Usu\u00e1rios Listar Usu\u00e1rios : Todos os usu\u00e1rios do sistema Criar Usu\u00e1rio : Adicionar novo usu\u00e1rio Editar Perfil : Modificar dados do usu\u00e1rio Permiss\u00f5es : Definir n\u00edveis de acesso Equipes : Organizar usu\u00e1rios em equipes 2. Provedores Configura\u00e7\u00f5es : Dados do provedor Integra\u00e7\u00f5es : WhatsApp, SGP, Supabase Limites : Controles de uso Billing : Informa\u00e7\u00f5es de cobran\u00e7a 3. Configura\u00e7\u00f5es Sistema : Configura\u00e7\u00f5es gerais IA : Par\u00e2metros da intelig\u00eancia artificial Notifica\u00e7\u00f5es : Alertas e lembretes Backup : Configura\u00e7\u00f5es de backup Logs : Visualiza\u00e7\u00e3o de logs Chat Interno 1. Salas de Chat Criar Sala : Nova sala para equipe Participantes : Adicionar/remover membros Hist\u00f3rico : Mensagens salvas Notifica\u00e7\u00f5es : Alertas de mensagens 2. Chat Privado Mensagens Diretas : Entre usu\u00e1rios Status Online : Quem est\u00e1 conectado Notifica\u00e7\u00f5es : Alertas de mensagens Hist\u00f3rico : Mensagens salvas Auditoria 1. Logs de Auditoria A\u00e7\u00f5es : Todas as a\u00e7\u00f5es do sistema Usu\u00e1rios : Quem fez o qu\u00ea Timestamps : Quando aconteceu Detalhes : Informa\u00e7\u00f5es completas 2. Filtros de Auditoria Por A\u00e7\u00e3o : Tipo de a\u00e7\u00e3o Por Usu\u00e1rio : A\u00e7\u00f5es de usu\u00e1rio espec\u00edfico Por Data : Per\u00edodo espec\u00edfico Por Provedor : Isolamento de dados 3. Exporta\u00e7\u00e3o PDF : Relat\u00f3rios em PDF Excel : Dados em planilha CSV : Dados estruturados JSON : Dados brutos Atalhos de Teclado 1. Navega\u00e7\u00e3o Ctrl + K : Busca global Ctrl + N : Nova conversa Ctrl + F : Busca na conversa Esc : Fechar modais 2. Chat Enter : Enviar mensagem Shift + Enter : Nova linha Ctrl + A : Selecionar tudo Ctrl + Z : Desfazer 3. Sistema Ctrl + S : Salvar Ctrl + R : Atualizar F5 : Recarregar p\u00e1gina Ctrl + Shift + R : Recarregar for\u00e7ado Notifica\u00e7\u00f5es 1. Tipos de Notifica\u00e7\u00e3o Nova Mensagem : Cliente enviou mensagem Conversa Atribu\u00edda : Nova conversa para voc\u00ea CSAT Recebido : Feedback de satisfa\u00e7\u00e3o Sistema : Alertas do sistema 2. Configura\u00e7\u00f5es Som : Ativar/desativar sons Desktop : Notifica\u00e7\u00f5es do sistema Email : Notifica\u00e7\u00f5es por email Push : Notifica\u00e7\u00f5es push 3. Gerenciamento Marcar como Lida : Marcar notifica\u00e7\u00e3o Arquivar : Remover da lista Configurar : Personalizar alertas Hist\u00f3rico : Ver notifica\u00e7\u00f5es antigas Troubleshooting 1. Problemas Comuns P\u00e1gina n\u00e3o carrega : Verificar conex\u00e3o Mensagens n\u00e3o aparecem : Recarregar p\u00e1gina Erro de permiss\u00e3o : Verificar usu\u00e1rio Lentid\u00e3o : Verificar conex\u00e3o 2. Solu\u00e7\u00f5es Recarregar : F5 ou Ctrl + R Limpar Cache : Ctrl + Shift + R Logout/Login : Sair e entrar novamente Suporte : Contatar administrador 3. Logs Console : F12 para ver erros Network : Verificar requisi\u00e7\u00f5es Application : Verificar storage Security : Verificar certificados Pr\u00f3ximos Passos API - Explore a API Troubleshooting - Resolva problemas Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Interface do Usu\u00e1rio"},{"location":"usage/interface/#interface-do-usuario","text":"Este guia explica como usar a interface do NioChat para gerenciar conversas, visualizar m\u00e9tricas e administrar o sistema.","title":"Interface do Usu\u00e1rio"},{"location":"usage/interface/#acesso-ao-sistema","text":"","title":"Acesso ao Sistema"},{"location":"usage/interface/#1-login","text":"Acesse a URL do sistema: http://localhost:5173 Digite seu usu\u00e1rio e senha Clique em \"Entrar\"","title":"1. Login"},{"location":"usage/interface/#2-primeiro-acesso","text":"Usu\u00e1rio : admin Senha : A senha definida durante a instala\u00e7\u00e3o Alterar Senha : Recomendado no primeiro acesso","title":"2. Primeiro Acesso"},{"location":"usage/interface/#dashboard-principal","text":"","title":"Dashboard Principal"},{"location":"usage/interface/#1-visao-geral","text":"O dashboard principal exibe: - Total de Conversas : N\u00famero total de conversas - Conversas Abertas : Conversas em andamento - Taxa de Resolu\u00e7\u00e3o : Percentual de conversas resolvidas - Satisfa\u00e7\u00e3o M\u00e9dia : M\u00e9dia das avalia\u00e7\u00f5es CSAT - Tempo de Resposta : Tempo m\u00e9dio de resposta","title":"1. Vis\u00e3o Geral"},{"location":"usage/interface/#2-graficos-interativos","text":"Evolu\u00e7\u00e3o Temporal : Gr\u00e1fico de linha mostrando conversas ao longo do tempo Distribui\u00e7\u00e3o por Status : Gr\u00e1fico de pizza com status das conversas Performance por Agente : Gr\u00e1fico de barras com m\u00e9tricas individuais Tend\u00eancias CSAT : Evolu\u00e7\u00e3o da satisfa\u00e7\u00e3o do cliente","title":"2. Gr\u00e1ficos Interativos"},{"location":"usage/interface/#3-filtros","text":"Por Data : Selecione per\u00edodo espec\u00edfico Por Agente : Filtre por agente respons\u00e1vel Por Equipe : Filtre por equipe Por Status : Apenas conversas abertas, fechadas, etc.","title":"3. Filtros"},{"location":"usage/interface/#gerenciamento-de-conversas","text":"","title":"Gerenciamento de Conversas"},{"location":"usage/interface/#1-lista-de-conversas","text":"A lista de conversas mostra: - Cliente : Nome e foto do contato - \u00daltima Mensagem : Preview da \u00faltima mensagem - Status : Aberta, fechada, pendente - Agente : Quem est\u00e1 atendendo - Tempo : H\u00e1 quanto tempo a conversa est\u00e1 ativa - Prioridade : Indicador visual de urg\u00eancia","title":"1. Lista de Conversas"},{"location":"usage/interface/#2-acoes-disponiveis","text":"Abrir Conversa : Clique para abrir o chat Atribuir : Transferir para outro agente Fechar : Encerrar conversa Marcar como Pendente : Pausar atendimento Transferir para Equipe : Enviar para equipe espec\u00edfica","title":"2. A\u00e7\u00f5es Dispon\u00edveis"},{"location":"usage/interface/#3-busca-e-filtros","text":"Busca por Texto : Digite para buscar em mensagens Filtro por Status : Dropdown com op\u00e7\u00f5es Filtro por Agente : Selecione agente espec\u00edfico Ordena\u00e7\u00e3o : Por data, prioridade, status","title":"3. Busca e Filtros"},{"location":"usage/interface/#chat-interface","text":"","title":"Chat Interface"},{"location":"usage/interface/#1-area-de-mensagens","text":"Hist\u00f3rico : Todas as mensagens da conversa Tipos de M\u00eddia : Imagens, v\u00eddeos, \u00e1udios, documentos Rea\u00e7\u00f5es : Emojis e rea\u00e7\u00f5es personalizadas Status de Entrega : Confirma\u00e7\u00e3o de recebimento Timestamp : Hora de cada mensagem","title":"1. \u00c1rea de Mensagens"},{"location":"usage/interface/#2-envio-de-mensagens","text":"Texto : Digite e pressione Enter M\u00eddia : Clique no \u00edcone de anexo Respostas R\u00e1pidas : Templates pr\u00e9-definidos Emojis : Seletor de emojis Formata\u00e7\u00e3o : Negrito, it\u00e1lico, c\u00f3digo","title":"2. Envio de Mensagens"},{"location":"usage/interface/#3-funcionalidades-avancadas","text":"IA Assistente : Sugest\u00f5es autom\u00e1ticas Consulta SGP : Bot\u00e3o para consultar dados do cliente Hist\u00f3rico : Ver conversas anteriores do cliente Notas : Adicionar notas internas Tags : Marcar conversa com tags","title":"3. Funcionalidades Avan\u00e7adas"},{"location":"usage/interface/#sistema-csat","text":"","title":"Sistema CSAT"},{"location":"usage/interface/#1-configuracao","text":"Tempo de Envio : 1.5 minutos ap\u00f3s fechamento Mensagem Personalizada : Texto customizado por provedor Canais : WhatsApp, SMS, Email Agendamento : Hor\u00e1rios espec\u00edficos","title":"1. Configura\u00e7\u00e3o"},{"location":"usage/interface/#2-dashboard-csat","text":"M\u00e9tricas Visuais : Gr\u00e1ficos de satisfa\u00e7\u00e3o Distribui\u00e7\u00e3o de Ratings : 1 a 5 estrelas Evolu\u00e7\u00e3o Temporal : Tend\u00eancias ao longo do tempo Compara\u00e7\u00e3o : Per\u00edodos diferentes","title":"2. Dashboard CSAT"},{"location":"usage/interface/#3-ultimos-feedbacks","text":"Avatar do Cliente : Foto de perfil Rating Visual : Emoji correspondente Mensagem Original : Feedback textual do cliente Data/Hora : Quando foi enviado An\u00e1lise IA : Interpreta\u00e7\u00e3o autom\u00e1tica","title":"3. \u00daltimos Feedbacks"},{"location":"usage/interface/#administracao","text":"","title":"Administra\u00e7\u00e3o"},{"location":"usage/interface/#1-usuarios","text":"Listar Usu\u00e1rios : Todos os usu\u00e1rios do sistema Criar Usu\u00e1rio : Adicionar novo usu\u00e1rio Editar Perfil : Modificar dados do usu\u00e1rio Permiss\u00f5es : Definir n\u00edveis de acesso Equipes : Organizar usu\u00e1rios em equipes","title":"1. Usu\u00e1rios"},{"location":"usage/interface/#2-provedores","text":"Configura\u00e7\u00f5es : Dados do provedor Integra\u00e7\u00f5es : WhatsApp, SGP, Supabase Limites : Controles de uso Billing : Informa\u00e7\u00f5es de cobran\u00e7a","title":"2. Provedores"},{"location":"usage/interface/#3-configuracoes","text":"Sistema : Configura\u00e7\u00f5es gerais IA : Par\u00e2metros da intelig\u00eancia artificial Notifica\u00e7\u00f5es : Alertas e lembretes Backup : Configura\u00e7\u00f5es de backup Logs : Visualiza\u00e7\u00e3o de logs","title":"3. Configura\u00e7\u00f5es"},{"location":"usage/interface/#chat-interno","text":"","title":"Chat Interno"},{"location":"usage/interface/#1-salas-de-chat","text":"Criar Sala : Nova sala para equipe Participantes : Adicionar/remover membros Hist\u00f3rico : Mensagens salvas Notifica\u00e7\u00f5es : Alertas de mensagens","title":"1. Salas de Chat"},{"location":"usage/interface/#2-chat-privado","text":"Mensagens Diretas : Entre usu\u00e1rios Status Online : Quem est\u00e1 conectado Notifica\u00e7\u00f5es : Alertas de mensagens Hist\u00f3rico : Mensagens salvas","title":"2. Chat Privado"},{"location":"usage/interface/#auditoria","text":"","title":"Auditoria"},{"location":"usage/interface/#1-logs-de-auditoria","text":"A\u00e7\u00f5es : Todas as a\u00e7\u00f5es do sistema Usu\u00e1rios : Quem fez o qu\u00ea Timestamps : Quando aconteceu Detalhes : Informa\u00e7\u00f5es completas","title":"1. Logs de Auditoria"},{"location":"usage/interface/#2-filtros-de-auditoria","text":"Por A\u00e7\u00e3o : Tipo de a\u00e7\u00e3o Por Usu\u00e1rio : A\u00e7\u00f5es de usu\u00e1rio espec\u00edfico Por Data : Per\u00edodo espec\u00edfico Por Provedor : Isolamento de dados","title":"2. Filtros de Auditoria"},{"location":"usage/interface/#3-exportacao","text":"PDF : Relat\u00f3rios em PDF Excel : Dados em planilha CSV : Dados estruturados JSON : Dados brutos","title":"3. Exporta\u00e7\u00e3o"},{"location":"usage/interface/#atalhos-de-teclado","text":"","title":"Atalhos de Teclado"},{"location":"usage/interface/#1-navegacao","text":"Ctrl + K : Busca global Ctrl + N : Nova conversa Ctrl + F : Busca na conversa Esc : Fechar modais","title":"1. Navega\u00e7\u00e3o"},{"location":"usage/interface/#2-chat","text":"Enter : Enviar mensagem Shift + Enter : Nova linha Ctrl + A : Selecionar tudo Ctrl + Z : Desfazer","title":"2. Chat"},{"location":"usage/interface/#3-sistema","text":"Ctrl + S : Salvar Ctrl + R : Atualizar F5 : Recarregar p\u00e1gina Ctrl + Shift + R : Recarregar for\u00e7ado","title":"3. Sistema"},{"location":"usage/interface/#notificacoes","text":"","title":"Notifica\u00e7\u00f5es"},{"location":"usage/interface/#1-tipos-de-notificacao","text":"Nova Mensagem : Cliente enviou mensagem Conversa Atribu\u00edda : Nova conversa para voc\u00ea CSAT Recebido : Feedback de satisfa\u00e7\u00e3o Sistema : Alertas do sistema","title":"1. Tipos de Notifica\u00e7\u00e3o"},{"location":"usage/interface/#2-configuracoes","text":"Som : Ativar/desativar sons Desktop : Notifica\u00e7\u00f5es do sistema Email : Notifica\u00e7\u00f5es por email Push : Notifica\u00e7\u00f5es push","title":"2. Configura\u00e7\u00f5es"},{"location":"usage/interface/#3-gerenciamento","text":"Marcar como Lida : Marcar notifica\u00e7\u00e3o Arquivar : Remover da lista Configurar : Personalizar alertas Hist\u00f3rico : Ver notifica\u00e7\u00f5es antigas","title":"3. Gerenciamento"},{"location":"usage/interface/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"usage/interface/#1-problemas-comuns","text":"P\u00e1gina n\u00e3o carrega : Verificar conex\u00e3o Mensagens n\u00e3o aparecem : Recarregar p\u00e1gina Erro de permiss\u00e3o : Verificar usu\u00e1rio Lentid\u00e3o : Verificar conex\u00e3o","title":"1. Problemas Comuns"},{"location":"usage/interface/#2-solucoes","text":"Recarregar : F5 ou Ctrl + R Limpar Cache : Ctrl + Shift + R Logout/Login : Sair e entrar novamente Suporte : Contatar administrador","title":"2. Solu\u00e7\u00f5es"},{"location":"usage/interface/#3-logs","text":"Console : F12 para ver erros Network : Verificar requisi\u00e7\u00f5es Application : Verificar storage Security : Verificar certificados","title":"3. Logs"},{"location":"usage/interface/#proximos-passos","text":"API - Explore a API Troubleshooting - Resolva problemas Configura\u00e7\u00e3o - Configure integra\u00e7\u00f5es","title":"Pr\u00f3ximos Passos"}]}